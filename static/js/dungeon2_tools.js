!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/dist/",n(n.s=9)}([function(t,e,n){"use strict";n.r(e),n.d(e,"__extends",function(){return i}),n.d(e,"__assign",function(){return o}),n.d(e,"__rest",function(){return a}),n.d(e,"__decorate",function(){return s}),n.d(e,"__param",function(){return u}),n.d(e,"__metadata",function(){return c}),n.d(e,"__awaiter",function(){return l}),n.d(e,"__generator",function(){return h}),n.d(e,"__exportStar",function(){return f}),n.d(e,"__values",function(){return p}),n.d(e,"__read",function(){return d}),n.d(e,"__spread",function(){return v}),n.d(e,"__await",function(){return y}),n.d(e,"__asyncGenerator",function(){return _}),n.d(e,"__asyncDelegator",function(){return g}),n.d(e,"__asyncValues",function(){return m}),n.d(e,"__makeTemplateObject",function(){return b}),n.d(e,"__importStar",function(){return w}),n.d(e,"__importDefault",function(){return E});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t};function a(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&(n[r[i]]=t[r[i]])}return n}function s(t,e,n,r){var i,o=arguments.length,a=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(o<3?i(a):o>3?i(e,n,a):i(e,n))||a);return o>3&&a&&Object.defineProperty(e,n,a),a}function u(t,e){return function(n,r){e(n,r,t)}}function c(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function l(t,e,n,r){return new(n||(n=Promise))(function(i,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function s(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(a,s)}u((r=r.apply(t,e||[])).next())})}function h(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=r[2&o[0]?"return":o[0]?"throw":"next"])&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[0,i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function f(t,e){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}function p(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}}function d(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function v(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(d(arguments[e]));return t}function y(t){return this instanceof y?(this.v=t,this):new y(t)}function _(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){i[t]&&(r[t]=function(e){return new Promise(function(n,r){o.push([t,e,n,r])>1||s(t,e)})})}function s(t,e){try{(n=i[t](e)).value instanceof y?Promise.resolve(n.value.v).then(u,c):l(o[0][2],n)}catch(t){l(o[0][3],t)}var n}function u(t){s("next",t)}function c(t){s("throw",t)}function l(t,e){t(e),o.shift(),o.length&&s(o[0][0],o[0][1])}}function g(t){var e,n;return e={},r("next"),r("throw",function(t){throw t}),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,i){t[r]&&(e[r]=function(e){return(n=!n)?{value:y(t[r](e)),done:"return"===r}:i?i(e):e})}}function m(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e=t[Symbol.asyncIterator];return e?e.call(t):p(t)}function b(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function w(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}function E(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),i={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},o=function(t,e){if(!t)throw a(e)},a=function(t){return new Error("Firebase Database ("+i.SDK_VERSION+") INTERNAL ASSERT FAILED: "+t)},s=function(t){for(var e=[],n=0,r=0;r<t.length;r++){var i=t.charCodeAt(r);i<128?e[n++]=i:i<2048?(e[n++]=i>>6|192,e[n++]=63&i|128):55296==(64512&i)&&r+1<t.length&&56320==(64512&t.charCodeAt(r+1))?(i=65536+((1023&i)<<10)+(1023&t.charCodeAt(++r)),e[n++]=i>>18|240,e[n++]=i>>12&63|128,e[n++]=i>>6&63|128,e[n++]=63&i|128):(e[n++]=i>>12|224,e[n++]=i>>6&63|128,e[n++]=63&i|128)}return e},u={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[],i=0;i<t.length;i+=3){var o=t[i],a=i+1<t.length,s=a?t[i+1]:0,u=i+2<t.length,c=u?t[i+2]:0,l=o>>2,h=(3&o)<<4|s>>4,f=(15&s)<<2|c>>6,p=63&c;u||(p=64,a||(f=64)),r.push(n[l],n[h],n[f],n[p])}return r.join("")},encodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(s(t),e)},decodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){for(var e=[],n=0,r=0;n<t.length;){var i=t[n++];if(i<128)e[r++]=String.fromCharCode(i);else if(i>191&&i<224){var o=t[n++];e[r++]=String.fromCharCode((31&i)<<6|63&o)}else if(i>239&&i<365){var a=((7&i)<<18|(63&(o=t[n++]))<<12|(63&(s=t[n++]))<<6|63&t[n++])-65536;e[r++]=String.fromCharCode(55296+(a>>10)),e[r++]=String.fromCharCode(56320+(1023&a))}else{o=t[n++];var s=t[n++];e[r++]=String.fromCharCode((15&i)<<12|(63&o)<<6|63&s)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray:function(t,e){this.init_();for(var n=e?this.charToByteMapWebSafe_:this.charToByteMap_,r=[],i=0;i<t.length;){var o=n[t.charAt(i++)],a=i<t.length?n[t.charAt(i)]:0,s=++i<t.length?n[t.charAt(i)]:64,u=++i<t.length?n[t.charAt(i)]:64;if(++i,null==o||null==a||null==s||null==u)throw Error();var c=o<<2|a>>4;if(r.push(c),64!=s){var l=a<<4&240|s>>2;if(r.push(l),64!=u){var h=s<<6&192|u;r.push(h)}}}return r},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}},c=function(t){try{return u.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null};function l(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(var n in e)e.hasOwnProperty(n)&&(t[n]=l(t[n],e[n]));return t}var h=function(){function t(){var t=this;this.promise=new Promise(function(e,n){t.resolve=e,t.reject=n})}return t.prototype.wrapCallback=function(t){var e=this;return function(n,r){n?e.reject(n):e.resolve(r),"function"==typeof t&&(e.promise.catch(function(){}),1===t.length?t(n):t(n,r))}},t}(),f=function(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""},p="FirebaseError",d=Error.captureStackTrace;var v=function(){return function(t,e){if(this.code=t,this.message=e,d)d(this,y.prototype.create);else{var n=Error.apply(this,arguments);this.name=p,Object.defineProperty(this,"stack",{get:function(){return n.stack}})}}}();v.prototype=Object.create(Error.prototype),v.prototype.constructor=v,v.prototype.name=p;var y=function(){function t(t,e,n){this.service=t,this.serviceName=e,this.errors=n,this.pattern=/\{\$([^}]+)}/g}return t.prototype.create=function(t,e){void 0===e&&(e={});var n,r=this.errors[t],i=this.service+"/"+t;n=void 0===r?"Error":r.replace(this.pattern,function(t,n){var r=e[n];return void 0!==r?r.toString():"<"+n+"?>"}),n=this.serviceName+": "+n+" ("+i+").";var o=new v(i,n);for(var a in e)e.hasOwnProperty(a)&&"_"!==a.slice(-1)&&(o[a]=e[a]);return o},t}();function _(t){return JSON.parse(t)}var g=function(t){var e={},n={},r={},i="";try{var o=t.split(".");e=_(c(o[0])||""),n=_(c(o[1])||""),i=o[2],r=n.d||{},delete n.d}catch(t){}return{header:e,claims:n,data:r,signature:i}},m=function(t,e){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])},b=function(t,e){return m(e,function(e,n){t[e]=n}),t},w=function(t,e,n){for(var r in t)if(e.call(n,t[r],r,t))return r},E=function(t){function e(){var e=t.call(this)||this;e.chain_=[],e.buf_=[],e.W_=[],e.pad_=[],e.inbuf_=0,e.total_=0,e.blockSize=64,e.pad_[0]=128;for(var n=1;n<e.blockSize;++n)e.pad_[n]=0;return e.reset(),e}return r.__extends(e,t),e.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},e.prototype.compress_=function(t,e){e||(e=0);var n=this.W_;if("string"==typeof t)for(var r=0;r<16;r++)n[r]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(r=0;r<16;r++)n[r]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(r=16;r<80;r++){var i=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(i<<1|i>>>31)}var o,a,s=this.chain_[0],u=this.chain_[1],c=this.chain_[2],l=this.chain_[3],h=this.chain_[4];for(r=0;r<80;r++){r<40?r<20?(o=l^u&(c^l),a=1518500249):(o=u^c^l,a=1859775393):r<60?(o=u&c|l&(u|c),a=2400959708):(o=u^c^l,a=3395469782);i=(s<<5|s>>>27)+o+h+a+n[r]&4294967295;h=l,l=c,c=4294967295&(u<<30|u>>>2),u=s,s=i}this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+c&4294967295,this.chain_[3]=this.chain_[3]+l&4294967295,this.chain_[4]=this.chain_[4]+h&4294967295},e.prototype.update=function(t,e){if(null!=t){void 0===e&&(e=t.length);for(var n=e-this.blockSize,r=0,i=this.buf_,o=this.inbuf_;r<e;){if(0==o)for(;r<=n;)this.compress_(t,r),r+=this.blockSize;if("string"==typeof t){for(;r<e;)if(i[o]=t.charCodeAt(r),++r,++o==this.blockSize){this.compress_(i),o=0;break}}else for(;r<e;)if(i[o]=t[r],++r,++o==this.blockSize){this.compress_(i),o=0;break}}this.inbuf_=o,this.total_+=e}},e.prototype.digest=function(){var t=[],e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&e,e/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var i=24;i>=0;i-=8)t[r]=this.chain_[n]>>i&255,++r;return t},e}(function(){return function(){this.blockSize=-1}}());var C=function(){function t(t,e){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then(function(){t(n)}).catch(function(t){n.error(t)})}return t.prototype.next=function(t){this.forEachObserver(function(e){e.next(t)})},t.prototype.error=function(t){this.forEachObserver(function(e){e.error(t)}),this.close(t)},t.prototype.complete=function(){this.forEachObserver(function(t){t.complete()}),this.close()},t.prototype.subscribe=function(t,e,n){var r,i=this;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=0,r=e;n<r.length;n++){var i=r[n];if(i in t&&"function"==typeof t[i])return!0}return!1}(t,["next","error","complete"])?t:{next:t,error:e,complete:n}).next&&(r.next=T),void 0===r.error&&(r.error=T),void 0===r.complete&&(r.complete=T);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then(function(){try{i.finalError?r.error(i.finalError):r.complete()}catch(t){}}),this.observers.push(r),o},t.prototype.unsubscribeOne=function(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},t.prototype.forEachObserver=function(t){if(!this.finalized)for(var e=0;e<this.observers.length;e++)this.sendOne(e,t)},t.prototype.sendOne=function(t,e){var n=this;this.task.then(function(){if(void 0!==n.observers&&void 0!==n.observers[t])try{e(n.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}})},t.prototype.close=function(t){var e=this;this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then(function(){e.observers=void 0,e.onNoObservers=void 0}))},t}();function T(){}function S(t,e,n){var r="";switch(e){case 1:r=n?"first":"First";break;case 2:r=n?"second":"Second";break;case 3:r=n?"third":"Third";break;case 4:r=n?"fourth":"Fourth";break;default:throw new Error("errorPrefix called with argumentNumber > 4.  Need to update it?")}var i=t+" failed: ";return i+=r+" argument "}e.assert=o,e.assertionError=a,e.base64=u,e.base64Decode=c,e.base64Encode=function(t){var e=s(t);return u.encodeByteArray(e,!0)},e.CONSTANTS=i,e.deepCopy=function(t){return l(void 0,t)},e.deepExtend=l,e.patchProperty=function(t,e,n){t[e]=n},e.Deferred=h,e.getUA=f,e.isMobileCordova=function(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(f())},e.isNodeSdk=function(){return!0===i.NODE_CLIENT||!0===i.NODE_ADMIN},e.isReactNative=function(){return"object"==typeof navigator&&"ReactNative"===navigator.product},e.ErrorFactory=y,e.FirebaseError=v,e.patchCapture=function(t){var e=d;return d=t,e},e.jsonEval=_,e.stringify=function(t){return JSON.stringify(t)},e.decode=g,e.isAdmin=function(t){var e=g(t).claims;return"object"==typeof e&&!0===e.admin},e.issuedAtTime=function(t){var e=g(t).claims;return"object"==typeof e&&e.hasOwnProperty("iat")?e.iat:null},e.isValidFormat=function(t){var e=g(t),n=e.claims;return!!e.signature&&!!n&&"object"==typeof n&&n.hasOwnProperty("iat")},e.isValidTimestamp=function(t){var e,n,r=g(t).claims,i=Math.floor((new Date).getTime()/1e3);return"object"==typeof r&&(r.hasOwnProperty("nbf")?e=r.nbf:r.hasOwnProperty("iat")&&(e=r.iat),n=r.hasOwnProperty("exp")?r.exp:e+86400),i&&e&&n&&i>=e&&i<=n},e.clone=function(t){return b({},t)},e.contains=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.every=function(t,e){for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&!e(n,t[n]))return!1;return!0},e.extend=b,e.findKey=w,e.findValue=function(t,e,n){var r=w(t,e,n);return r&&t[r]},e.forEach=m,e.getAnyKey=function(t){for(var e in t)return e},e.getCount=function(t){var e=0;for(var n in t)e++;return e},e.getValues=function(t){var e=[],n=0;for(var r in t)e[n++]=t[r];return e},e.isEmpty=function(t){for(var e in t)return!1;return!0},e.isNonNullObject=function(t){return"object"==typeof t&&null!==t},e.map=function(t,e,n){var r={};for(var i in t)r[i]=e.call(n,t[i],i,t);return r},e.safeGet=function(t,e){if(Object.prototype.hasOwnProperty.call(t,e))return t[e]},e.querystring=function(t){var e=[];return m(t,function(t,n){Array.isArray(n)?n.forEach(function(n){e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))}):e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))}),e.length?"&"+e.join("&"):""},e.querystringDecode=function(t){var e={};return t.replace(/^\?/,"").split("&").forEach(function(t){if(t){var n=t.split("=");e[n[0]]=n[1]}}),e},e.Sha1=E,e.async=function(t,e){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];Promise.resolve(!0).then(function(){t.apply(void 0,n)}).catch(function(t){e&&e(t)})}},e.createSubscribe=function(t,e){var n=new C(t,e);return n.subscribe.bind(n)},e.errorPrefix=S,e.validateArgCount=function(t,e,n,r){var i;if(r<e?i="at least "+e:r>n&&(i=0===n?"none":"no more than "+n),i)throw new Error(t+" failed: Was called with "+r+(1===r?" argument.":" arguments.")+" Expects "+i+".")},e.validateCallback=function(t,e,n,r){if((!r||n)&&"function"!=typeof n)throw new Error(S(t,e,r)+"must be a valid function.")},e.validateContextObject=function(t,e,n,r){if((!r||n)&&("object"!=typeof n||null===n))throw new Error(S(t,e,r)+"must be a valid context object.")},e.validateNamespace=function(t,e,n,r){if((!r||n)&&"string"!=typeof n)throw new Error(S(t,e,r)+"must be a valid firebase namespace.")},e.stringLength=function(t){for(var e=0,n=0;n<t.length;n++){var r=t.charCodeAt(n);r<128?e++:r<2048?e+=2:r>=55296&&r<=56319?(e+=4,n++):e+=3}return e},e.stringToByteArray=function(t){for(var e=[],n=0,r=0;r<t.length;r++){var i=t.charCodeAt(r);if(i>=55296&&i<=56319){var a=i-55296;o(++r<t.length,"Surrogate pair missing trail surrogate."),i=65536+(a<<10)+(t.charCodeAt(r)-56320)}i<128?e[n++]=i:i<2048?(e[n++]=i>>6|192,e[n++]=63&i|128):i<65536?(e[n++]=i>>12|224,e[n++]=i>>6&63|128,e[n++]=63&i|128):(e[n++]=i>>18|240,e[n++]=i>>12&63|128,e[n++]=i>>6&63|128,e[n++]=63&i|128)}return e}},function(t,e,n){"use strict";n.r(e),n.d(e,"firebase",function(){return l});var r=n(1),i=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o="[DEFAULT]",a=[],s=function(){function t(t,e,n){this.firebase_=n,this.isDeleted_=!1,this.services_={},this.name_=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled||!1,this.options_=Object(r.deepCopy)(t),this.INTERNAL={getUid:function(){return null},getToken:function(){return Promise.resolve(null)},addAuthTokenListener:function(t){a.push(t),setTimeout(function(){return t(null)},0)},removeAuthTokenListener:function(t){a=a.filter(function(e){return e!==t})}}}return Object.defineProperty(t.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this._automaticDataCollectionEnabled},set:function(t){this.checkDestroyed_(),this._automaticDataCollectionEnabled=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!0,configurable:!0}),t.prototype.delete=function(){var t=this;return new Promise(function(e){t.checkDestroyed_(),e()}).then(function(){t.firebase_.INTERNAL.removeApp(t.name_);var e=[];return Object.keys(t.services_).forEach(function(n){Object.keys(t.services_[n]).forEach(function(r){e.push(t.services_[n][r])})}),Promise.all(e.map(function(t){return t.INTERNAL.delete()}))}).then(function(){t.isDeleted_=!0,t.services_={}})},t.prototype._getService=function(t,e){if(void 0===e&&(e=o),this.checkDestroyed_(),this.services_[t]||(this.services_[t]={}),!this.services_[t][e]){var n=e!==o?e:void 0,r=this.firebase_.INTERNAL.factories[t](this,this.extendApp.bind(this),n);this.services_[t][e]=r}return this.services_[t][e]},t.prototype.extendApp=function(t){var e=this;Object(r.deepExtend)(this,t),t.INTERNAL&&t.INTERNAL.addAuthTokenListener&&(a.forEach(function(t){e.INTERNAL.addAuthTokenListener(t)}),a=[])},t.prototype.checkDestroyed_=function(){this.isDeleted_&&u("app-deleted",{name:this.name_})},t}();function u(t,e){throw c.create(t,e)}s.prototype.name&&s.prototype.options||s.prototype.delete||console.log("dc");var c=new r.ErrorFactory("app","Firebase",{"no-app":"No Firebase App '{$name}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$name}","duplicate-app":"Firebase App named '{$name}' already exists","app-deleted":"Firebase App named '{$name}' already deleted","duplicate-service":"Firebase service named '{$name}' already registered","sa-not-supported":"Initializing the Firebase SDK with a service account is only allowed in a Node.js environment. On client devices, you should instead initialize the SDK with an api key and auth domain","invalid-app-argument":"firebase.{$name}() takes either no argument or a Firebase App instance."}),l=function t(){var e={},n={},a={},c={__esModule:!0,initializeApp:function(t,n){if(void 0===n&&(n={}),"object"!=typeof n||null===n){var r=n;n={name:r}}var a=n;void 0===a.name&&(a.name=o);var l=a.name;"string"==typeof l&&l||u("bad-app-name",{name:l+""}),i(e,l)&&u("duplicate-app",{name:l});var h=new s(t,a,c);return e[l]=h,f(h,"create"),h},app:l,apps:null,Promise:Promise,SDK_VERSION:"4.13.0",INTERNAL:{registerService:function(t,e,i,o,f){n[t]&&u("duplicate-service",{name:t}),n[t]=e,o&&(a[t]=o,h().forEach(function(t){o("create",t)}));var p=function(e){return void 0===e&&(e=l()),"function"!=typeof e[t]&&u("invalid-app-argument",{name:t}),e[t]()};return void 0!==i&&Object(r.deepExtend)(p,i),c[t]=p,s.prototype[t]=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return this._getService.bind(this,t).apply(this,f?e:[])},p},createFirebaseNamespace:t,extendNamespace:function(t){Object(r.deepExtend)(c,t)},createSubscribe:r.createSubscribe,ErrorFactory:r.ErrorFactory,removeApp:function(t){f(e[t],"delete"),delete e[t]},factories:n,useAsService:p,Promise:Promise,deepExtend:r.deepExtend}};function l(t){return i(e,t=t||o)||u("no-app",{name:t}),e[t]}function h(){return Object.keys(e).map(function(t){return e[t]})}function f(t,e){Object.keys(n).forEach(function(n){var r=p(t,n);null!==r&&a[r]&&a[r](e,t)})}function p(t,e){if("serverAuth"===e)return null;var n=e;return t.options,n}return Object(r.patchProperty)(c,"default",c),Object.defineProperty(c,"apps",{get:h}),Object(r.patchProperty)(l,"App",s),c}();e.default=l},function(t,e,n){"use strict";function r(t,e){for(var n=[],r={},i=0;i<e.length;i++){var o=e[i],a=o[0],s={id:t+":"+i,css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}n.r(e),n.d(e,"default",function(){return d});var i="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!i)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var o={},a=i&&(document.head||document.getElementsByTagName("head")[0]),s=null,u=0,c=!1,l=function(){},h=null,f="data-vue-ssr-id",p="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function d(t,e,n,i){c=n,h=i||{};var a=r(t,e);return v(a),function(e){for(var n=[],i=0;i<a.length;i++){var s=a[i];(u=o[s.id]).refs--,n.push(u)}e?v(a=r(t,e)):a=[];for(i=0;i<n.length;i++){var u;if(0===(u=n[i]).refs){for(var c=0;c<u.parts.length;c++)u.parts[c]();delete o[u.id]}}}}function v(t){for(var e=0;e<t.length;e++){var n=t[e],r=o[n.id];if(r){r.refs++;for(var i=0;i<r.parts.length;i++)r.parts[i](n.parts[i]);for(;i<n.parts.length;i++)r.parts.push(_(n.parts[i]));r.parts.length>n.parts.length&&(r.parts.length=n.parts.length)}else{var a=[];for(i=0;i<n.parts.length;i++)a.push(_(n.parts[i]));o[n.id]={id:n.id,refs:1,parts:a}}}}function y(){var t=document.createElement("style");return t.type="text/css",a.appendChild(t),t}function _(t){var e,n,r=document.querySelector("style["+f+'~="'+t.id+'"]');if(r){if(c)return l;r.parentNode.removeChild(r)}if(p){var i=u++;r=s||(s=y()),e=b.bind(null,r,i,!1),n=b.bind(null,r,i,!0)}else r=y(),e=function(t,e){var n=e.css,r=e.media,i=e.sourceMap;r&&t.setAttribute("media",r);h.ssrId&&t.setAttribute(f,e.id);i&&(n+="\n/*# sourceURL="+i.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,r),n=function(){r.parentNode.removeChild(r)};return e(t),function(r){if(r){if(r.css===t.css&&r.media===t.media&&r.sourceMap===t.sourceMap)return;e(t=r)}else n()}}var g,m=(g=[],function(t,e){return g[t]=e,g.filter(Boolean).join("\n")});function b(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=m(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),o=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(o).concat([i]).join("\n")}var a;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<t.length;i++){var a=t[i];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";(function(t,n){
/*!
 * Vue.js v2.5.16
 * (c) 2014-2018 Evan You
 * Released under the MIT License.
 */
var r=Object.freeze({});function i(t){return void 0===t||null===t}function o(t){return void 0!==t&&null!==t}function a(t){return!0===t}function s(t){return"string"==typeof t||"number"==typeof t||"symbol"==typeof t||"boolean"==typeof t}function u(t){return null!==t&&"object"==typeof t}var c=Object.prototype.toString;function l(t){return"[object Object]"===c.call(t)}function h(t){return"[object RegExp]"===c.call(t)}function f(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function p(t){return null==t?"":"object"==typeof t?JSON.stringify(t,null,2):String(t)}function d(t){var e=parseFloat(t);return isNaN(e)?t:e}function v(t,e){for(var n=Object.create(null),r=t.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}var y=v("slot,component",!0),_=v("key,ref,slot,slot-scope,is");function g(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var m=Object.prototype.hasOwnProperty;function b(t,e){return m.call(t,e)}function w(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}var E=/-(\w)/g,C=w(function(t){return t.replace(E,function(t,e){return e?e.toUpperCase():""})}),T=w(function(t){return t.charAt(0).toUpperCase()+t.slice(1)}),S=/\B([A-Z])/g,I=w(function(t){return t.replace(S,"-$1").toLowerCase()});var N=Function.prototype.bind?function(t,e){return t.bind(e)}:function(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n};function A(t,e){e=e||0;for(var n=t.length-e,r=new Array(n);n--;)r[n]=t[n+e];return r}function O(t,e){for(var n in e)t[n]=e[n];return t}function k(t){for(var e={},n=0;n<t.length;n++)t[n]&&O(e,t[n]);return e}function R(t,e,n){}var P=function(t,e,n){return!1},D=function(t){return t};function x(t,e){if(t===e)return!0;var n=u(t),r=u(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var i=Array.isArray(t),o=Array.isArray(e);if(i&&o)return t.length===e.length&&t.every(function(t,n){return x(t,e[n])});if(i||o)return!1;var a=Object.keys(t),s=Object.keys(e);return a.length===s.length&&a.every(function(n){return x(t[n],e[n])})}catch(t){return!1}}function L(t,e){for(var n=0;n<t.length;n++)if(x(t[n],e))return n;return-1}function M(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var F="data-server-rendered",U=["component","directive","filter"],j=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured"],B={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:P,isReservedAttr:P,isUnknownElement:P,getTagNamespace:R,parsePlatformTagName:D,mustUseProp:P,_lifecycleHooks:j};function W(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var V=/[^\w.$]/;var $,q="__proto__"in{},H="undefined"!=typeof window,K="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,G=K&&WXEnvironment.platform.toLowerCase(),Q=H&&window.navigator.userAgent.toLowerCase(),z=Q&&/msie|trident/.test(Q),X=Q&&Q.indexOf("msie 9.0")>0,Y=Q&&Q.indexOf("edge/")>0,J=(Q&&Q.indexOf("android"),Q&&/iphone|ipad|ipod|ios/.test(Q)||"ios"===G),Z=(Q&&/chrome\/\d+/.test(Q),{}.watch),tt=!1;if(H)try{var et={};Object.defineProperty(et,"passive",{get:function(){tt=!0}}),window.addEventListener("test-passive",null,et)}catch(t){}var nt=function(){return void 0===$&&($=!H&&!K&&void 0!==t&&"server"===t.process.env.VUE_ENV),$},rt=H&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function it(t){return"function"==typeof t&&/native code/.test(t.toString())}var ot,at="undefined"!=typeof Symbol&&it(Symbol)&&"undefined"!=typeof Reflect&&it(Reflect.ownKeys);ot="undefined"!=typeof Set&&it(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var st=R,ut=0,ct=function(){this.id=ut++,this.subs=[]};ct.prototype.addSub=function(t){this.subs.push(t)},ct.prototype.removeSub=function(t){g(this.subs,t)},ct.prototype.depend=function(){ct.target&&ct.target.addDep(this)},ct.prototype.notify=function(){for(var t=this.subs.slice(),e=0,n=t.length;e<n;e++)t[e].update()},ct.target=null;var lt=[];function ht(t){ct.target&&lt.push(ct.target),ct.target=t}function ft(){ct.target=lt.pop()}var pt=function(t,e,n,r,i,o,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=i,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},dt={child:{configurable:!0}};dt.child.get=function(){return this.componentInstance},Object.defineProperties(pt.prototype,dt);var vt=function(t){void 0===t&&(t="");var e=new pt;return e.text=t,e.isComment=!0,e};function yt(t){return new pt(void 0,void 0,void 0,String(t))}function _t(t){var e=new pt(t.tag,t.data,t.children,t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.isCloned=!0,e}var gt=Array.prototype,mt=Object.create(gt);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(t){var e=gt[t];W(mt,t,function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var i,o=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":i=n;break;case"splice":i=n.slice(2)}return i&&a.observeArray(i),a.dep.notify(),o})});var bt=Object.getOwnPropertyNames(mt),wt=!0;function Et(t){wt=t}var Ct=function(t){(this.value=t,this.dep=new ct,this.vmCount=0,W(t,"__ob__",this),Array.isArray(t))?((q?Tt:St)(t,mt,bt),this.observeArray(t)):this.walk(t)};function Tt(t,e,n){t.__proto__=e}function St(t,e,n){for(var r=0,i=n.length;r<i;r++){var o=n[r];W(t,o,e[o])}}function It(t,e){var n;if(u(t)&&!(t instanceof pt))return b(t,"__ob__")&&t.__ob__ instanceof Ct?n=t.__ob__:wt&&!nt()&&(Array.isArray(t)||l(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new Ct(t)),e&&n&&n.vmCount++,n}function Nt(t,e,n,r,i){var o=new ct,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var s=a&&a.get;s||2!==arguments.length||(n=t[e]);var u=a&&a.set,c=!i&&It(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return ct.target&&(o.depend(),c&&(c.dep.depend(),Array.isArray(e)&&function t(e){for(var n=void 0,r=0,i=e.length;r<i;r++)(n=e[r])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&t(n)}(e))),e},set:function(e){var r=s?s.call(t):n;e===r||e!=e&&r!=r||(u?u.call(t,e):n=e,c=!i&&It(e),o.notify())}})}}function At(t,e,n){if(Array.isArray(t)&&f(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var r=t.__ob__;return t._isVue||r&&r.vmCount?n:r?(Nt(r.value,e,n),r.dep.notify(),n):(t[e]=n,n)}function Ot(t,e){if(Array.isArray(t)&&f(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount||b(t,e)&&(delete t[e],n&&n.dep.notify())}}Ct.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)Nt(t,e[n])},Ct.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)It(t[e])};var kt=B.optionMergeStrategies;function Rt(t,e){if(!e)return t;for(var n,r,i,o=Object.keys(e),a=0;a<o.length;a++)r=t[n=o[a]],i=e[n],b(t,n)?l(r)&&l(i)&&Rt(r,i):At(t,n,i);return t}function Pt(t,e,n){return n?function(){var r="function"==typeof e?e.call(n,n):e,i="function"==typeof t?t.call(n,n):t;return r?Rt(r,i):i}:e?t?function(){return Rt("function"==typeof e?e.call(this,this):e,"function"==typeof t?t.call(this,this):t)}:e:t}function Dt(t,e){return e?t?t.concat(e):Array.isArray(e)?e:[e]:t}function xt(t,e,n,r){var i=Object.create(t||null);return e?O(i,e):i}kt.data=function(t,e,n){return n?Pt(t,e,n):e&&"function"!=typeof e?t:Pt(t,e)},j.forEach(function(t){kt[t]=Dt}),U.forEach(function(t){kt[t+"s"]=xt}),kt.watch=function(t,e,n,r){if(t===Z&&(t=void 0),e===Z&&(e=void 0),!e)return Object.create(t||null);if(!t)return e;var i={};for(var o in O(i,t),e){var a=i[o],s=e[o];a&&!Array.isArray(a)&&(a=[a]),i[o]=a?a.concat(s):Array.isArray(s)?s:[s]}return i},kt.props=kt.methods=kt.inject=kt.computed=function(t,e,n,r){if(!t)return e;var i=Object.create(null);return O(i,t),e&&O(i,e),i},kt.provide=Pt;var Lt=function(t,e){return void 0===e?t:e};function Mt(t,e,n){"function"==typeof e&&(e=e.options),function(t,e){var n=t.props;if(n){var r,i,o={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(i=n[r])&&(o[C(i)]={type:null});else if(l(n))for(var a in n)i=n[a],o[C(a)]=l(i)?i:{type:i};t.props=o}}(e),function(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var i=0;i<n.length;i++)r[n[i]]={from:n[i]};else if(l(n))for(var o in n){var a=n[o];r[o]=l(a)?O({from:o},a):{from:a}}}}(e),function(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"==typeof r&&(e[n]={bind:r,update:r})}}(e);var r=e.extends;if(r&&(t=Mt(t,r,n)),e.mixins)for(var i=0,o=e.mixins.length;i<o;i++)t=Mt(t,e.mixins[i],n);var a,s={};for(a in t)u(a);for(a in e)b(t,a)||u(a);function u(r){var i=kt[r]||Lt;s[r]=i(t[r],e[r],n,r)}return s}function Ft(t,e,n,r){if("string"==typeof n){var i=t[e];if(b(i,n))return i[n];var o=C(n);if(b(i,o))return i[o];var a=T(o);return b(i,a)?i[a]:i[n]||i[o]||i[a]}}function Ut(t,e,n,r){var i=e[t],o=!b(n,t),a=n[t],s=Wt(Boolean,i.type);if(s>-1)if(o&&!b(i,"default"))a=!1;else if(""===a||a===I(t)){var u=Wt(String,i.type);(u<0||s<u)&&(a=!0)}if(void 0===a){a=function(t,e,n){if(!b(e,"default"))return;var r=e.default;0;if(t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n])return t._props[n];return"function"==typeof r&&"Function"!==jt(e.type)?r.call(t):r}(r,i,t);var c=wt;Et(!0),It(a),Et(c)}return a}function jt(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function Bt(t,e){return jt(t)===jt(e)}function Wt(t,e){if(!Array.isArray(e))return Bt(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(Bt(e[n],t))return n;return-1}function Vt(t,e,n){if(e)for(var r=e;r=r.$parent;){var i=r.$options.errorCaptured;if(i)for(var o=0;o<i.length;o++)try{if(!1===i[o].call(r,t,e,n))return}catch(t){$t(t,r,"errorCaptured hook")}}$t(t,e,n)}function $t(t,e,n){if(B.errorHandler)try{return B.errorHandler.call(null,t,e,n)}catch(t){qt(t,null,"config.errorHandler")}qt(t,e,n)}function qt(t,e,n){if(!H&&!K||"undefined"==typeof console)throw t;console.error(t)}var Ht,Kt,Gt=[],Qt=!1;function zt(){Qt=!1;var t=Gt.slice(0);Gt.length=0;for(var e=0;e<t.length;e++)t[e]()}var Xt=!1;if(void 0!==n&&it(n))Kt=function(){n(zt)};else if("undefined"==typeof MessageChannel||!it(MessageChannel)&&"[object MessageChannelConstructor]"!==MessageChannel.toString())Kt=function(){setTimeout(zt,0)};else{var Yt=new MessageChannel,Jt=Yt.port2;Yt.port1.onmessage=zt,Kt=function(){Jt.postMessage(1)}}if("undefined"!=typeof Promise&&it(Promise)){var Zt=Promise.resolve();Ht=function(){Zt.then(zt),J&&setTimeout(R)}}else Ht=Kt;function te(t,e){var n;if(Gt.push(function(){if(t)try{t.call(e)}catch(t){Vt(t,e,"nextTick")}else n&&n(e)}),Qt||(Qt=!0,Xt?Kt():Ht()),!t&&"undefined"!=typeof Promise)return new Promise(function(t){n=t})}var ee=new ot;function ne(t){!function t(e,n){var r,i;var o=Array.isArray(e);if(!o&&!u(e)||Object.isFrozen(e)||e instanceof pt)return;if(e.__ob__){var a=e.__ob__.dep.id;if(n.has(a))return;n.add(a)}if(o)for(r=e.length;r--;)t(e[r],n);else for(i=Object.keys(e),r=i.length;r--;)t(e[i[r]],n)}(t,ee),ee.clear()}var re,ie=w(function(t){var e="&"===t.charAt(0),n="~"===(t=e?t.slice(1):t).charAt(0),r="!"===(t=n?t.slice(1):t).charAt(0);return{name:t=r?t.slice(1):t,once:n,capture:r,passive:e}});function oe(t){function e(){var t=arguments,n=e.fns;if(!Array.isArray(n))return n.apply(null,arguments);for(var r=n.slice(),i=0;i<r.length;i++)r[i].apply(null,t)}return e.fns=t,e}function ae(t,e,n,r,o){var a,s,u,c;for(a in t)s=t[a],u=e[a],c=ie(a),i(s)||(i(u)?(i(s.fns)&&(s=t[a]=oe(s)),n(c.name,s,c.once,c.capture,c.passive,c.params)):s!==u&&(u.fns=s,t[a]=u));for(a in e)i(t[a])&&r((c=ie(a)).name,e[a],c.capture)}function se(t,e,n){var r;t instanceof pt&&(t=t.data.hook||(t.data.hook={}));var s=t[e];function u(){n.apply(this,arguments),g(r.fns,u)}i(s)?r=oe([u]):o(s.fns)&&a(s.merged)?(r=s).fns.push(u):r=oe([s,u]),r.merged=!0,t[e]=r}function ue(t,e,n,r,i){if(o(e)){if(b(e,n))return t[n]=e[n],i||delete e[n],!0;if(b(e,r))return t[n]=e[r],i||delete e[r],!0}return!1}function ce(t){return s(t)?[yt(t)]:Array.isArray(t)?function t(e,n){var r=[];var u,c,l,h;for(u=0;u<e.length;u++)i(c=e[u])||"boolean"==typeof c||(l=r.length-1,h=r[l],Array.isArray(c)?c.length>0&&(le((c=t(c,(n||"")+"_"+u))[0])&&le(h)&&(r[l]=yt(h.text+c[0].text),c.shift()),r.push.apply(r,c)):s(c)?le(h)?r[l]=yt(h.text+c):""!==c&&r.push(yt(c)):le(c)&&le(h)?r[l]=yt(h.text+c.text):(a(e._isVList)&&o(c.tag)&&i(c.key)&&o(n)&&(c.key="__vlist"+n+"_"+u+"__"),r.push(c)));return r}(t):void 0}function le(t){return o(t)&&o(t.text)&&!1===t.isComment}function he(t,e){return(t.__esModule||at&&"Module"===t[Symbol.toStringTag])&&(t=t.default),u(t)?e.extend(t):t}function fe(t){return t.isComment&&t.asyncFactory}function pe(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(o(n)&&(o(n.componentOptions)||fe(n)))return n}}function de(t,e,n){n?re.$once(t,e):re.$on(t,e)}function ve(t,e){re.$off(t,e)}function ye(t,e,n){re=t,ae(e,n||{},de,ve),re=void 0}function _e(t,e){var n={};if(!t)return n;for(var r=0,i=t.length;r<i;r++){var o=t[r],a=o.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,o.context!==e&&o.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(o);else{var s=a.slot,u=n[s]||(n[s]=[]);"template"===o.tag?u.push.apply(u,o.children||[]):u.push(o)}}for(var c in n)n[c].every(ge)&&delete n[c];return n}function ge(t){return t.isComment&&!t.asyncFactory||" "===t.text}function me(t,e){e=e||{};for(var n=0;n<t.length;n++)Array.isArray(t[n])?me(t[n],e):e[t[n].key]=t[n].fn;return e}var be=null;function we(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function Ee(t,e){if(e){if(t._directInactive=!1,we(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)Ee(t.$children[n]);Ce(t,"activated")}}function Ce(t,e){ht();var n=t.$options[e];if(n)for(var r=0,i=n.length;r<i;r++)try{n[r].call(t)}catch(n){Vt(n,t,e+" hook")}t._hasHookEvent&&t.$emit("hook:"+e),ft()}var Te=[],Se=[],Ie={},Ne=!1,Ae=!1,Oe=0;function ke(){var t,e;for(Ae=!0,Te.sort(function(t,e){return t.id-e.id}),Oe=0;Oe<Te.length;Oe++)e=(t=Te[Oe]).id,Ie[e]=null,t.run();var n=Se.slice(),r=Te.slice();Oe=Te.length=Se.length=0,Ie={},Ne=Ae=!1,function(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,Ee(t[e],!0)}(n),function(t){var e=t.length;for(;e--;){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&Ce(r,"updated")}}(r),rt&&B.devtools&&rt.emit("flush")}var Re=0,Pe=function(t,e,n,r,i){this.vm=t,i&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++Re,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ot,this.newDepIds=new ot,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(t){if(!V.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}(e),this.getter||(this.getter=function(){})),this.value=this.lazy?void 0:this.get()};Pe.prototype.get=function(){var t;ht(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;Vt(t,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ne(t),ft(),this.cleanupDeps()}return t},Pe.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},Pe.prototype.cleanupDeps=function(){for(var t=this.deps.length;t--;){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},Pe.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(t){var e=t.id;if(null==Ie[e]){if(Ie[e]=!0,Ae){for(var n=Te.length-1;n>Oe&&Te[n].id>t.id;)n--;Te.splice(n+1,0,t)}else Te.push(t);Ne||(Ne=!0,te(ke))}}(this)},Pe.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||u(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(t){Vt(t,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},Pe.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Pe.prototype.depend=function(){for(var t=this.deps.length;t--;)this.deps[t].depend()},Pe.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||g(this.vm._watchers,this);for(var t=this.deps.length;t--;)this.deps[t].removeSub(this);this.active=!1}};var De={enumerable:!0,configurable:!0,get:R,set:R};function xe(t,e,n){De.get=function(){return this[e][n]},De.set=function(t){this[e][n]=t},Object.defineProperty(t,n,De)}function Le(t){t._watchers=[];var e=t.$options;e.props&&function(t,e){var n=t.$options.propsData||{},r=t._props={},i=t.$options._propKeys=[];t.$parent&&Et(!1);var o=function(o){i.push(o);var a=Ut(o,e,n,t);Nt(r,o,a),o in t||xe(t,"_props",o)};for(var a in e)o(a);Et(!0)}(t,e.props),e.methods&&function(t,e){t.$options.props;for(var n in e)t[n]=null==e[n]?R:N(e[n],t)}(t,e.methods),e.data?function(t){var e=t.$options.data;l(e=t._data="function"==typeof e?function(t,e){ht();try{return t.call(e,e)}catch(t){return Vt(t,e,"data()"),{}}finally{ft()}}(e,t):e||{})||(e={});var n=Object.keys(e),r=t.$options.props,i=(t.$options.methods,n.length);for(;i--;){var o=n[i];0,r&&b(r,o)||(void 0,36!==(a=(o+"").charCodeAt(0))&&95!==a&&xe(t,"_data",o))}var a;It(e,!0)}(t):It(t._data={},!0),e.computed&&function(t,e){var n=t._computedWatchers=Object.create(null),r=nt();for(var i in e){var o=e[i],a="function"==typeof o?o:o.get;0,r||(n[i]=new Pe(t,a||R,R,Me)),i in t||Fe(t,i,o)}}(t,e.computed),e.watch&&e.watch!==Z&&function(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var i=0;i<r.length;i++)je(t,n,r[i]);else je(t,n,r)}}(t,e.watch)}var Me={lazy:!0};function Fe(t,e,n){var r=!nt();"function"==typeof n?(De.get=r?Ue(e):n,De.set=R):(De.get=n.get?r&&!1!==n.cache?Ue(e):n.get:R,De.set=n.set?n.set:R),Object.defineProperty(t,e,De)}function Ue(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),ct.target&&e.depend(),e.value}}function je(t,e,n,r){return l(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,r)}function Be(t,e){if(t){for(var n=Object.create(null),r=at?Reflect.ownKeys(t).filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}):Object.keys(t),i=0;i<r.length;i++){for(var o=r[i],a=t[o].from,s=e;s;){if(s._provided&&b(s._provided,a)){n[o]=s._provided[a];break}s=s.$parent}if(!s)if("default"in t[o]){var u=t[o].default;n[o]="function"==typeof u?u.call(e):u}else 0}return n}}function We(t,e){var n,r,i,a,s;if(Array.isArray(t)||"string"==typeof t)for(n=new Array(t.length),r=0,i=t.length;r<i;r++)n[r]=e(t[r],r);else if("number"==typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r);else if(u(t))for(a=Object.keys(t),n=new Array(a.length),r=0,i=a.length;r<i;r++)s=a[r],n[r]=e(t[s],s,r);return o(n)&&(n._isVList=!0),n}function Ve(t,e,n,r){var i,o=this.$scopedSlots[t];if(o)n=n||{},r&&(n=O(O({},r),n)),i=o(n)||e;else{var a=this.$slots[t];a&&(a._rendered=!0),i=a||e}var s=n&&n.slot;return s?this.$createElement("template",{slot:s},i):i}function $e(t){return Ft(this.$options,"filters",t)||D}function qe(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function He(t,e,n,r,i){var o=B.keyCodes[e]||n;return i&&r&&!B.keyCodes[e]?qe(i,r):o?qe(o,t):r?I(r)!==e:void 0}function Ke(t,e,n,r,i){if(n)if(u(n)){var o;Array.isArray(n)&&(n=k(n));var a=function(a){if("class"===a||"style"===a||_(a))o=t;else{var s=t.attrs&&t.attrs.type;o=r||B.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}a in o||(o[a]=n[a],i&&((t.on||(t.on={}))["update:"+a]=function(t){n[a]=t}))};for(var s in n)a(s)}else;return t}function Ge(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e?r:(ze(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),"__static__"+t,!1),r)}function Qe(t,e,n){return ze(t,"__once__"+e+(n?"_"+n:""),!0),t}function ze(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!=typeof t[r]&&Xe(t[r],e+"_"+r,n);else Xe(t,e,n)}function Xe(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function Ye(t,e){if(e)if(l(e)){var n=t.on=t.on?O({},t.on):{};for(var r in e){var i=n[r],o=e[r];n[r]=i?[].concat(i,o):o}}else;return t}function Je(t){t._o=Qe,t._n=d,t._s=p,t._l=We,t._t=Ve,t._q=x,t._i=L,t._m=Ge,t._f=$e,t._k=He,t._b=Ke,t._v=yt,t._e=vt,t._u=me,t._g=Ye}function Ze(t,e,n,i,o){var s,u=o.options;b(i,"_uid")?(s=Object.create(i))._original=i:(s=i,i=i._original);var c=a(u._compiled),l=!c;this.data=t,this.props=e,this.children=n,this.parent=i,this.listeners=t.on||r,this.injections=Be(u.inject,i),this.slots=function(){return _e(n,i)},c&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=t.scopedSlots||r),u._scopeId?this._c=function(t,e,n,r){var o=un(s,t,e,n,r,l);return o&&!Array.isArray(o)&&(o.fnScopeId=u._scopeId,o.fnContext=i),o}:this._c=function(t,e,n,r){return un(s,t,e,n,r,l)}}function tn(t,e,n,r){var i=_t(t);return i.fnContext=n,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function en(t,e){for(var n in e)t[C(n)]=e[n]}Je(Ze.prototype);var nn={init:function(t,e,n,r){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var i=t;nn.prepatch(i,i)}else{(t.componentInstance=function(t,e,n,r){var i={_isComponent:!0,parent:e,_parentVnode:t,_parentElm:n||null,_refElm:r||null},a=t.data.inlineTemplate;o(a)&&(i.render=a.render,i.staticRenderFns=a.staticRenderFns);return new t.componentOptions.Ctor(i)}(t,be,n,r)).$mount(e?t.elm:void 0,e)}},prepatch:function(t,e){var n=e.componentOptions;!function(t,e,n,i,o){var a=!!(o||t.$options._renderChildren||i.data.scopedSlots||t.$scopedSlots!==r);if(t.$options._parentVnode=i,t.$vnode=i,t._vnode&&(t._vnode.parent=i),t.$options._renderChildren=o,t.$attrs=i.data.attrs||r,t.$listeners=n||r,e&&t.$options.props){Et(!1);for(var s=t._props,u=t.$options._propKeys||[],c=0;c<u.length;c++){var l=u[c],h=t.$options.props;s[l]=Ut(l,h,e,t)}Et(!0),t.$options.propsData=e}n=n||r;var f=t.$options._parentListeners;t.$options._parentListeners=n,ye(t,n,f),a&&(t.$slots=_e(o,i.context),t.$forceUpdate())}(e.componentInstance=t.componentInstance,n.propsData,n.listeners,e,n.children)},insert:function(t){var e,n=t.context,r=t.componentInstance;r._isMounted||(r._isMounted=!0,Ce(r,"mounted")),t.data.keepAlive&&(n._isMounted?((e=r)._inactive=!1,Se.push(e)):Ee(r,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?function t(e,n){if(!(n&&(e._directInactive=!0,we(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)t(e.$children[r]);Ce(e,"deactivated")}}(e,!0):e.$destroy())}},rn=Object.keys(nn);function on(t,e,n,s,c){if(!i(t)){var l=n.$options._base;if(u(t)&&(t=l.extend(t)),"function"==typeof t){var h;if(i(t.cid)&&void 0===(t=function(t,e,n){if(a(t.error)&&o(t.errorComp))return t.errorComp;if(o(t.resolved))return t.resolved;if(a(t.loading)&&o(t.loadingComp))return t.loadingComp;if(!o(t.contexts)){var r=t.contexts=[n],s=!0,c=function(){for(var t=0,e=r.length;t<e;t++)r[t].$forceUpdate()},l=M(function(n){t.resolved=he(n,e),s||c()}),h=M(function(e){o(t.errorComp)&&(t.error=!0,c())}),f=t(l,h);return u(f)&&("function"==typeof f.then?i(t.resolved)&&f.then(l,h):o(f.component)&&"function"==typeof f.component.then&&(f.component.then(l,h),o(f.error)&&(t.errorComp=he(f.error,e)),o(f.loading)&&(t.loadingComp=he(f.loading,e),0===f.delay?t.loading=!0:setTimeout(function(){i(t.resolved)&&i(t.error)&&(t.loading=!0,c())},f.delay||200)),o(f.timeout)&&setTimeout(function(){i(t.resolved)&&h(null)},f.timeout))),s=!1,t.loading?t.loadingComp:t.resolved}t.contexts.push(n)}(h=t,l,n)))return function(t,e,n,r,i){var o=vt();return o.asyncFactory=t,o.asyncMeta={data:e,context:n,children:r,tag:i},o}(h,e,n,s,c);e=e||{},ln(t),o(e.model)&&function(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.props||(e.props={}))[n]=e.model.value;var i=e.on||(e.on={});o(i[r])?i[r]=[e.model.callback].concat(i[r]):i[r]=e.model.callback}(t.options,e);var f=function(t,e,n){var r=e.options.props;if(!i(r)){var a={},s=t.attrs,u=t.props;if(o(s)||o(u))for(var c in r){var l=I(c);ue(a,u,c,l,!0)||ue(a,s,c,l,!1)}return a}}(e,t);if(a(t.options.functional))return function(t,e,n,i,a){var s=t.options,u={},c=s.props;if(o(c))for(var l in c)u[l]=Ut(l,c,e||r);else o(n.attrs)&&en(u,n.attrs),o(n.props)&&en(u,n.props);var h=new Ze(n,u,a,i,t),f=s.render.call(null,h._c,h);if(f instanceof pt)return tn(f,n,h.parent,s);if(Array.isArray(f)){for(var p=ce(f)||[],d=new Array(p.length),v=0;v<p.length;v++)d[v]=tn(p[v],n,h.parent,s);return d}}(t,f,e,n,s);var p=e.on;if(e.on=e.nativeOn,a(t.options.abstract)){var d=e.slot;e={},d&&(e.slot=d)}!function(t){for(var e=t.hook||(t.hook={}),n=0;n<rn.length;n++){var r=rn[n];e[r]=nn[r]}}(e);var v=t.options.name||c;return new pt("vue-component-"+t.cid+(v?"-"+v:""),e,void 0,void 0,void 0,n,{Ctor:t,propsData:f,listeners:p,tag:c,children:s},h)}}}var an=1,sn=2;function un(t,e,n,r,c,l){return(Array.isArray(n)||s(n))&&(c=r,r=n,n=void 0),a(l)&&(c=sn),function(t,e,n,r,s){if(o(n)&&o(n.__ob__))return vt();o(n)&&o(n.is)&&(e=n.is);if(!e)return vt();0;Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0);s===sn?r=ce(r):s===an&&(r=function(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}(r));var c,l;if("string"==typeof e){var h;l=t.$vnode&&t.$vnode.ns||B.getTagNamespace(e),c=B.isReservedTag(e)?new pt(B.parsePlatformTagName(e),n,r,void 0,void 0,t):o(h=Ft(t.$options,"components",e))?on(h,n,t,r,e):new pt(e,n,r,void 0,void 0,t)}else c=on(e,n,t,r);return Array.isArray(c)?c:o(c)?(o(l)&&function t(e,n,r){e.ns=n;"foreignObject"===e.tag&&(n=void 0,r=!0);if(o(e.children))for(var s=0,u=e.children.length;s<u;s++){var c=e.children[s];o(c.tag)&&(i(c.ns)||a(r)&&"svg"!==c.tag)&&t(c,n,r)}}(c,l),o(n)&&function(t){u(t.style)&&ne(t.style);u(t.class)&&ne(t.class)}(n),c):vt()}(t,e,n,r,c)}var cn=0;function ln(t){var e=t.options;if(t.super){var n=ln(t.super);if(n!==t.superOptions){t.superOptions=n;var r=function(t){var e,n=t.options,r=t.extendOptions,i=t.sealedOptions;for(var o in n)n[o]!==i[o]&&(e||(e={}),e[o]=hn(n[o],r[o],i[o]));return e}(t);r&&O(t.extendOptions,r),(e=t.options=Mt(n,t.extendOptions)).name&&(e.components[e.name]=t)}}return e}function hn(t,e,n){if(Array.isArray(t)){var r=[];n=Array.isArray(n)?n:[n],e=Array.isArray(e)?e:[e];for(var i=0;i<t.length;i++)(e.indexOf(t[i])>=0||n.indexOf(t[i])<0)&&r.push(t[i]);return r}return t}function fn(t){this._init(t)}function pn(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,i=t._Ctor||(t._Ctor={});if(i[r])return i[r];var o=t.name||n.options.name;var a=function(t){this._init(t)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=e++,a.options=Mt(n.options,t),a.super=n,a.options.props&&function(t){var e=t.options.props;for(var n in e)xe(t.prototype,"_props",n)}(a),a.options.computed&&function(t){var e=t.options.computed;for(var n in e)Fe(t.prototype,n,e[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,U.forEach(function(t){a[t]=n[t]}),o&&(a.options.components[o]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=O({},a.options),i[r]=a,a}}function dn(t){return t&&(t.Ctor.options.name||t.tag)}function vn(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:!!h(t)&&t.test(e)}function yn(t,e){var n=t.cache,r=t.keys,i=t._vnode;for(var o in n){var a=n[o];if(a){var s=dn(a.componentOptions);s&&!e(s)&&_n(n,o,r,i)}}}function _n(t,e,n,r){var i=t[e];!i||r&&i.tag===r.tag||i.componentInstance.$destroy(),t[e]=null,g(n,e)}!function(t){t.prototype._init=function(t){var e=this;e._uid=cn++,e._isVue=!0,t&&t._isComponent?function(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r,n._parentElm=e._parentElm,n._refElm=e._refElm;var i=r.componentOptions;n.propsData=i.propsData,n._parentListeners=i.listeners,n._renderChildren=i.children,n._componentTag=i.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}(e,t):e.$options=Mt(ln(e.constructor),t||{},e),e._renderProxy=e,e._self=e,function(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}(e),function(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&ye(t,e)}(e),function(t){t._vnode=null,t._staticTrees=null;var e=t.$options,n=t.$vnode=e._parentVnode,i=n&&n.context;t.$slots=_e(e._renderChildren,i),t.$scopedSlots=r,t._c=function(e,n,r,i){return un(t,e,n,r,i,!1)},t.$createElement=function(e,n,r,i){return un(t,e,n,r,i,!0)};var o=n&&n.data;Nt(t,"$attrs",o&&o.attrs||r,null,!0),Nt(t,"$listeners",e._parentListeners||r,null,!0)}(e),Ce(e,"beforeCreate"),function(t){var e=Be(t.$options.inject,t);e&&(Et(!1),Object.keys(e).forEach(function(n){Nt(t,n,e[n])}),Et(!0))}(e),Le(e),function(t){var e=t.$options.provide;e&&(t._provided="function"==typeof e?e.call(t):e)}(e),Ce(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(fn),function(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=At,t.prototype.$delete=Ot,t.prototype.$watch=function(t,e,n){if(l(e))return je(this,t,e,n);(n=n||{}).user=!0;var r=new Pe(this,t,e,n);return n.immediate&&e.call(this,r.value),function(){r.teardown()}}}(fn),function(t){var e=/^hook:/;t.prototype.$on=function(t,n){if(Array.isArray(t))for(var r=0,i=t.length;r<i;r++)this.$on(t[r],n);else(this._events[t]||(this._events[t]=[])).push(n),e.test(t)&&(this._hasHookEvent=!0);return this},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,i=t.length;r<i;r++)this.$off(t[r],e);return n}var o=n._events[t];if(!o)return n;if(!e)return n._events[t]=null,n;if(e)for(var a,s=o.length;s--;)if((a=o[s])===e||a.fn===e){o.splice(s,1);break}return n},t.prototype.$emit=function(t){var e=this._events[t];if(e){e=e.length>1?A(e):e;for(var n=A(arguments,1),r=0,i=e.length;r<i;r++)try{e[r].apply(this,n)}catch(e){Vt(e,this,'event handler for "'+t+'"')}}return this}}(fn),function(t){t.prototype._update=function(t,e){var n=this;n._isMounted&&Ce(n,"beforeUpdate");var r=n.$el,i=n._vnode,o=be;be=n,n._vnode=t,i?n.$el=n.__patch__(i,t):(n.$el=n.__patch__(n.$el,t,e,!1,n.$options._parentElm,n.$options._refElm),n.$options._parentElm=n.$options._refElm=null),be=o,r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){Ce(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||g(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),Ce(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}(fn),function(t){Je(t.prototype),t.prototype.$nextTick=function(t){return te(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,i=n.render,o=n._parentVnode;o&&(e.$scopedSlots=o.data.scopedSlots||r),e.$vnode=o;try{t=i.call(e._renderProxy,e.$createElement)}catch(n){Vt(n,e,"render"),t=e._vnode}return t instanceof pt||(t=vt()),t.parent=o,t}}(fn);var gn=[String,RegExp,Array],mn={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:gn,exclude:gn,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)_n(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",function(e){yn(t,function(t){return vn(e,t)})}),this.$watch("exclude",function(e){yn(t,function(t){return!vn(e,t)})})},render:function(){var t=this.$slots.default,e=pe(t),n=e&&e.componentOptions;if(n){var r=dn(n),i=this.include,o=this.exclude;if(i&&(!r||!vn(i,r))||o&&r&&vn(o,r))return e;var a=this.cache,s=this.keys,u=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;a[u]?(e.componentInstance=a[u].componentInstance,g(s,u),s.push(u)):(a[u]=e,s.push(u),this.max&&s.length>parseInt(this.max)&&_n(a,s[0],s,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}}};!function(t){var e={get:function(){return B}};Object.defineProperty(t,"config",e),t.util={warn:st,extend:O,mergeOptions:Mt,defineReactive:Nt},t.set=At,t.delete=Ot,t.nextTick=te,t.options=Object.create(null),U.forEach(function(e){t.options[e+"s"]=Object.create(null)}),t.options._base=t,O(t.options.components,mn),function(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=A(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):"function"==typeof t&&t.apply(null,n),e.push(t),this}}(t),function(t){t.mixin=function(t){return this.options=Mt(this.options,t),this}}(t),pn(t),function(t){U.forEach(function(e){t[e]=function(t,n){return n?("component"===e&&l(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"==typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}})}(t)}(fn),Object.defineProperty(fn.prototype,"$isServer",{get:nt}),Object.defineProperty(fn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(fn,"FunctionalRenderContext",{value:Ze}),fn.version="2.5.16";var bn=v("style,class"),wn=v("input,textarea,option,select,progress"),En=function(t,e,n){return"value"===n&&wn(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},Cn=v("contenteditable,draggable,spellcheck"),Tn=v("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Sn="http://www.w3.org/1999/xlink",In=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},Nn=function(t){return In(t)?t.slice(6,t.length):""},An=function(t){return null==t||!1===t};function On(t){for(var e=t.data,n=t,r=t;o(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=kn(r.data,e));for(;o(n=n.parent);)n&&n.data&&(e=kn(e,n.data));return function(t,e){if(o(t)||o(e))return Rn(t,Pn(e));return""}(e.staticClass,e.class)}function kn(t,e){return{staticClass:Rn(t.staticClass,e.staticClass),class:o(t.class)?[t.class,e.class]:e.class}}function Rn(t,e){return t?e?t+" "+e:t:e||""}function Pn(t){return Array.isArray(t)?function(t){for(var e,n="",r=0,i=t.length;r<i;r++)o(e=Pn(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}(t):u(t)?function(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}(t):"string"==typeof t?t:""}var Dn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},xn=v("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Ln=v("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Mn=function(t){return xn(t)||Ln(t)};function Fn(t){return Ln(t)?"svg":"math"===t?"math":void 0}var Un=Object.create(null);var jn=v("text,number,password,search,email,tel,url");function Bn(t){if("string"==typeof t){var e=document.querySelector(t);return e||document.createElement("div")}return t}var Wn=Object.freeze({createElement:function(t,e){var n=document.createElement(t);return"select"!==t?n:(e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)},createElementNS:function(t,e){return document.createElementNS(Dn[t],e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,n){t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},setStyleScope:function(t,e){t.setAttribute(e,"")}}),Vn={create:function(t,e){$n(e)},update:function(t,e){t.data.ref!==e.data.ref&&($n(t,!0),$n(e))},destroy:function(t){$n(t,!0)}};function $n(t,e){var n=t.data.ref;if(o(n)){var r=t.context,i=t.componentInstance||t.elm,a=r.$refs;e?Array.isArray(a[n])?g(a[n],i):a[n]===i&&(a[n]=void 0):t.data.refInFor?Array.isArray(a[n])?a[n].indexOf(i)<0&&a[n].push(i):a[n]=[i]:a[n]=i}}var qn=new pt("",{},[]),Hn=["create","activate","update","remove","destroy"];function Kn(t,e){return t.key===e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&o(t.data)===o(e.data)&&function(t,e){if("input"!==t.tag)return!0;var n,r=o(n=t.data)&&o(n=n.attrs)&&n.type,i=o(n=e.data)&&o(n=n.attrs)&&n.type;return r===i||jn(r)&&jn(i)}(t,e)||a(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&i(e.asyncFactory.error))}function Gn(t,e,n){var r,i,a={};for(r=e;r<=n;++r)o(i=t[r].key)&&(a[i]=r);return a}var Qn={create:zn,update:zn,destroy:function(t){zn(t,qn)}};function zn(t,e){(t.data.directives||e.data.directives)&&function(t,e){var n,r,i,o=t===qn,a=e===qn,s=Yn(t.data.directives,t.context),u=Yn(e.data.directives,e.context),c=[],l=[];for(n in u)r=s[n],i=u[n],r?(i.oldValue=r.value,Zn(i,"update",e,t),i.def&&i.def.componentUpdated&&l.push(i)):(Zn(i,"bind",e,t),i.def&&i.def.inserted&&c.push(i));if(c.length){var h=function(){for(var n=0;n<c.length;n++)Zn(c[n],"inserted",e,t)};o?se(e,"insert",h):h()}l.length&&se(e,"postpatch",function(){for(var n=0;n<l.length;n++)Zn(l[n],"componentUpdated",e,t)});if(!o)for(n in s)u[n]||Zn(s[n],"unbind",t,t,a)}(t,e)}var Xn=Object.create(null);function Yn(t,e){var n,r,i=Object.create(null);if(!t)return i;for(n=0;n<t.length;n++)(r=t[n]).modifiers||(r.modifiers=Xn),i[Jn(r)]=r,r.def=Ft(e.$options,"directives",r.name);return i}function Jn(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function Zn(t,e,n,r,i){var o=t.def&&t.def[e];if(o)try{o(n.elm,t,n,r,i)}catch(r){Vt(r,n.context,"directive "+t.name+" "+e+" hook")}}var tr=[Vn,Qn];function er(t,e){var n=e.componentOptions;if(!(o(n)&&!1===n.Ctor.options.inheritAttrs||i(t.data.attrs)&&i(e.data.attrs))){var r,a,s=e.elm,u=t.data.attrs||{},c=e.data.attrs||{};for(r in o(c.__ob__)&&(c=e.data.attrs=O({},c)),c)a=c[r],u[r]!==a&&nr(s,r,a);for(r in(z||Y)&&c.value!==u.value&&nr(s,"value",c.value),u)i(c[r])&&(In(r)?s.removeAttributeNS(Sn,Nn(r)):Cn(r)||s.removeAttribute(r))}}function nr(t,e,n){t.tagName.indexOf("-")>-1?rr(t,e,n):Tn(e)?An(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):Cn(e)?t.setAttribute(e,An(n)||"false"===n?"false":"true"):In(e)?An(n)?t.removeAttributeNS(Sn,Nn(e)):t.setAttributeNS(Sn,e,n):rr(t,e,n)}function rr(t,e,n){if(An(n))t.removeAttribute(e);else{if(z&&!X&&"TEXTAREA"===t.tagName&&"placeholder"===e&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener("input",r)};t.addEventListener("input",r),t.__ieph=!0}t.setAttribute(e,n)}}var ir={create:er,update:er};function or(t,e){var n=e.elm,r=e.data,a=t.data;if(!(i(r.staticClass)&&i(r.class)&&(i(a)||i(a.staticClass)&&i(a.class)))){var s=On(e),u=n._transitionClasses;o(u)&&(s=Rn(s,Pn(u))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var ar,sr,ur,cr,lr,hr,fr={create:or,update:or},pr=/[\w).+\-_$\]]/;function dr(t){var e,n,r,i,o,a=!1,s=!1,u=!1,c=!1,l=0,h=0,f=0,p=0;for(r=0;r<t.length;r++)if(n=e,e=t.charCodeAt(r),a)39===e&&92!==n&&(a=!1);else if(s)34===e&&92!==n&&(s=!1);else if(u)96===e&&92!==n&&(u=!1);else if(c)47===e&&92!==n&&(c=!1);else if(124!==e||124===t.charCodeAt(r+1)||124===t.charCodeAt(r-1)||l||h||f){switch(e){case 34:s=!0;break;case 39:a=!0;break;case 96:u=!0;break;case 40:f++;break;case 41:f--;break;case 91:h++;break;case 93:h--;break;case 123:l++;break;case 125:l--}if(47===e){for(var d=r-1,v=void 0;d>=0&&" "===(v=t.charAt(d));d--);v&&pr.test(v)||(c=!0)}}else void 0===i?(p=r+1,i=t.slice(0,r).trim()):y();function y(){(o||(o=[])).push(t.slice(p,r).trim()),p=r+1}if(void 0===i?i=t.slice(0,r).trim():0!==p&&y(),o)for(r=0;r<o.length;r++)i=vr(i,o[r]);return i}function vr(t,e){var n=e.indexOf("(");if(n<0)return'_f("'+e+'")('+t+")";var r=e.slice(0,n),i=e.slice(n+1);return'_f("'+r+'")('+t+(")"!==i?","+i:i)}function yr(t){console.error("[Vue compiler]: "+t)}function _r(t,e){return t?t.map(function(t){return t[e]}).filter(function(t){return t}):[]}function gr(t,e,n){(t.props||(t.props=[])).push({name:e,value:n}),t.plain=!1}function mr(t,e,n){(t.attrs||(t.attrs=[])).push({name:e,value:n}),t.plain=!1}function br(t,e,n){t.attrsMap[e]=n,t.attrsList.push({name:e,value:n})}function wr(t,e,n,r,i,o){(t.directives||(t.directives=[])).push({name:e,rawName:n,value:r,arg:i,modifiers:o}),t.plain=!1}function Er(t,e,n,i,o,a){var s;(i=i||r).capture&&(delete i.capture,e="!"+e),i.once&&(delete i.once,e="~"+e),i.passive&&(delete i.passive,e="&"+e),"click"===e&&(i.right?(e="contextmenu",delete i.right):i.middle&&(e="mouseup")),i.native?(delete i.native,s=t.nativeEvents||(t.nativeEvents={})):s=t.events||(t.events={});var u={value:n.trim()};i!==r&&(u.modifiers=i);var c=s[e];Array.isArray(c)?o?c.unshift(u):c.push(u):s[e]=c?o?[u,c]:[c,u]:u,t.plain=!1}function Cr(t,e,n){var r=Tr(t,":"+e)||Tr(t,"v-bind:"+e);if(null!=r)return dr(r);if(!1!==n){var i=Tr(t,e);if(null!=i)return JSON.stringify(i)}}function Tr(t,e,n){var r;if(null!=(r=t.attrsMap[e]))for(var i=t.attrsList,o=0,a=i.length;o<a;o++)if(i[o].name===e){i.splice(o,1);break}return n&&delete t.attrsMap[e],r}function Sr(t,e,n){var r=n||{},i=r.number,o="$$v";r.trim&&(o="(typeof $$v === 'string'? $$v.trim(): $$v)"),i&&(o="_n("+o+")");var a=Ir(e,o);t.model={value:"("+e+")",expression:'"'+e+'"',callback:"function ($$v) {"+a+"}"}}function Ir(t,e){var n=function(t){if(t=t.trim(),ar=t.length,t.indexOf("[")<0||t.lastIndexOf("]")<ar-1)return(cr=t.lastIndexOf("."))>-1?{exp:t.slice(0,cr),key:'"'+t.slice(cr+1)+'"'}:{exp:t,key:null};sr=t,cr=lr=hr=0;for(;!Ar();)Or(ur=Nr())?Rr(ur):91===ur&&kr(ur);return{exp:t.slice(0,lr),key:t.slice(lr+1,hr)}}(t);return null===n.key?t+"="+e:"$set("+n.exp+", "+n.key+", "+e+")"}function Nr(){return sr.charCodeAt(++cr)}function Ar(){return cr>=ar}function Or(t){return 34===t||39===t}function kr(t){var e=1;for(lr=cr;!Ar();)if(Or(t=Nr()))Rr(t);else if(91===t&&e++,93===t&&e--,0===e){hr=cr;break}}function Rr(t){for(var e=t;!Ar()&&(t=Nr())!==e;);}var Pr,Dr="__r",xr="__c";function Lr(t,e,n,r,i){var o;e=(o=e)._withTask||(o._withTask=function(){Xt=!0;var t=o.apply(null,arguments);return Xt=!1,t}),n&&(e=function(t,e,n){var r=Pr;return function i(){null!==t.apply(null,arguments)&&Mr(e,i,n,r)}}(e,t,r)),Pr.addEventListener(t,e,tt?{capture:r,passive:i}:r)}function Mr(t,e,n,r){(r||Pr).removeEventListener(t,e._withTask||e,n)}function Fr(t,e){if(!i(t.data.on)||!i(e.data.on)){var n=e.data.on||{},r=t.data.on||{};Pr=e.elm,function(t){if(o(t[Dr])){var e=z?"change":"input";t[e]=[].concat(t[Dr],t[e]||[]),delete t[Dr]}o(t[xr])&&(t.change=[].concat(t[xr],t.change||[]),delete t[xr])}(n),ae(n,r,Lr,Mr,e.context),Pr=void 0}}var Ur={create:Fr,update:Fr};function jr(t,e){if(!i(t.data.domProps)||!i(e.data.domProps)){var n,r,a=e.elm,s=t.data.domProps||{},u=e.data.domProps||{};for(n in o(u.__ob__)&&(u=e.data.domProps=O({},u)),s)i(u[n])&&(a[n]="");for(n in u){if(r=u[n],"textContent"===n||"innerHTML"===n){if(e.children&&(e.children.length=0),r===s[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===n){a._value=r;var c=i(r)?"":String(r);Br(a,c)&&(a.value=c)}else a[n]=r}}}function Br(t,e){return!t.composing&&("OPTION"===t.tagName||function(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}(t,e)||function(t,e){var n=t.value,r=t._vModifiers;if(o(r)){if(r.lazy)return!1;if(r.number)return d(n)!==d(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}(t,e))}var Wr={create:jr,update:jr},Vr=w(function(t){var e={},n=/:(.+)/;return t.split(/;(?![^(]*\))/g).forEach(function(t){if(t){var r=t.split(n);r.length>1&&(e[r[0].trim()]=r[1].trim())}}),e});function $r(t){var e=qr(t.style);return t.staticStyle?O(t.staticStyle,e):e}function qr(t){return Array.isArray(t)?k(t):"string"==typeof t?Vr(t):t}var Hr,Kr=/^--/,Gr=/\s*!important$/,Qr=function(t,e,n){if(Kr.test(e))t.style.setProperty(e,n);else if(Gr.test(n))t.style.setProperty(e,n.replace(Gr,""),"important");else{var r=Xr(e);if(Array.isArray(n))for(var i=0,o=n.length;i<o;i++)t.style[r]=n[i];else t.style[r]=n}},zr=["Webkit","Moz","ms"],Xr=w(function(t){if(Hr=Hr||document.createElement("div").style,"filter"!==(t=C(t))&&t in Hr)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<zr.length;n++){var r=zr[n]+e;if(r in Hr)return r}});function Yr(t,e){var n=e.data,r=t.data;if(!(i(n.staticStyle)&&i(n.style)&&i(r.staticStyle)&&i(r.style))){var a,s,u=e.elm,c=r.staticStyle,l=r.normalizedStyle||r.style||{},h=c||l,f=qr(e.data.style)||{};e.data.normalizedStyle=o(f.__ob__)?O({},f):f;var p=function(t,e){var n,r={};if(e)for(var i=t;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(n=$r(i.data))&&O(r,n);(n=$r(t.data))&&O(r,n);for(var o=t;o=o.parent;)o.data&&(n=$r(o.data))&&O(r,n);return r}(e,!0);for(s in h)i(p[s])&&Qr(u,s,"");for(s in p)(a=p[s])!==h[s]&&Qr(u,s,null==a?"":a)}}var Jr={create:Yr,update:Yr};function Zr(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(/\s+/).forEach(function(e){return t.classList.add(e)}):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function ti(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(/\s+/).forEach(function(e){return t.classList.remove(e)}):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",r=" "+e+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function ei(t){if(t){if("object"==typeof t){var e={};return!1!==t.css&&O(e,ni(t.name||"v")),O(e,t),e}return"string"==typeof t?ni(t):void 0}}var ni=w(function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}}),ri=H&&!X,ii="transition",oi="animation",ai="transition",si="transitionend",ui="animation",ci="animationend";ri&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(ai="WebkitTransition",si="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(ui="WebkitAnimation",ci="webkitAnimationEnd"));var li=H?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function hi(t){li(function(){li(t)})}function fi(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),Zr(t,e))}function pi(t,e){t._transitionClasses&&g(t._transitionClasses,e),ti(t,e)}function di(t,e,n){var r=yi(t,e),i=r.type,o=r.timeout,a=r.propCount;if(!i)return n();var s=i===ii?si:ci,u=0,c=function(){t.removeEventListener(s,l),n()},l=function(e){e.target===t&&++u>=a&&c()};setTimeout(function(){u<a&&c()},o+1),t.addEventListener(s,l)}var vi=/\b(transform|all)(,|$)/;function yi(t,e){var n,r=window.getComputedStyle(t),i=r[ai+"Delay"].split(", "),o=r[ai+"Duration"].split(", "),a=_i(i,o),s=r[ui+"Delay"].split(", "),u=r[ui+"Duration"].split(", "),c=_i(s,u),l=0,h=0;return e===ii?a>0&&(n=ii,l=a,h=o.length):e===oi?c>0&&(n=oi,l=c,h=u.length):h=(n=(l=Math.max(a,c))>0?a>c?ii:oi:null)?n===ii?o.length:u.length:0,{type:n,timeout:l,propCount:h,hasTransform:n===ii&&vi.test(r[ai+"Property"])}}function _i(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map(function(e,n){return gi(e)+gi(t[n])}))}function gi(t){return 1e3*Number(t.slice(0,-1))}function mi(t,e){var n=t.elm;o(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=ei(t.data.transition);if(!i(r)&&!o(n._enterCb)&&1===n.nodeType){for(var a=r.css,s=r.type,c=r.enterClass,l=r.enterToClass,h=r.enterActiveClass,f=r.appearClass,p=r.appearToClass,v=r.appearActiveClass,y=r.beforeEnter,_=r.enter,g=r.afterEnter,m=r.enterCancelled,b=r.beforeAppear,w=r.appear,E=r.afterAppear,C=r.appearCancelled,T=r.duration,S=be,I=be.$vnode;I&&I.parent;)S=(I=I.parent).context;var N=!S._isMounted||!t.isRootInsert;if(!N||w||""===w){var A=N&&f?f:c,O=N&&v?v:h,k=N&&p?p:l,R=N&&b||y,P=N&&"function"==typeof w?w:_,D=N&&E||g,x=N&&C||m,L=d(u(T)?T.enter:T);0;var F=!1!==a&&!X,U=Ei(P),j=n._enterCb=M(function(){F&&(pi(n,k),pi(n,O)),j.cancelled?(F&&pi(n,A),x&&x(n)):D&&D(n),n._enterCb=null});t.data.show||se(t,"insert",function(){var e=n.parentNode,r=e&&e._pending&&e._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),P&&P(n,j)}),R&&R(n),F&&(fi(n,A),fi(n,O),hi(function(){pi(n,A),j.cancelled||(fi(n,k),U||(wi(L)?setTimeout(j,L):di(n,s,j)))})),t.data.show&&(e&&e(),P&&P(n,j)),F||U||j()}}}function bi(t,e){var n=t.elm;o(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=ei(t.data.transition);if(i(r)||1!==n.nodeType)return e();if(!o(n._leaveCb)){var a=r.css,s=r.type,c=r.leaveClass,l=r.leaveToClass,h=r.leaveActiveClass,f=r.beforeLeave,p=r.leave,v=r.afterLeave,y=r.leaveCancelled,_=r.delayLeave,g=r.duration,m=!1!==a&&!X,b=Ei(p),w=d(u(g)?g.leave:g);0;var E=n._leaveCb=M(function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[t.key]=null),m&&(pi(n,l),pi(n,h)),E.cancelled?(m&&pi(n,c),y&&y(n)):(e(),v&&v(n)),n._leaveCb=null});_?_(C):C()}function C(){E.cancelled||(t.data.show||((n.parentNode._pending||(n.parentNode._pending={}))[t.key]=t),f&&f(n),m&&(fi(n,c),fi(n,h),hi(function(){pi(n,c),E.cancelled||(fi(n,l),b||(wi(w)?setTimeout(E,w):di(n,s,E)))})),p&&p(n,E),m||b||E())}}function wi(t){return"number"==typeof t&&!isNaN(t)}function Ei(t){if(i(t))return!1;var e=t.fns;return o(e)?Ei(Array.isArray(e)?e[0]:e):(t._length||t.length)>1}function Ci(t,e){!0!==e.data.show&&mi(e)}var Ti=function(t){var e,n,r={},u=t.modules,c=t.nodeOps;for(e=0;e<Hn.length;++e)for(r[Hn[e]]=[],n=0;n<u.length;++n)o(u[n][Hn[e]])&&r[Hn[e]].push(u[n][Hn[e]]);function l(t){var e=c.parentNode(t);o(e)&&c.removeChild(e,t)}function h(t,e,n,i,s,u,l){if(o(t.elm)&&o(u)&&(t=u[l]=_t(t)),t.isRootInsert=!s,!function(t,e,n,i){var s=t.data;if(o(s)){var u=o(t.componentInstance)&&s.keepAlive;if(o(s=s.hook)&&o(s=s.init)&&s(t,!1,n,i),o(t.componentInstance))return f(t,e),a(u)&&function(t,e,n,i){for(var a,s=t;s.componentInstance;)if(s=s.componentInstance._vnode,o(a=s.data)&&o(a=a.transition)){for(a=0;a<r.activate.length;++a)r.activate[a](qn,s);e.push(s);break}p(n,t.elm,i)}(t,e,n,i),!0}}(t,e,n,i)){var h=t.data,v=t.children,y=t.tag;o(y)?(t.elm=t.ns?c.createElementNS(t.ns,y):c.createElement(y,t),g(t),d(t,v,e),o(h)&&_(t,e),p(n,t.elm,i)):a(t.isComment)?(t.elm=c.createComment(t.text),p(n,t.elm,i)):(t.elm=c.createTextNode(t.text),p(n,t.elm,i))}}function f(t,e){o(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,y(t)?(_(t,e),g(t)):($n(t),e.push(t))}function p(t,e,n){o(t)&&(o(n)?n.parentNode===t&&c.insertBefore(t,e,n):c.appendChild(t,e))}function d(t,e,n){if(Array.isArray(e))for(var r=0;r<e.length;++r)h(e[r],n,t.elm,null,!0,e,r);else s(t.text)&&c.appendChild(t.elm,c.createTextNode(String(t.text)))}function y(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return o(t.tag)}function _(t,n){for(var i=0;i<r.create.length;++i)r.create[i](qn,t);o(e=t.data.hook)&&(o(e.create)&&e.create(qn,t),o(e.insert)&&n.push(t))}function g(t){var e;if(o(e=t.fnScopeId))c.setStyleScope(t.elm,e);else for(var n=t;n;)o(e=n.context)&&o(e=e.$options._scopeId)&&c.setStyleScope(t.elm,e),n=n.parent;o(e=be)&&e!==t.context&&e!==t.fnContext&&o(e=e.$options._scopeId)&&c.setStyleScope(t.elm,e)}function m(t,e,n,r,i,o){for(;r<=i;++r)h(n[r],o,t,e,!1,n,r)}function b(t){var e,n,i=t.data;if(o(i))for(o(e=i.hook)&&o(e=e.destroy)&&e(t),e=0;e<r.destroy.length;++e)r.destroy[e](t);if(o(e=t.children))for(n=0;n<t.children.length;++n)b(t.children[n])}function w(t,e,n,r){for(;n<=r;++n){var i=e[n];o(i)&&(o(i.tag)?(E(i),b(i)):l(i.elm))}}function E(t,e){if(o(e)||o(t.data)){var n,i=r.remove.length+1;for(o(e)?e.listeners+=i:e=function(t,e){function n(){0==--n.listeners&&l(t)}return n.listeners=e,n}(t.elm,i),o(n=t.componentInstance)&&o(n=n._vnode)&&o(n.data)&&E(n,e),n=0;n<r.remove.length;++n)r.remove[n](t,e);o(n=t.data.hook)&&o(n=n.remove)?n(t,e):e()}else l(t.elm)}function C(t,e,n,r){for(var i=n;i<r;i++){var a=e[i];if(o(a)&&Kn(t,a))return i}}function T(t,e,n,s){if(t!==e){var u=e.elm=t.elm;if(a(t.isAsyncPlaceholder))o(e.asyncFactory.resolved)?N(t.elm,e,n):e.isAsyncPlaceholder=!0;else if(a(e.isStatic)&&a(t.isStatic)&&e.key===t.key&&(a(e.isCloned)||a(e.isOnce)))e.componentInstance=t.componentInstance;else{var l,f=e.data;o(f)&&o(l=f.hook)&&o(l=l.prepatch)&&l(t,e);var p=t.children,d=e.children;if(o(f)&&y(e)){for(l=0;l<r.update.length;++l)r.update[l](t,e);o(l=f.hook)&&o(l=l.update)&&l(t,e)}i(e.text)?o(p)&&o(d)?p!==d&&function(t,e,n,r,a){for(var s,u,l,f=0,p=0,d=e.length-1,v=e[0],y=e[d],_=n.length-1,g=n[0],b=n[_],E=!a;f<=d&&p<=_;)i(v)?v=e[++f]:i(y)?y=e[--d]:Kn(v,g)?(T(v,g,r),v=e[++f],g=n[++p]):Kn(y,b)?(T(y,b,r),y=e[--d],b=n[--_]):Kn(v,b)?(T(v,b,r),E&&c.insertBefore(t,v.elm,c.nextSibling(y.elm)),v=e[++f],b=n[--_]):Kn(y,g)?(T(y,g,r),E&&c.insertBefore(t,y.elm,v.elm),y=e[--d],g=n[++p]):(i(s)&&(s=Gn(e,f,d)),i(u=o(g.key)?s[g.key]:C(g,e,f,d))?h(g,r,t,v.elm,!1,n,p):Kn(l=e[u],g)?(T(l,g,r),e[u]=void 0,E&&c.insertBefore(t,l.elm,v.elm)):h(g,r,t,v.elm,!1,n,p),g=n[++p]);f>d?m(t,i(n[_+1])?null:n[_+1].elm,n,p,_,r):p>_&&w(0,e,f,d)}(u,p,d,n,s):o(d)?(o(t.text)&&c.setTextContent(u,""),m(u,null,d,0,d.length-1,n)):o(p)?w(0,p,0,p.length-1):o(t.text)&&c.setTextContent(u,""):t.text!==e.text&&c.setTextContent(u,e.text),o(f)&&o(l=f.hook)&&o(l=l.postpatch)&&l(t,e)}}}function S(t,e,n){if(a(n)&&o(t.parent))t.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var I=v("attrs,class,staticClass,staticStyle,key");function N(t,e,n,r){var i,s=e.tag,u=e.data,c=e.children;if(r=r||u&&u.pre,e.elm=t,a(e.isComment)&&o(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(o(u)&&(o(i=u.hook)&&o(i=i.init)&&i(e,!0),o(i=e.componentInstance)))return f(e,n),!0;if(o(s)){if(o(c))if(t.hasChildNodes())if(o(i=u)&&o(i=i.domProps)&&o(i=i.innerHTML)){if(i!==t.innerHTML)return!1}else{for(var l=!0,h=t.firstChild,p=0;p<c.length;p++){if(!h||!N(h,c[p],n,r)){l=!1;break}h=h.nextSibling}if(!l||h)return!1}else d(e,c,n);if(o(u)){var v=!1;for(var y in u)if(!I(y)){v=!0,_(e,n);break}!v&&u.class&&ne(u.class)}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,e,n,s,u,l){if(!i(e)){var f,p=!1,d=[];if(i(t))p=!0,h(e,d,u,l);else{var v=o(t.nodeType);if(!v&&Kn(t,e))T(t,e,d,s);else{if(v){if(1===t.nodeType&&t.hasAttribute(F)&&(t.removeAttribute(F),n=!0),a(n)&&N(t,e,d))return S(e,d,!0),t;f=t,t=new pt(c.tagName(f).toLowerCase(),{},[],void 0,f)}var _=t.elm,g=c.parentNode(_);if(h(e,d,_._leaveCb?null:g,c.nextSibling(_)),o(e.parent))for(var m=e.parent,E=y(e);m;){for(var C=0;C<r.destroy.length;++C)r.destroy[C](m);if(m.elm=e.elm,E){for(var I=0;I<r.create.length;++I)r.create[I](qn,m);var A=m.data.hook.insert;if(A.merged)for(var O=1;O<A.fns.length;O++)A.fns[O]()}else $n(m);m=m.parent}o(g)?w(0,[t],0,0):o(t.tag)&&b(t)}}return S(e,d,p),e.elm}o(t)&&b(t)}}({nodeOps:Wn,modules:[ir,fr,Ur,Wr,Jr,H?{create:Ci,activate:Ci,remove:function(t,e){!0!==t.data.show?bi(t,e):e()}}:{}].concat(tr)});X&&document.addEventListener("selectionchange",function(){var t=document.activeElement;t&&t.vmodel&&Pi(t,"input")});var Si={inserted:function(t,e,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?se(n,"postpatch",function(){Si.componentUpdated(t,e,n)}):Ii(t,e,n.context),t._vOptions=[].map.call(t.options,Oi)):("textarea"===n.tag||jn(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("compositionstart",ki),t.addEventListener("compositionend",Ri),t.addEventListener("change",Ri),X&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){Ii(t,e,n.context);var r=t._vOptions,i=t._vOptions=[].map.call(t.options,Oi);if(i.some(function(t,e){return!x(t,r[e])}))(t.multiple?e.value.some(function(t){return Ai(t,i)}):e.value!==e.oldValue&&Ai(e.value,i))&&Pi(t,"change")}}};function Ii(t,e,n){Ni(t,e,n),(z||Y)&&setTimeout(function(){Ni(t,e,n)},0)}function Ni(t,e,n){var r=e.value,i=t.multiple;if(!i||Array.isArray(r)){for(var o,a,s=0,u=t.options.length;s<u;s++)if(a=t.options[s],i)o=L(r,Oi(a))>-1,a.selected!==o&&(a.selected=o);else if(x(Oi(a),r))return void(t.selectedIndex!==s&&(t.selectedIndex=s));i||(t.selectedIndex=-1)}}function Ai(t,e){return e.every(function(e){return!x(e,t)})}function Oi(t){return"_value"in t?t._value:t.value}function ki(t){t.target.composing=!0}function Ri(t){t.target.composing&&(t.target.composing=!1,Pi(t.target,"input"))}function Pi(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function Di(t){return!t.componentInstance||t.data&&t.data.transition?t:Di(t.componentInstance._vnode)}var xi={model:Si,show:{bind:function(t,e,n){var r=e.value,i=(n=Di(n)).data&&n.data.transition,o=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&i?(n.data.show=!0,mi(n,function(){t.style.display=o})):t.style.display=r?o:"none"},update:function(t,e,n){var r=e.value;!r!=!e.oldValue&&((n=Di(n)).data&&n.data.transition?(n.data.show=!0,r?mi(n,function(){t.style.display=t.__vOriginalDisplay}):bi(n,function(){t.style.display="none"})):t.style.display=r?t.__vOriginalDisplay:"none")},unbind:function(t,e,n,r,i){i||(t.style.display=t.__vOriginalDisplay)}}},Li={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Mi(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?Mi(pe(e.children)):t}function Fi(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var i=n._parentListeners;for(var o in i)e[C(o)]=i[o];return e}function Ui(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}var ji={name:"transition",props:Li,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(function(t){return t.tag||fe(t)})).length){0;var r=this.mode;0;var i=n[0];if(function(t){for(;t=t.parent;)if(t.data.transition)return!0}(this.$vnode))return i;var o=Mi(i);if(!o)return i;if(this._leaving)return Ui(t,i);var a="__transition-"+this._uid+"-";o.key=null==o.key?o.isComment?a+"comment":a+o.tag:s(o.key)?0===String(o.key).indexOf(a)?o.key:a+o.key:o.key;var u=(o.data||(o.data={})).transition=Fi(this),c=this._vnode,l=Mi(c);if(o.data.directives&&o.data.directives.some(function(t){return"show"===t.name})&&(o.data.show=!0),l&&l.data&&!function(t,e){return e.key===t.key&&e.tag===t.tag}(o,l)&&!fe(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var h=l.data.transition=O({},u);if("out-in"===r)return this._leaving=!0,se(h,"afterLeave",function(){e._leaving=!1,e.$forceUpdate()}),Ui(t,i);if("in-out"===r){if(fe(o))return c;var f,p=function(){f()};se(u,"afterEnter",p),se(u,"enterCancelled",p),se(h,"delayLeave",function(t){f=t})}}return i}}},Bi=O({tag:String,moveClass:String},Li);function Wi(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function Vi(t){t.data.newPos=t.elm.getBoundingClientRect()}function $i(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,i=e.top-n.top;if(r||i){t.data.moved=!0;var o=t.elm.style;o.transform=o.WebkitTransform="translate("+r+"px,"+i+"px)",o.transitionDuration="0s"}}delete Bi.mode;var qi={Transition:ji,TransitionGroup:{props:Bi,render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],o=this.children=[],a=Fi(this),s=0;s<i.length;s++){var u=i[s];if(u.tag)if(null!=u.key&&0!==String(u.key).indexOf("__vlist"))o.push(u),n[u.key]=u,(u.data||(u.data={})).transition=a;else;}if(r){for(var c=[],l=[],h=0;h<r.length;h++){var f=r[h];f.data.transition=a,f.data.pos=f.elm.getBoundingClientRect(),n[f.key]?c.push(f):l.push(f)}this.kept=t(e,null,c),this.removed=l}return t(e,null,o)},beforeUpdate:function(){this.__patch__(this._vnode,this.kept,!1,!0),this._vnode=this.kept},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(Wi),t.forEach(Vi),t.forEach($i),this._reflow=document.body.offsetHeight,t.forEach(function(t){if(t.data.moved){var n=t.elm,r=n.style;fi(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(si,n._moveCb=function t(r){r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(si,t),n._moveCb=null,pi(n,e))})}}))},methods:{hasMove:function(t,e){if(!ri)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach(function(t){ti(n,t)}),Zr(n,e),n.style.display="none",this.$el.appendChild(n);var r=yi(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};fn.config.mustUseProp=En,fn.config.isReservedTag=Mn,fn.config.isReservedAttr=bn,fn.config.getTagNamespace=Fn,fn.config.isUnknownElement=function(t){if(!H)return!0;if(Mn(t))return!1;if(t=t.toLowerCase(),null!=Un[t])return Un[t];var e=document.createElement(t);return t.indexOf("-")>-1?Un[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Un[t]=/HTMLUnknownElement/.test(e.toString())},O(fn.options.directives,xi),O(fn.options.components,qi),fn.prototype.__patch__=H?Ti:R,fn.prototype.$mount=function(t,e){return function(t,e,n){return t.$el=e,t.$options.render||(t.$options.render=vt),Ce(t,"beforeMount"),new Pe(t,function(){t._update(t._render(),n)},R,null,!0),n=!1,null==t.$vnode&&(t._isMounted=!0,Ce(t,"mounted")),t}(this,t=t&&H?Bn(t):void 0,e)},H&&setTimeout(function(){B.devtools&&rt&&rt.emit("init",fn)},0);var Hi=/\{\{((?:.|\n)+?)\}\}/g,Ki=/[-.*+?^${}()|[\]\/\\]/g,Gi=w(function(t){var e=t[0].replace(Ki,"\\$&"),n=t[1].replace(Ki,"\\$&");return new RegExp(e+"((?:.|\\n)+?)"+n,"g")});var Qi={staticKeys:["staticClass"],transformNode:function(t,e){e.warn;var n=Tr(t,"class");n&&(t.staticClass=JSON.stringify(n));var r=Cr(t,"class",!1);r&&(t.classBinding=r)},genData:function(t){var e="";return t.staticClass&&(e+="staticClass:"+t.staticClass+","),t.classBinding&&(e+="class:"+t.classBinding+","),e}};var zi,Xi={staticKeys:["staticStyle"],transformNode:function(t,e){e.warn;var n=Tr(t,"style");n&&(t.staticStyle=JSON.stringify(Vr(n)));var r=Cr(t,"style",!1);r&&(t.styleBinding=r)},genData:function(t){var e="";return t.staticStyle&&(e+="staticStyle:"+t.staticStyle+","),t.styleBinding&&(e+="style:("+t.styleBinding+"),"),e}},Yi=function(t){return(zi=zi||document.createElement("div")).innerHTML=t,zi.textContent},Ji=v("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),Zi=v("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),to=v("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),eo=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,no="[a-zA-Z_][\\w\\-\\.]*",ro="((?:"+no+"\\:)?"+no+")",io=new RegExp("^<"+ro),oo=/^\s*(\/?)>/,ao=new RegExp("^<\\/"+ro+"[^>]*>"),so=/^<!DOCTYPE [^>]+>/i,uo=/^<!\--/,co=/^<!\[/,lo=!1;"x".replace(/x(.)?/g,function(t,e){lo=""===e});var ho=v("script,style,textarea",!0),fo={},po={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t"},vo=/&(?:lt|gt|quot|amp);/g,yo=/&(?:lt|gt|quot|amp|#10|#9);/g,_o=v("pre,textarea",!0),go=function(t,e){return t&&_o(t)&&"\n"===e[0]};function mo(t,e){var n=e?yo:vo;return t.replace(n,function(t){return po[t]})}var bo,wo,Eo,Co,To,So,Io,No,Ao=/^@|^v-on:/,Oo=/^v-|^@|^:/,ko=/([^]*?)\s+(?:in|of)\s+([^]*)/,Ro=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Po=/^\(|\)$/g,Do=/:(.*)$/,xo=/^:|^v-bind:/,Lo=/\.[^.]+/g,Mo=w(Yi);function Fo(t,e,n){return{type:1,tag:t,attrsList:e,attrsMap:function(t){for(var e={},n=0,r=t.length;n<r;n++)e[t[n].name]=t[n].value;return e}(e),parent:n,children:[]}}function Uo(t,e){bo=e.warn||yr,So=e.isPreTag||P,Io=e.mustUseProp||P,No=e.getTagNamespace||P,Eo=_r(e.modules,"transformNode"),Co=_r(e.modules,"preTransformNode"),To=_r(e.modules,"postTransformNode"),wo=e.delimiters;var n,r,i=[],o=!1!==e.preserveWhitespace,a=!1,s=!1;function u(t){t.pre&&(a=!1),So(t.tag)&&(s=!1);for(var n=0;n<To.length;n++)To[n](t,e)}return function(t,e){for(var n,r,i=[],o=e.expectHTML,a=e.isUnaryTag||P,s=e.canBeLeftOpenTag||P,u=0;t;){if(n=t,r&&ho(r)){var c=0,l=r.toLowerCase(),h=fo[l]||(fo[l]=new RegExp("([\\s\\S]*?)(</"+l+"[^>]*>)","i")),f=t.replace(h,function(t,n,r){return c=r.length,ho(l)||"noscript"===l||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),go(l,n)&&(n=n.slice(1)),e.chars&&e.chars(n),""});u+=t.length-f.length,t=f,I(l,u-c,u)}else{var p=t.indexOf("<");if(0===p){if(uo.test(t)){var d=t.indexOf("--\x3e");if(d>=0){e.shouldKeepComment&&e.comment(t.substring(4,d)),C(d+3);continue}}if(co.test(t)){var v=t.indexOf("]>");if(v>=0){C(v+2);continue}}var y=t.match(so);if(y){C(y[0].length);continue}var _=t.match(ao);if(_){var g=u;C(_[0].length),I(_[1],g,u);continue}var m=T();if(m){S(m),go(r,t)&&C(1);continue}}var b=void 0,w=void 0,E=void 0;if(p>=0){for(w=t.slice(p);!(ao.test(w)||io.test(w)||uo.test(w)||co.test(w)||(E=w.indexOf("<",1))<0);)p+=E,w=t.slice(p);b=t.substring(0,p),C(p)}p<0&&(b=t,t=""),e.chars&&b&&e.chars(b)}if(t===n){e.chars&&e.chars(t);break}}function C(e){u+=e,t=t.substring(e)}function T(){var e=t.match(io);if(e){var n,r,i={tagName:e[1],attrs:[],start:u};for(C(e[0].length);!(n=t.match(oo))&&(r=t.match(eo));)C(r[0].length),i.attrs.push(r);if(n)return i.unarySlash=n[1],C(n[0].length),i.end=u,i}}function S(t){var n=t.tagName,u=t.unarySlash;o&&("p"===r&&to(n)&&I(r),s(n)&&r===n&&I(n));for(var c=a(n)||!!u,l=t.attrs.length,h=new Array(l),f=0;f<l;f++){var p=t.attrs[f];lo&&-1===p[0].indexOf('""')&&(""===p[3]&&delete p[3],""===p[4]&&delete p[4],""===p[5]&&delete p[5]);var d=p[3]||p[4]||p[5]||"",v="a"===n&&"href"===p[1]?e.shouldDecodeNewlinesForHref:e.shouldDecodeNewlines;h[f]={name:p[1],value:mo(d,v)}}c||(i.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:h}),r=n),e.start&&e.start(n,h,c,t.start,t.end)}function I(t,n,o){var a,s;if(null==n&&(n=u),null==o&&(o=u),t&&(s=t.toLowerCase()),t)for(a=i.length-1;a>=0&&i[a].lowerCasedTag!==s;a--);else a=0;if(a>=0){for(var c=i.length-1;c>=a;c--)e.end&&e.end(i[c].tag,n,o);i.length=a,r=a&&i[a-1].tag}else"br"===s?e.start&&e.start(t,[],!0,n,o):"p"===s&&(e.start&&e.start(t,[],!1,n,o),e.end&&e.end(t,n,o))}I()}(t,{warn:bo,expectHTML:e.expectHTML,isUnaryTag:e.isUnaryTag,canBeLeftOpenTag:e.canBeLeftOpenTag,shouldDecodeNewlines:e.shouldDecodeNewlines,shouldDecodeNewlinesForHref:e.shouldDecodeNewlinesForHref,shouldKeepComment:e.comments,start:function(t,o,c){var l=r&&r.ns||No(t);z&&"svg"===l&&(o=function(t){for(var e=[],n=0;n<t.length;n++){var r=t[n];$o.test(r.name)||(r.name=r.name.replace(qo,""),e.push(r))}return e}(o));var h,f=Fo(t,o,r);l&&(f.ns=l),"style"!==(h=f).tag&&("script"!==h.tag||h.attrsMap.type&&"text/javascript"!==h.attrsMap.type)||nt()||(f.forbidden=!0);for(var p=0;p<Co.length;p++)f=Co[p](f,e)||f;function d(t){0}if(a||(!function(t){null!=Tr(t,"v-pre")&&(t.pre=!0)}(f),f.pre&&(a=!0)),So(f.tag)&&(s=!0),a?function(t){var e=t.attrsList.length;if(e)for(var n=t.attrs=new Array(e),r=0;r<e;r++)n[r]={name:t.attrsList[r].name,value:JSON.stringify(t.attrsList[r].value)};else t.pre||(t.plain=!0)}(f):f.processed||(Bo(f),function(t){var e=Tr(t,"v-if");if(e)t.if=e,Wo(t,{exp:e,block:t});else{null!=Tr(t,"v-else")&&(t.else=!0);var n=Tr(t,"v-else-if");n&&(t.elseif=n)}}(f),function(t){null!=Tr(t,"v-once")&&(t.once=!0)}(f),jo(f,e)),n?i.length||n.if&&(f.elseif||f.else)&&(d(),Wo(n,{exp:f.elseif,block:f})):(n=f,d()),r&&!f.forbidden)if(f.elseif||f.else)!function(t,e){var n=function(t){var e=t.length;for(;e--;){if(1===t[e].type)return t[e];t.pop()}}(e.children);n&&n.if&&Wo(n,{exp:t.elseif,block:t})}(f,r);else if(f.slotScope){r.plain=!1;var v=f.slotTarget||'"default"';(r.scopedSlots||(r.scopedSlots={}))[v]=f}else r.children.push(f),f.parent=r;c?u(f):(r=f,i.push(f))},end:function(){var t=i[i.length-1],e=t.children[t.children.length-1];e&&3===e.type&&" "===e.text&&!s&&t.children.pop(),i.length-=1,r=i[i.length-1],u(t)},chars:function(t){if(r&&(!z||"textarea"!==r.tag||r.attrsMap.placeholder!==t)){var e,n,i=r.children;if(t=s||t.trim()?"script"===(e=r).tag||"style"===e.tag?t:Mo(t):o&&i.length?" ":"")!a&&" "!==t&&(n=function(t,e){var n=e?Gi(e):Hi;if(n.test(t)){for(var r,i,o,a=[],s=[],u=n.lastIndex=0;r=n.exec(t);){(i=r.index)>u&&(s.push(o=t.slice(u,i)),a.push(JSON.stringify(o)));var c=dr(r[1].trim());a.push("_s("+c+")"),s.push({"@binding":c}),u=i+r[0].length}return u<t.length&&(s.push(o=t.slice(u)),a.push(JSON.stringify(o))),{expression:a.join("+"),tokens:s}}}(t,wo))?i.push({type:2,expression:n.expression,tokens:n.tokens,text:t}):" "===t&&i.length&&" "===i[i.length-1].text||i.push({type:3,text:t})}},comment:function(t){r.children.push({type:3,text:t,isComment:!0})}}),n}function jo(t,e){var n,r;(r=Cr(n=t,"key"))&&(n.key=r),t.plain=!t.key&&!t.attrsList.length,function(t){var e=Cr(t,"ref");e&&(t.ref=e,t.refInFor=function(t){var e=t;for(;e;){if(void 0!==e.for)return!0;e=e.parent}return!1}(t))}(t),function(t){if("slot"===t.tag)t.slotName=Cr(t,"name");else{var e;"template"===t.tag?(e=Tr(t,"scope"),t.slotScope=e||Tr(t,"slot-scope")):(e=Tr(t,"slot-scope"))&&(t.slotScope=e);var n=Cr(t,"slot");n&&(t.slotTarget='""'===n?'"default"':n,"template"===t.tag||t.slotScope||mr(t,"slot",n))}}(t),function(t){var e;(e=Cr(t,"is"))&&(t.component=e);null!=Tr(t,"inline-template")&&(t.inlineTemplate=!0)}(t);for(var i=0;i<Eo.length;i++)t=Eo[i](t,e)||t;!function(t){var e,n,r,i,o,a,s,u=t.attrsList;for(e=0,n=u.length;e<n;e++){if(r=i=u[e].name,o=u[e].value,Oo.test(r))if(t.hasBindings=!0,(a=Vo(r))&&(r=r.replace(Lo,"")),xo.test(r))r=r.replace(xo,""),o=dr(o),s=!1,a&&(a.prop&&(s=!0,"innerHtml"===(r=C(r))&&(r="innerHTML")),a.camel&&(r=C(r)),a.sync&&Er(t,"update:"+C(r),Ir(o,"$event"))),s||!t.component&&Io(t.tag,t.attrsMap.type,r)?gr(t,r,o):mr(t,r,o);else if(Ao.test(r))r=r.replace(Ao,""),Er(t,r,o,a,!1);else{var c=(r=r.replace(Oo,"")).match(Do),l=c&&c[1];l&&(r=r.slice(0,-(l.length+1))),wr(t,r,i,o,l,a)}else mr(t,r,JSON.stringify(o)),!t.component&&"muted"===r&&Io(t.tag,t.attrsMap.type,r)&&gr(t,r,"true")}}(t)}function Bo(t){var e;if(e=Tr(t,"v-for")){var n=function(t){var e=t.match(ko);if(!e)return;var n={};n.for=e[2].trim();var r=e[1].trim().replace(Po,""),i=r.match(Ro);i?(n.alias=r.replace(Ro,""),n.iterator1=i[1].trim(),i[2]&&(n.iterator2=i[2].trim())):n.alias=r;return n}(e);n&&O(t,n)}}function Wo(t,e){t.ifConditions||(t.ifConditions=[]),t.ifConditions.push(e)}function Vo(t){var e=t.match(Lo);if(e){var n={};return e.forEach(function(t){n[t.slice(1)]=!0}),n}}var $o=/^xmlns:NS\d+/,qo=/^NS\d+:/;function Ho(t){return Fo(t.tag,t.attrsList.slice(),t.parent)}var Ko=[Qi,Xi,{preTransformNode:function(t,e){if("input"===t.tag){var n,r=t.attrsMap;if(!r["v-model"])return;if((r[":type"]||r["v-bind:type"])&&(n=Cr(t,"type")),r.type||n||!r["v-bind"]||(n="("+r["v-bind"]+").type"),n){var i=Tr(t,"v-if",!0),o=i?"&&("+i+")":"",a=null!=Tr(t,"v-else",!0),s=Tr(t,"v-else-if",!0),u=Ho(t);Bo(u),br(u,"type","checkbox"),jo(u,e),u.processed=!0,u.if="("+n+")==='checkbox'"+o,Wo(u,{exp:u.if,block:u});var c=Ho(t);Tr(c,"v-for",!0),br(c,"type","radio"),jo(c,e),Wo(u,{exp:"("+n+")==='radio'"+o,block:c});var l=Ho(t);return Tr(l,"v-for",!0),br(l,":type",n),jo(l,e),Wo(u,{exp:i,block:l}),a?u.else=!0:s&&(u.elseif=s),u}}}}];var Go,Qo,zo={expectHTML:!0,modules:Ko,directives:{model:function(t,e,n){n;var r=e.value,i=e.modifiers,o=t.tag,a=t.attrsMap.type;if(t.component)return Sr(t,r,i),!1;if("select"===o)!function(t,e,n){var r='var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(n&&n.number?"_n(val)":"val")+"});";r=r+" "+Ir(e,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),Er(t,"change",r,null,!0)}(t,r,i);else if("input"===o&&"checkbox"===a)!function(t,e,n){var r=n&&n.number,i=Cr(t,"value")||"null",o=Cr(t,"true-value")||"true",a=Cr(t,"false-value")||"false";gr(t,"checked","Array.isArray("+e+")?_i("+e+","+i+")>-1"+("true"===o?":("+e+")":":_q("+e+","+o+")")),Er(t,"change","var $$a="+e+",$$el=$event.target,$$c=$$el.checked?("+o+"):("+a+");if(Array.isArray($$a)){var $$v="+(r?"_n("+i+")":i)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+Ir(e,"$$a.concat([$$v])")+")}else{$$i>-1&&("+Ir(e,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+Ir(e,"$$c")+"}",null,!0)}(t,r,i);else if("input"===o&&"radio"===a)!function(t,e,n){var r=n&&n.number,i=Cr(t,"value")||"null";gr(t,"checked","_q("+e+","+(i=r?"_n("+i+")":i)+")"),Er(t,"change",Ir(e,i),null,!0)}(t,r,i);else if("input"===o||"textarea"===o)!function(t,e,n){var r=t.attrsMap.type,i=n||{},o=i.lazy,a=i.number,s=i.trim,u=!o&&"range"!==r,c=o?"change":"range"===r?Dr:"input",l="$event.target.value";s&&(l="$event.target.value.trim()"),a&&(l="_n("+l+")");var h=Ir(e,l);u&&(h="if($event.target.composing)return;"+h),gr(t,"value","("+e+")"),Er(t,c,h,null,!0),(s||a)&&Er(t,"blur","$forceUpdate()")}(t,r,i);else if(!B.isReservedTag(o))return Sr(t,r,i),!1;return!0},text:function(t,e){e.value&&gr(t,"textContent","_s("+e.value+")")},html:function(t,e){e.value&&gr(t,"innerHTML","_s("+e.value+")")}},isPreTag:function(t){return"pre"===t},isUnaryTag:Ji,mustUseProp:En,canBeLeftOpenTag:Zi,isReservedTag:Mn,getTagNamespace:Fn,staticKeys:function(t){return t.reduce(function(t,e){return t.concat(e.staticKeys||[])},[]).join(",")}(Ko)},Xo=w(function(t){return v("type,tag,attrsList,attrsMap,plain,parent,children,attrs"+(t?","+t:""))});function Yo(t,e){t&&(Go=Xo(e.staticKeys||""),Qo=e.isReservedTag||P,function t(e){e.static=function(t){if(2===t.type)return!1;if(3===t.type)return!0;return!(!t.pre&&(t.hasBindings||t.if||t.for||y(t.tag)||!Qo(t.tag)||function(t){for(;t.parent;){if("template"!==(t=t.parent).tag)return!1;if(t.for)return!0}return!1}(t)||!Object.keys(t).every(Go)))}(e);if(1===e.type){if(!Qo(e.tag)&&"slot"!==e.tag&&null==e.attrsMap["inline-template"])return;for(var n=0,r=e.children.length;n<r;n++){var i=e.children[n];t(i),i.static||(e.static=!1)}if(e.ifConditions)for(var o=1,a=e.ifConditions.length;o<a;o++){var s=e.ifConditions[o].block;t(s),s.static||(e.static=!1)}}}(t),function t(e,n){if(1===e.type){if((e.static||e.once)&&(e.staticInFor=n),e.static&&e.children.length&&(1!==e.children.length||3!==e.children[0].type))return void(e.staticRoot=!0);if(e.staticRoot=!1,e.children)for(var r=0,i=e.children.length;r<i;r++)t(e.children[r],n||!!e.for);if(e.ifConditions)for(var o=1,a=e.ifConditions.length;o<a;o++)t(e.ifConditions[o].block,n)}}(t,!1))}var Jo=/^([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/,Zo=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,ta={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},ea={esc:"Escape",tab:"Tab",enter:"Enter",space:" ",up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete"]},na=function(t){return"if("+t+")return null;"},ra={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:na("$event.target !== $event.currentTarget"),ctrl:na("!$event.ctrlKey"),shift:na("!$event.shiftKey"),alt:na("!$event.altKey"),meta:na("!$event.metaKey"),left:na("'button' in $event && $event.button !== 0"),middle:na("'button' in $event && $event.button !== 1"),right:na("'button' in $event && $event.button !== 2")};function ia(t,e,n){var r=e?"nativeOn:{":"on:{";for(var i in t)r+='"'+i+'":'+oa(i,t[i])+",";return r.slice(0,-1)+"}"}function oa(t,e){if(!e)return"function(){}";if(Array.isArray(e))return"["+e.map(function(e){return oa(t,e)}).join(",")+"]";var n=Zo.test(e.value),r=Jo.test(e.value);if(e.modifiers){var i="",o="",a=[];for(var s in e.modifiers)if(ra[s])o+=ra[s],ta[s]&&a.push(s);else if("exact"===s){var u=e.modifiers;o+=na(["ctrl","shift","alt","meta"].filter(function(t){return!u[t]}).map(function(t){return"$event."+t+"Key"}).join("||"))}else a.push(s);return a.length&&(i+=function(t){return"if(!('button' in $event)&&"+t.map(aa).join("&&")+")return null;"}(a)),o&&(i+=o),"function($event){"+i+(n?"return "+e.value+"($event)":r?"return ("+e.value+")($event)":e.value)+"}"}return n||r?e.value:"function($event){"+e.value+"}"}function aa(t){var e=parseInt(t,10);if(e)return"$event.keyCode!=="+e;var n=ta[t],r=ea[t];return"_k($event.keyCode,"+JSON.stringify(t)+","+JSON.stringify(n)+",$event.key,"+JSON.stringify(r)+")"}var sa={on:function(t,e){t.wrapListeners=function(t){return"_g("+t+","+e.value+")"}},bind:function(t,e){t.wrapData=function(n){return"_b("+n+",'"+t.tag+"',"+e.value+","+(e.modifiers&&e.modifiers.prop?"true":"false")+(e.modifiers&&e.modifiers.sync?",true":"")+")"}},cloak:R},ua=function(t){this.options=t,this.warn=t.warn||yr,this.transforms=_r(t.modules,"transformCode"),this.dataGenFns=_r(t.modules,"genData"),this.directives=O(O({},sa),t.directives);var e=t.isReservedTag||P;this.maybeComponent=function(t){return!e(t.tag)},this.onceId=0,this.staticRenderFns=[]};function ca(t,e){var n=new ua(e);return{render:"with(this){return "+(t?la(t,n):'_c("div")')+"}",staticRenderFns:n.staticRenderFns}}function la(t,e){if(t.staticRoot&&!t.staticProcessed)return ha(t,e);if(t.once&&!t.onceProcessed)return fa(t,e);if(t.for&&!t.forProcessed)return function(t,e,n,r){var i=t.for,o=t.alias,a=t.iterator1?","+t.iterator1:"",s=t.iterator2?","+t.iterator2:"";0;return t.forProcessed=!0,(r||"_l")+"(("+i+"),function("+o+a+s+"){return "+(n||la)(t,e)+"})"}(t,e);if(t.if&&!t.ifProcessed)return pa(t,e);if("template"!==t.tag||t.slotTarget){if("slot"===t.tag)return function(t,e){var n=t.slotName||'"default"',r=ya(t,e),i="_t("+n+(r?","+r:""),o=t.attrs&&"{"+t.attrs.map(function(t){return C(t.name)+":"+t.value}).join(",")+"}",a=t.attrsMap["v-bind"];!o&&!a||r||(i+=",null");o&&(i+=","+o);a&&(i+=(o?"":",null")+","+a);return i+")"}(t,e);var n;if(t.component)n=function(t,e,n){var r=e.inlineTemplate?null:ya(e,n,!0);return"_c("+t+","+da(e,n)+(r?","+r:"")+")"}(t.component,t,e);else{var r=t.plain?void 0:da(t,e),i=t.inlineTemplate?null:ya(t,e,!0);n="_c('"+t.tag+"'"+(r?","+r:"")+(i?","+i:"")+")"}for(var o=0;o<e.transforms.length;o++)n=e.transforms[o](t,n);return n}return ya(t,e)||"void 0"}function ha(t,e){return t.staticProcessed=!0,e.staticRenderFns.push("with(this){return "+la(t,e)+"}"),"_m("+(e.staticRenderFns.length-1)+(t.staticInFor?",true":"")+")"}function fa(t,e){if(t.onceProcessed=!0,t.if&&!t.ifProcessed)return pa(t,e);if(t.staticInFor){for(var n="",r=t.parent;r;){if(r.for){n=r.key;break}r=r.parent}return n?"_o("+la(t,e)+","+e.onceId+++","+n+")":la(t,e)}return ha(t,e)}function pa(t,e,n,r){return t.ifProcessed=!0,function t(e,n,r,i){if(!e.length)return i||"_e()";var o=e.shift();return o.exp?"("+o.exp+")?"+a(o.block)+":"+t(e,n,r,i):""+a(o.block);function a(t){return r?r(t,n):t.once?fa(t,n):la(t,n)}}(t.ifConditions.slice(),e,n,r)}function da(t,e){var n="{",r=function(t,e){var n=t.directives;if(!n)return;var r,i,o,a,s="directives:[",u=!1;for(r=0,i=n.length;r<i;r++){o=n[r],a=!0;var c=e.directives[o.name];c&&(a=!!c(t,o,e.warn)),a&&(u=!0,s+='{name:"'+o.name+'",rawName:"'+o.rawName+'"'+(o.value?",value:("+o.value+"),expression:"+JSON.stringify(o.value):"")+(o.arg?',arg:"'+o.arg+'"':"")+(o.modifiers?",modifiers:"+JSON.stringify(o.modifiers):"")+"},")}if(u)return s.slice(0,-1)+"]"}(t,e);r&&(n+=r+","),t.key&&(n+="key:"+t.key+","),t.ref&&(n+="ref:"+t.ref+","),t.refInFor&&(n+="refInFor:true,"),t.pre&&(n+="pre:true,"),t.component&&(n+='tag:"'+t.tag+'",');for(var i=0;i<e.dataGenFns.length;i++)n+=e.dataGenFns[i](t);if(t.attrs&&(n+="attrs:{"+ma(t.attrs)+"},"),t.props&&(n+="domProps:{"+ma(t.props)+"},"),t.events&&(n+=ia(t.events,!1,e.warn)+","),t.nativeEvents&&(n+=ia(t.nativeEvents,!0,e.warn)+","),t.slotTarget&&!t.slotScope&&(n+="slot:"+t.slotTarget+","),t.scopedSlots&&(n+=function(t,e){return"scopedSlots:_u(["+Object.keys(t).map(function(n){return va(n,t[n],e)}).join(",")+"])"}(t.scopedSlots,e)+","),t.model&&(n+="model:{value:"+t.model.value+",callback:"+t.model.callback+",expression:"+t.model.expression+"},"),t.inlineTemplate){var o=function(t,e){var n=t.children[0];0;if(1===n.type){var r=ca(n,e.options);return"inlineTemplate:{render:function(){"+r.render+"},staticRenderFns:["+r.staticRenderFns.map(function(t){return"function(){"+t+"}"}).join(",")+"]}"}}(t,e);o&&(n+=o+",")}return n=n.replace(/,$/,"")+"}",t.wrapData&&(n=t.wrapData(n)),t.wrapListeners&&(n=t.wrapListeners(n)),n}function va(t,e,n){return e.for&&!e.forProcessed?function(t,e,n){var r=e.for,i=e.alias,o=e.iterator1?","+e.iterator1:"",a=e.iterator2?","+e.iterator2:"";return e.forProcessed=!0,"_l(("+r+"),function("+i+o+a+"){return "+va(t,e,n)+"})"}(t,e,n):"{key:"+t+",fn:"+("function("+String(e.slotScope)+"){return "+("template"===e.tag?e.if?e.if+"?"+(ya(e,n)||"undefined")+":undefined":ya(e,n)||"undefined":la(e,n))+"}")+"}"}function ya(t,e,n,r,i){var o=t.children;if(o.length){var a=o[0];if(1===o.length&&a.for&&"template"!==a.tag&&"slot"!==a.tag)return(r||la)(a,e);var s=n?function(t,e){for(var n=0,r=0;r<t.length;r++){var i=t[r];if(1===i.type){if(_a(i)||i.ifConditions&&i.ifConditions.some(function(t){return _a(t.block)})){n=2;break}(e(i)||i.ifConditions&&i.ifConditions.some(function(t){return e(t.block)}))&&(n=1)}}return n}(o,e.maybeComponent):0,u=i||ga;return"["+o.map(function(t){return u(t,e)}).join(",")+"]"+(s?","+s:"")}}function _a(t){return void 0!==t.for||"template"===t.tag||"slot"===t.tag}function ga(t,e){return 1===t.type?la(t,e):3===t.type&&t.isComment?(r=t,"_e("+JSON.stringify(r.text)+")"):"_v("+(2===(n=t).type?n.expression:ba(JSON.stringify(n.text)))+")";var n,r}function ma(t){for(var e="",n=0;n<t.length;n++){var r=t[n];e+='"'+r.name+'":'+ba(r.value)+","}return e.slice(0,-1)}function ba(t){return t.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)");function wa(t,e){try{return new Function(t)}catch(n){return e.push({err:n,code:t}),R}}var Ea,Ca,Ta=(Ea=function(t,e){var n=Uo(t.trim(),e);!1!==e.optimize&&Yo(n,e);var r=ca(n,e);return{ast:n,render:r.render,staticRenderFns:r.staticRenderFns}},function(t){function e(e,n){var r=Object.create(t),i=[],o=[];if(r.warn=function(t,e){(e?o:i).push(t)},n)for(var a in n.modules&&(r.modules=(t.modules||[]).concat(n.modules)),n.directives&&(r.directives=O(Object.create(t.directives||null),n.directives)),n)"modules"!==a&&"directives"!==a&&(r[a]=n[a]);var s=Ea(e,r);return s.errors=i,s.tips=o,s}return{compile:e,compileToFunctions:function(t){var e=Object.create(null);return function(n,r,i){(r=O({},r)).warn,delete r.warn;var o=r.delimiters?String(r.delimiters)+n:n;if(e[o])return e[o];var a=t(n,r),s={},u=[];return s.render=wa(a.render,u),s.staticRenderFns=a.staticRenderFns.map(function(t){return wa(t,u)}),e[o]=s}}(e)}})(zo).compileToFunctions;function Sa(t){return(Ca=Ca||document.createElement("div")).innerHTML=t?'<a href="\n"/>':'<div a="\n"/>',Ca.innerHTML.indexOf("&#10;")>0}var Ia=!!H&&Sa(!1),Na=!!H&&Sa(!0),Aa=w(function(t){var e=Bn(t);return e&&e.innerHTML}),Oa=fn.prototype.$mount;fn.prototype.$mount=function(t,e){if((t=t&&Bn(t))===document.body||t===document.documentElement)return this;var n=this.$options;if(!n.render){var r=n.template;if(r)if("string"==typeof r)"#"===r.charAt(0)&&(r=Aa(r));else{if(!r.nodeType)return this;r=r.innerHTML}else t&&(r=function(t){if(t.outerHTML)return t.outerHTML;var e=document.createElement("div");return e.appendChild(t.cloneNode(!0)),e.innerHTML}(t));if(r){0;var i=Ta(r,{shouldDecodeNewlines:Ia,shouldDecodeNewlinesForHref:Na,delimiters:n.delimiters,comments:n.comments},this),o=i.render,a=i.staticRenderFns;n.render=o,n.staticRenderFns=a}}return Oa.call(this,t,e)},fn.compile=Ta,e.a=fn}).call(this,n(5),n(8).setImmediate)},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,c=[],l=!1,h=-1;function f(){l&&u&&(l=!1,u.length?c=u.concat(c):h=-1,c.length&&p())}function p(){if(!l){var t=s(f);l=!0;for(var e=c.length;e;){for(u=c,c=[];++h<e;)u&&u[h].run();h=-1,e=c.length}u=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function v(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new d(t,e)),1!==c.length||l||s(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){(function(t){var r=Function.prototype.apply;function i(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new i(r.call(setTimeout,window,arguments),clearTimeout)},e.setInterval=function(){return new i(r.call(setInterval,window,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(window,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(35),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(5))},function(t,e,n){"use strict";n.r(e);var r=n(6),i={name:"add-role",props:["tab_id"],data:function(){return{message:"this is add role component",role_name:"",role_details:{STR:0,MAG:0,DEX:0,SPD:0,CON:0,AR:0,Resist:0},radio_role:"unknow",role_table:{0:"Warrior",1:"Mage",2:"Musketeer",3:"Barbarian",4:"Clergy",5:"Stalker"},role_info:{character:0,attr:{STR:0,MAG:0,DEX:0,SPD:0,CON:0,AR:0,Resist:0}}}},mounted:function(){console.log("add-roles.vue mounted.")},methods:{confirm_add:function(){this.role_info.character=this.role_table[this.radio_role],this.role_info.attr=this.role_details,console.log("this.role_info = ",this.role_info),console.log("this.tab_id= ",this.tab_id),console.log("this.role_name= ",this.role_name),this.$parent.$emit("role_submit",this.role_info,this.tab_id,this.role_name),this.$parent.$off(["role_submit"])}}},o=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"modal fade",attrs:{id:"add_role_modal",role:"dialog"}},[n("div",{staticClass:"modal-dialog"},[n("div",{staticClass:"modal-content"},[t._m(0),n("div",{staticClass:"add-role-modal-body modal-body"},[n("div",{staticClass:"col"},[n("div",{staticClass:"row-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.role_name,expression:"role_name"}],attrs:{placeholder:"Enter role name"},domProps:{value:t.role_name},on:{input:function(e){e.target.composing||(t.role_name=e.target.value)}}})]),n("div",{staticClass:"row-2 btn-group btn-group-toggle role-options"},[n("div",{staticClass:"btn-group-vertical btn-group-toggle"},[n("label",{staticClass:"btn btn-success"},[t._v("Warrior"),n("input",{directives:[{name:"model",rawName:"v-model",value:t.radio_role,expression:"radio_role"}],attrs:{type:"radio",name:"char-radio",autocomplete:"off"},domProps:{value:0,checked:t._q(t.radio_role,0)},on:{change:function(e){t.radio_role=0}}})]),n("label",{staticClass:"btn btn-success"},[t._v("Mage"),n("input",{directives:[{name:"model",rawName:"v-model",value:t.radio_role,expression:"radio_role"}],attrs:{type:"radio",name:"char-radio",autocomplete:"off"},domProps:{value:1,checked:t._q(t.radio_role,1)},on:{change:function(e){t.radio_role=1}}})])]),n("div",{staticClass:"btn-group-vertical btn-group-toggle"},[n("label",{staticClass:"btn btn-success"},[t._v("Musketeer"),n("input",{directives:[{name:"model",rawName:"v-model",value:t.radio_role,expression:"radio_role"}],attrs:{type:"radio",name:"char-radio",autocomplete:"off"},domProps:{value:2,checked:t._q(t.radio_role,2)},on:{change:function(e){t.radio_role=2}}})]),n("label",{staticClass:"btn btn-success"},[t._v("Barbarian"),n("input",{directives:[{name:"model",rawName:"v-model",value:t.radio_role,expression:"radio_role"}],attrs:{type:"radio",name:"char-radio",autocomplete:"off"},domProps:{value:3,checked:t._q(t.radio_role,3)},on:{change:function(e){t.radio_role=3}}})])]),n("div",{staticClass:"btn-group-vertical btn-group-toggle"},[n("label",{staticClass:"btn btn-success"},[t._v("Clergy"),n("input",{directives:[{name:"model",rawName:"v-model",value:t.radio_role,expression:"radio_role"}],attrs:{type:"radio",name:"char-radio",autocomplete:"off"},domProps:{value:4,checked:t._q(t.radio_role,4)},on:{change:function(e){t.radio_role=4}}})]),n("label",{staticClass:"btn btn-success"},[t._v("Stalker"),n("input",{directives:[{name:"model",rawName:"v-model",value:t.radio_role,expression:"radio_role"}],attrs:{type:"radio",name:"char-radio",autocomplete:"off"},domProps:{value:5,checked:t._q(t.radio_role,5)},on:{change:function(e){t.radio_role=5}}})])])]),n("div",[t._v("Selected : "),n("span",{staticClass:"select-role"},[t._v(t._s(t.role_table[t.radio_role]))])]),n("hr"),n("div",{staticClass:"row-2"},[n("div",{staticClass:"row"},[n("div",{staticClass:"col-sm-2"},[t._v("STR:")]),n("div",{staticClass:"col-sm-10"},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.role_details.STR,expression:"role_details.STR"}],attrs:{placeholder:"Enter value"},domProps:{value:t.role_details.STR},on:{input:function(e){e.target.composing||t.$set(t.role_details,"STR",e.target.value)}}})])]),n("div",{staticClass:"row"},[n("div",{staticClass:"col-sm-2"},[t._v("MAG:")]),n("div",{staticClass:"col-sm-10"},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.role_details.MAG,expression:"role_details.MAG"}],attrs:{placeholder:"Enter value"},domProps:{value:t.role_details.MAG},on:{input:function(e){e.target.composing||t.$set(t.role_details,"MAG",e.target.value)}}})])]),n("div",{staticClass:"row"},[n("div",{staticClass:"col-sm-2"},[t._v("DEX:")]),n("div",{staticClass:"col-sm-10"},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.role_details.DEX,expression:"role_details.DEX"}],attrs:{placeholder:"Enter value"},domProps:{value:t.role_details.DEX},on:{input:function(e){e.target.composing||t.$set(t.role_details,"DEX",e.target.value)}}})])]),n("div",{staticClass:"row"},[n("div",{staticClass:"col-sm-2"},[t._v("SPD:")]),n("div",{staticClass:"col-sm-10"},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.role_details.SPD,expression:"role_details.SPD"}],attrs:{placeholder:"Enter value"},domProps:{value:t.role_details.SPD},on:{input:function(e){e.target.composing||t.$set(t.role_details,"SPD",e.target.value)}}})])]),n("div",{staticClass:"row"},[n("div",{staticClass:"col-sm-2"},[t._v("CON:")]),n("div",{staticClass:"col-sm-10"},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.role_details.CON,expression:"role_details.CON"}],attrs:{placeholder:"Enter value"},domProps:{value:t.role_details.CON},on:{input:function(e){e.target.composing||t.$set(t.role_details,"CON",e.target.value)}}})])]),n("div",{staticClass:"row"},[n("div",{staticClass:"col-sm-2"},[t._v("AR:")]),n("div",{staticClass:"col-sm-10"},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.role_details.AR,expression:"role_details.AR"}],attrs:{placeholder:"Enter value"},domProps:{value:t.role_details.AR},on:{input:function(e){e.target.composing||t.$set(t.role_details,"AR",e.target.value)}}})])]),n("div",{staticClass:"row"},[n("div",{staticClass:"col-sm-2"},[t._v("Resist:")]),n("div",{staticClass:"col-sm-10"},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.role_details.Resist,expression:"role_details.Resist"}],attrs:{placeholder:"Enter value"},domProps:{value:t.role_details.Resist},on:{input:function(e){e.target.composing||t.$set(t.role_details,"Resist",e.target.value)}}})])])]),n("span",[t._v("name: "+t._s(t.role_name))])])]),n("div",{staticClass:"modal-footer"},[n("button",{staticClass:"btn btn-default",attrs:{type:"button","data-dismiss":"modal"},on:{click:t.confirm_add}},[t._v("Add")]),n("button",{staticClass:"btn btn-default",attrs:{type:"button","data-dismiss":"modal"}},[t._v("Close")])])])])])};function a(t,e,n,r,i,o,a,s){var u=typeof(t=t||{}).default;"object"!==u&&"function"!==u||(t=t.default);var c,l="function"==typeof t?t.options:t;if(e&&(l.render=e,l.staticRenderFns=n,l._compiled=!0),r&&(l.functional=!0),o&&(l._scopeId=o),a?(c=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),i&&i.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},l._ssrRegister=c):i&&(c=s?function(){i.call(this,this.$root.$options.shadowRoot)}:i),c)if(l.functional){l._injectStyles=c;var h=l.render;l.render=function(t,e){return c.call(e),h(t,e)}}else{var f=l.beforeCreate;l.beforeCreate=f?[].concat(f,c):[c]}return{exports:t,options:l}}o._withStripped=!0;var s=!1;var u=a(i,o,[function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"modal-header"},[e("h1",{staticClass:"modal-title"},[this._v("create role")])])}],!1,function(t){s||n(30)},null,null);u.options.__file="frontend\\main_tabs\\tabs\\utils\\addRole.vue";var c=u.exports,l={name:"role-tab-contents",props:["tab_content_list"],data:function(){return{content_list:[]}},mounted:function(){this.content_list=this.tab_content_list,console.log("get content_list = ",this.content_list)},methods:{}},h=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"tab-content role-sub-content"},t._l(t.content_list,function(e){return n("div",{staticClass:"tab-pane fade show",attrs:{id:e[0],role:"tabpanel","aria-labelledby":"index-tab-tab"}},[t._v(t._s(e[1]))])}))};h._withStripped=!0;var f=!1;var p=a(l,h,[],!1,function(t){f||n(28)},null,null);p.options.__file="frontend\\main_tabs\\tabs\\roleTabContents.vue";var d={name:"roles-tab",components:{AddRole:c,RoleTabContents:p.exports},data:function(){return{message:"this is role component",role_info:{character:0,attr:{STR:0,MAG:0,DEX:0,SPD:0,CON:0,AR:0,Resist:0}},tab_id_list:[],tab_id:"",tab_content_list:[["v-index-tab","index-tab"]]}},mounted:function(){console.log("roles.vue mounted.")},methods:{add_tab:function(t){t.preventDefault(),$(this).hasClass("add-contact")||$(this).tab("show")},add_content:function(t){var e=$(".nav-pills.role-sub-tab").children().length;if(this.tab_id="role_"+e,-1==$.inArray(this.tab_id,this.tab_id_list)){this.tab_id_list.push(this.tab_id),console.log(this.tab_id);var n=this;this.$on("role_submit",function(r,i,o){""==r&&(r=n.role_info),n.role_info=r,console.log("info = ",r),console.log("_tabId = ",i),console.log("role_name = ",o),$(t.target).closest("a").before('<a class="nav-link" data-toggle="pill" role="tab" aria-controls="v-pills-home" href="#role_'+e+'">'+o+"</a>"),console.log("vm.tab_content_list.push(role_name);"),n.tab_content_list.push(["role_"+e,o]),console.log("vm.tab_content_list = ",n.tab_content_list),$(".nav-pills.role-sub-tab a:nth-child("+e+")").click();var a=n.tab_id_list.indexOf(i);-1!==a&&n.tab_id_list.splice(a,1)})}},refresh:function(){}}},v=function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"row"},[e("div",{staticClass:"col-3"},[e("div",{staticClass:"nav flex-column nav-pills role-sub-tab",attrs:{role:"tablist","aria-orientation":"vertical"}},[e("a",{staticClass:"nav-link active",attrs:{id:"v-pills-home-tab","data-toggle":"pill",href:"#v-index-tab",role:"tab","aria-controls":"index-tab","aria-selected":"true"}},[this._v("first tab")]),e("a",{staticClass:"nav-link btn btn-info",attrs:{id:"v-pills-home-tab",role:"tab","data-target":"#add_role_modal","data-toggle":"modal",type:"button"},on:{click:this.add_content}},[this._v("add")])])]),e("div",{staticClass:"col-9"},[e("role-tab-contents",{attrs:{tab_content_list:this.tab_content_list}})],1),e("add-role",{attrs:{tab_id:this.tab_id}})],1)};v._withStripped=!0;var y=!1;var _=a(d,v,[],!1,function(t){y||n(32)},null,null);_.options.__file="frontend\\main_tabs\\tabs\\roles.vue";var g=_.exports,m={name:"items-tab",data:function(){return{message:"this is items component"}},mounted:function(){console.log("items.vue mounted.")}},b=function(){var t=this.$createElement;return(this._self._c||t)("div",[this._v(this._s(this.message))])};b._withStripped=!0;var w=!1;var E=a(m,b,[],!1,function(t){w||n(26)},null,null);E.options.__file="frontend\\main_tabs\\tabs\\items.vue";var C=E.exports,T={name:"dungeons-tab",data:function(){return{message:"this is dungeons component"}},mounted:function(){console.log("dungeons.vue mounted.")}},S=function(){var t=this.$createElement;return(this._self._c||t)("div",[this._v(this._s(this.message))])};S._withStripped=!0;var I=!1;var N=a(T,S,[],!1,function(t){I||n(24)},null,null);N.options.__file="frontend\\main_tabs\\tabs\\dungeons.vue";var A={components:{RolesTab:g,ItemsTab:C,DungeonsTab:N.exports},data:function(){return{message:"Helo, Vue.js 2.0"}}},O=function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"floater"},[e("div",{staticClass:"role-content"},[this._m(0),e("div",{staticClass:"tab-content"},[e("div",{staticClass:"tab-pane fade show active",attrs:{id:"pills-roles",role:"tabpanel","aria-labelledby":"pills-roles-tab"}},[e("roles-tab")],1),e("div",{staticClass:"tab-pane fade show",attrs:{id:"pills-items",role:"tabpanel","aria-labelledby":"pills-items-tab"}},[e("items-tab")],1),e("div",{staticClass:"tab-pane fade show",attrs:{id:"pills-dungeons",role:"tabpanel","aria-labelledby":"pills-dungeons-tab"}},[e("dungeons-tab")],1)])])])};O._withStripped=!0;var k=!1;var R=a(A,O,[function(){var t=this.$createElement,e=this._self._c||t;return e("ul",{staticClass:"nav nav-pills mb-3 nav-justified",attrs:{role:"tablist"}},[e("li",{staticClass:"nav-item"},[e("a",{staticClass:"nav-link active",attrs:{"data-toggle":"pill",role:"tab",href:"#pills-roles","aria-controls":"pills-roles","aria-selected":"true"}},[this._v("Roles")])]),e("li",{staticClass:"nav-item"},[e("a",{staticClass:"nav-link",attrs:{"data-toggle":"pill",role:"tab",href:"#pills-items","aria-controls":"pills-items","aria-selected":"false"}},[this._v("Items")])]),e("li",{staticClass:"nav-item"},[e("a",{staticClass:"nav-link",attrs:{"data-toggle":"pill",role:"tab",href:"#pills-dungeons","aria-controls":"pills-dungeons","aria-selected":"false"}},[this._v("Dungeons")])])])}],!1,function(t){k||n(34)},null,null);R.options.__file="frontend\\main_tabs\\mainTabs.vue";var P=R.exports;n(22);new r.a({el:"#main-tabs",render:function(t){return t(P)}})},function(t,e,n){"use strict";n.r(e),n.d(e,"registerStorage",function(){return Vt});var r=n(2),i="https://firebasestorage.googleapis.com",o="https://firebasestorage.googleapis.com",a="/v0",s="/v0",u=12e4,c=6e4,l=-9007199254740991,h=function(){function t(t,e){this.code_=p(t),this.message_="Firebase Storage: "+e,this.serverResponse_=null,this.name_="FirebaseError"}return t.prototype.codeProp=function(){return this.code},t.prototype.codeEquals=function(t){return p(t)===this.codeProp()},t.prototype.serverResponseProp=function(){return this.serverResponse_},t.prototype.setServerResponseProp=function(t){this.serverResponse_=t},Object.defineProperty(t.prototype,"name",{get:function(){return this.name_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"code",{get:function(){return this.code_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"message",{get:function(){return this.message_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"serverResponse",{get:function(){return this.serverResponse_},enumerable:!0,configurable:!0}),t}(),f={UNKNOWN:"unknown",OBJECT_NOT_FOUND:"object-not-found",BUCKET_NOT_FOUND:"bucket-not-found",PROJECT_NOT_FOUND:"project-not-found",QUOTA_EXCEEDED:"quota-exceeded",UNAUTHENTICATED:"unauthenticated",UNAUTHORIZED:"unauthorized",RETRY_LIMIT_EXCEEDED:"retry-limit-exceeded",INVALID_CHECKSUM:"invalid-checksum",CANCELED:"canceled",INVALID_EVENT_NAME:"invalid-event-name",INVALID_URL:"invalid-url",INVALID_DEFAULT_BUCKET:"invalid-default-bucket",NO_DEFAULT_BUCKET:"no-default-bucket",CANNOT_SLICE_BLOB:"cannot-slice-blob",SERVER_FILE_WRONG_SIZE:"server-file-wrong-size",NO_DOWNLOAD_URL:"no-download-url",INVALID_ARGUMENT:"invalid-argument",INVALID_ARGUMENT_COUNT:"invalid-argument-count",APP_DELETED:"app-deleted",INVALID_ROOT_OPERATION:"invalid-root-operation",INVALID_FORMAT:"invalid-format",INTERNAL_ERROR:"internal-error"};function p(t){return"storage/"+t}function d(){return new h(f.UNKNOWN,"An unknown error occurred, please check the error payload for server response.")}function v(){return new h(f.CANCELED,"User canceled the upload/download.")}function y(){return new h(f.CANNOT_SLICE_BLOB,"Cannot slice blob for upload. Please retry the upload.")}function _(t,e,n){return new h(f.INVALID_ARGUMENT,"Invalid argument in `"+e+"` at index "+t+": "+n)}function g(){return new h(f.APP_DELETED,"The Firebase app was deleted.")}function m(t,e){return new h(f.INVALID_FORMAT,"String does not match format '"+t+"': "+e)}function b(t){throw new h(f.INTERNAL_ERROR,"Internal error: "+t)}var w={RAW:"raw",BASE64:"base64",BASE64URL:"base64url",DATA_URL:"data_url"};function E(t){switch(t){case w.RAW:case w.BASE64:case w.BASE64URL:case w.DATA_URL:return;default:throw"Expected one of the event types: ["+w.RAW+", "+w.BASE64+", "+w.BASE64URL+", "+w.DATA_URL+"]."}}var C=function(){return function(t,e){this.data=t,this.contentType=e||null}}();function T(t,e){switch(t){case w.RAW:return new C(S(e));case w.BASE64:case w.BASE64URL:return new C(I(t,e));case w.DATA_URL:return new C(function(t){var e=new N(t);return e.base64?I(w.BASE64,e.rest):function(t){var e;try{e=decodeURIComponent(t)}catch(t){throw m(w.DATA_URL,"Malformed data URL.")}return S(e)}(e.rest)}(e),function(t){return new N(t).contentType}(e))}throw d()}function S(t){for(var e=[],n=0;n<t.length;n++){var r=t.charCodeAt(n);if(r<=127)e.push(r);else if(r<=2047)e.push(192|r>>6,128|63&r);else if(55296==(64512&r))if(n<t.length-1&&56320==(64512&t.charCodeAt(n+1)))r=65536|(1023&r)<<10|1023&t.charCodeAt(++n),e.push(240|r>>18,128|r>>12&63,128|r>>6&63,128|63&r);else e.push(239,191,189);else 56320==(64512&r)?e.push(239,191,189):e.push(224|r>>12,128|r>>6&63,128|63&r)}return new Uint8Array(e)}function I(t,e){switch(t){case w.BASE64:var n=-1!==e.indexOf("-"),r=-1!==e.indexOf("_");if(n||r)throw m(t,"Invalid character '"+(n?"-":"_")+"' found: is it base64url encoded?");break;case w.BASE64URL:var i=-1!==e.indexOf("+"),o=-1!==e.indexOf("/");if(i||o)throw m(t,"Invalid character '"+(i?"+":"/")+"' found: is it base64 encoded?");e=e.replace(/-/g,"+").replace(/_/g,"/")}var a;try{a=atob(e)}catch(e){throw m(t,"Invalid character found")}for(var s=new Uint8Array(a.length),u=0;u<a.length;u++)s[u]=a.charCodeAt(u);return s}var N=function(){return function(t){this.base64=!1,this.contentType=null;var e=t.match(/^data:([^,]+)?,/);if(null===e)throw m(w.DATA_URL,"Must be formatted 'data:[<mediatype>][;base64],<data>");var n=e[1]||null;null!=n&&(this.base64=(r=n,i=";base64",r.length>=i.length&&r.substring(r.length-i.length)===i),this.contentType=this.base64?n.substring(0,n.length-";base64".length):n),this.rest=t.substring(t.indexOf(",")+1);var r,i}}();var A,O={STATE_CHANGED:"state_changed"},k={RUNNING:"running",PAUSING:"pausing",PAUSED:"paused",SUCCESS:"success",CANCELING:"canceling",CANCELED:"canceled",ERROR:"error"},R={RUNNING:"running",PAUSED:"paused",SUCCESS:"success",CANCELED:"canceled",ERROR:"error"};function P(t){switch(t){case k.RUNNING:case k.PAUSING:case k.CANCELING:return R.RUNNING;case k.PAUSED:return R.PAUSED;case k.SUCCESS:return R.SUCCESS;case k.CANCELED:return R.CANCELED;case k.ERROR:default:return R.ERROR}}function D(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function x(t,e){for(var n in t)D(t,n)&&e(n,t[n])}function L(t){if(null==t)return{};var e={};return x(t,function(t,n){e[t]=n}),e}function M(t){return new Promise(t)}function F(t){return Promise.resolve(t)}function U(t){return null!=t}function j(t){return void 0!==t}function B(t){return"function"==typeof t}function W(t){return"object"==typeof t}function V(t){return W(t)&&null!==t}function $(t){return"string"==typeof t||t instanceof String}function q(t){return H()&&t instanceof Blob}function H(){return"undefined"!=typeof Blob}!function(t){t[t.NO_ERROR=0]="NO_ERROR",t[t.NETWORK_ERROR=1]="NETWORK_ERROR",t[t.ABORT=2]="ABORT"}(A||(A={}));var K=function(){function t(){var t=this;this.sent_=!1,this.xhr_=new XMLHttpRequest,this.errorCode_=A.NO_ERROR,this.sendPromise_=M(function(e,n){t.xhr_.addEventListener("abort",function(n){t.errorCode_=A.ABORT,e(t)}),t.xhr_.addEventListener("error",function(n){t.errorCode_=A.NETWORK_ERROR,e(t)}),t.xhr_.addEventListener("load",function(n){e(t)})})}return t.prototype.send=function(t,e,n,r){var i=this;if(this.sent_)throw b("cannot .send() more than once");(this.sent_=!0,this.xhr_.open(e,t,!0),U(r))&&x(r,function(t,e){i.xhr_.setRequestHeader(t,e.toString())});return U(n)?this.xhr_.send(n):this.xhr_.send(),this.sendPromise_},t.prototype.getErrorCode=function(){if(!this.sent_)throw b("cannot .getErrorCode() before sending");return this.errorCode_},t.prototype.getStatus=function(){if(!this.sent_)throw b("cannot .getStatus() before sending");try{return this.xhr_.status}catch(t){return-1}},t.prototype.getResponseText=function(){if(!this.sent_)throw b("cannot .getResponseText() before sending");return this.xhr_.responseText},t.prototype.abort=function(){this.xhr_.abort()},t.prototype.getResponseHeader=function(t){return this.xhr_.getResponseHeader(t)},t.prototype.addUploadProgressListener=function(t){U(this.xhr_.upload)&&this.xhr_.upload.addEventListener("progress",t)},t.prototype.removeUploadProgressListener=function(t){U(this.xhr_.upload)&&this.xhr_.upload.removeEventListener("progress",t)},t}(),G=function(){function t(){}return t.prototype.createXhrIo=function(){return new K},t}();function Q(t){var e,n;try{e=JSON.parse(t)}catch(t){return null}return W(n=e)&&!Array.isArray(n)?e:null}var z=function(){function t(t,e){this.bucket=t,this.path_=e}return Object.defineProperty(t.prototype,"path",{get:function(){return this.path_},enumerable:!0,configurable:!0}),t.prototype.fullServerUrl=function(){var t=encodeURIComponent;return"/b/"+t(this.bucket)+"/o/"+t(this.path)},t.prototype.bucketOnlyServerUrl=function(){return"/b/"+encodeURIComponent(this.bucket)+"/o"},t.makeFromBucketSpec=function(e){var n,r;try{n=t.makeFromUrl(e)}catch(n){return new t(e,"")}if(""===n.path)return n;throw r=e,new h(f.INVALID_DEFAULT_BUCKET,"Invalid default bucket '"+r+"'.")},t.makeFromUrl=function(e){var n=null;for(var r=[{regex:new RegExp("^gs://([A-Za-z0-9.\\-]+)(/(.*))?$","i"),indices:{bucket:1,path:3},postModify:function(t){"/"===t.path.charAt(t.path.length-1)&&(t.path_=t.path_.slice(0,-1))}},{regex:new RegExp("^https?://firebasestorage\\.googleapis\\.com/v[A-Za-z0-9_]+/b/([A-Za-z0-9.\\-]+)/o(/([^?#]*).*)?$","i"),indices:{bucket:1,path:3},postModify:function(t){t.path_=decodeURIComponent(t.path)}}],i=0;i<r.length;i++){var o=r[i],a=o.regex.exec(e);if(a){var s=a[o.indices.bucket],u=a[o.indices.path];u||(u=""),n=new t(s,u),o.postModify(n);break}}if(null==n)throw function(t){return new h(f.INVALID_URL,"Invalid URL '"+t+"'.")}(e);return n},t}();function X(t){var e=t.lastIndexOf("/",t.length-2);return-1===e?t:t.slice(e+1)}function Y(t){return i+a+t}function J(t){return i+s+t}function Z(t){var e=encodeURIComponent,n="?";return x(t,function(t,r){var i=e(t)+"="+e(r);n=n+i+"&"}),n=n.slice(0,-1)}function tt(t,e){return e}var et=function(){return function(t,e,n,r){this.server=t,this.local=e||t,this.writable=!!n,this.xform=r||tt}}(),nt=null;function rt(){if(nt)return nt;var t=[];t.push(new et("bucket")),t.push(new et("generation")),t.push(new et("metageneration")),t.push(new et("name","fullPath",!0));var e=new et("name");e.xform=function(t,e){return function(t){return!$(t)||t.length<2?t:X(t=t)}(e)},t.push(e);var n=new et("size");return n.xform=function(t,e){return U(e)?+e:e},t.push(n),t.push(new et("timeCreated")),t.push(new et("updated")),t.push(new et("md5Hash",null,!0)),t.push(new et("cacheControl",null,!0)),t.push(new et("contentDisposition",null,!0)),t.push(new et("contentEncoding",null,!0)),t.push(new et("contentLanguage",null,!0)),t.push(new et("contentType",null,!0)),t.push(new et("metadata","customMetadata",!0)),t.push(new et("downloadTokens","downloadURLs",!1,function(t,e){if(!($(e)&&e.length>0))return[];var n=encodeURIComponent;return e.split(",").map(function(e){var r=t.bucket,i=t.fullPath;return function(t){return o+a+t}("/b/"+n(r)+"/o/"+n(i))+Z({alt:"media",token:e})})})),nt=t}function it(t,e,n){for(var r={type:"file"},i=n.length,o=0;o<i;o++){var a=n[o];r[a.local]=a.xform(r,e[a.server])}return function(t,e){Object.defineProperty(t,"ref",{get:function(){var n=t.bucket,r=t.fullPath,i=new z(n,r);return e.makeStorageReference(i)}})}(r,t),r}function ot(t,e){for(var n={},r=e.length,i=0;i<r;i++){var o=e[i];o.writable&&(n[o.server]=t[o.local])}return JSON.stringify(n)}function at(t){if(!(t&&W(t)))throw"Expected Metadata object.";for(var e in t){var n=t[e];if("customMetadata"===e){if(!W(n))throw"Expected object for 'customMetadata' mapping."}else if(V(n))throw"Mapping for '"+e+"' cannot be an object."}}function st(t,e,n){for(var r=e.length,i=e.length,o=0;o<e.length;o++)if(e[o].optional){r=o;break}var a,s,u,c,l,p;if(!(r<=n.length&&n.length<=i))throw a=r,s=i,u=t,c=n.length,a===s?(l=a,p=1===a?"argument":"arguments"):(l="between "+a+" and "+s,p="arguments"),new h(f.INVALID_ARGUMENT_COUNT,"Invalid argument count in `"+u+"`: Expected "+l+" "+p+", received "+c+".");for(o=0;o<n.length;o++)try{e[o].validator(n[o])}catch(e){throw e instanceof Error?_(o,t,e.message):_(o,t,e)}}var ut=function(){return function(t,e){var n=this;this.validator=function(e){n.optional&&!j(e)||t(e)},this.optional=!!e}}();function ct(t,e){function n(t){if(!$(t))throw"Expected string."}var r,i,o;return t?(i=n,o=t,r=function(t){i(t),o(t)}):r=n,new ut(r,e)}function lt(t){return new ut(at,t)}function ht(){return new ut(function(t){if(!(function(t){return"number"==typeof t||t instanceof Number}(t)&&t>=0))throw"Expected a number 0 or greater."})}function ft(t,e){return new ut(function(e){if(!(null===e||U(e)&&e instanceof Object))throw"Expected an Object.";void 0!==t&&null!==t&&t(e)},e)}function pt(t){return new ut(function(t){if(null!==t&&!B(t))throw"Expected a Function."},t)}function dt(){return"undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:void 0}var vt=function(){function t(t,e){var n=0,r="";q(t)?(this.data_=t,n=t.size,r=t.type):t instanceof ArrayBuffer?(e?this.data_=new Uint8Array(t):(this.data_=new Uint8Array(t.byteLength),this.data_.set(new Uint8Array(t))),n=this.data_.length):t instanceof Uint8Array&&(e?this.data_=t:(this.data_=new Uint8Array(t.length),this.data_.set(t)),n=t.length),this.size_=n,this.type_=r}return t.prototype.size=function(){return this.size_},t.prototype.type=function(){return this.type_},t.prototype.slice=function(e,n){if(q(this.data_)){var r=this.data_,i=(a=e,s=n,(o=r).webkitSlice?o.webkitSlice(a,s):o.mozSlice?o.mozSlice(a,s):o.slice?o.slice(a,s):null);return null===i?null:new t(i)}var o,a,s;return new t(new Uint8Array(this.data_.buffer,e,n-e),!0)},t.getBlob=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];if(H()){var r=e.map(function(e){return e instanceof t?e.data_:e});return new t(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=dt();if(void 0!==n){for(var r=new n,i=0;i<t.length;i++)r.append(t[i]);return r.getBlob()}if(H())return new Blob(t);throw Error("This browser doesn't seem to support creating Blobs")}.apply(null,r))}var i=e.map(function(t){return $(t)?T(w.RAW,t).data:t.data_}),o=0;i.forEach(function(t){o+=t.byteLength});var a=new Uint8Array(o),s=0;return i.forEach(function(t){for(var e=0;e<t.length;e++)a[s++]=t[e]}),new t(a,!0)},t.prototype.uploadData=function(){return this.data_},t}();function yt(t,e){return-1!==t.indexOf(e)}var _t=function(){return function(t,e,n,r){this.url=t,this.method=e,this.handler=n,this.timeout=r,this.urlParams={},this.headers={},this.body=null,this.errorHandler=null,this.progressCallback=null,this.successCodes=[200],this.additionalRetryCodes=[]}}();function gt(t){if(!t)throw d()}function mt(t,e){return function(n,r){var i=function(t,e,n){var r=Q(e);return null===r?null:it(t,r,n)}(t,r,e);return gt(null!==i),i}}function bt(t){return function(e,n){var r,i,o;return 401===e.getStatus()?r=new h(f.UNAUTHENTICATED,"User is not authenticated, please authenticate using Firebase Authentication and try again."):402===e.getStatus()?(o=t.bucket,r=new h(f.QUOTA_EXCEEDED,"Quota for bucket '"+o+"' exceeded, please view quota on https://firebase.google.com/pricing/.")):403===e.getStatus()?(i=t.path,r=new h(f.UNAUTHORIZED,"User does not have permission to access '"+i+"'.")):r=n,r.setServerResponseProp(n.serverResponseProp()),r}}function wt(t){var e=bt(t);return function(n,r){var i,o=e(n,r);return 404===n.getStatus()&&(i=t.path,o=new h(f.OBJECT_NOT_FOUND,"Object '"+i+"' does not exist.")),o.setServerResponseProp(r.serverResponseProp()),o}}function Et(t,e,n){var r=Y(e.fullServerUrl()),i=t.maxOperationRetryTime(),o=new _t(r,"GET",mt(t,n),i);return o.errorHandler=wt(e),o}function Ct(t,e,n){var r=L(n);return r.fullPath=t.path,r.size=e.size(),r.contentType||(r.contentType=function(t,e){return t&&t.contentType||e&&e.type()||"application/octet-stream"}(null,e)),r}var Tt=function(){return function(t,e,n,r){this.current=t,this.total=e,this.finalized=!!n,this.metadata=r||null}}();function St(t,e){var n;try{n=t.getResponseHeader("X-Goog-Upload-Status")}catch(t){gt(!1)}return gt(yt(e||["active"],n)),n}function It(t,e,n,r,i,o,a,s){var u=new Tt(0,0);if(a?(u.current=a.current,u.total=a.total):(u.current=0,u.total=r.size()),r.size()!==u.total)throw new h(f.SERVER_FILE_WRONG_SIZE,"Server recorded incorrect upload file size, please retry the upload.");var c=u.total-u.current,l=c;i>0&&(l=Math.min(l,i));var p=u.current,d=p+l,v={"X-Goog-Upload-Command":l===c?"upload, finalize":"upload","X-Goog-Upload-Offset":u.current},_=r.slice(p,d);if(null===_)throw y();var g=e.maxUploadRetryTime(),m=new _t(n,"POST",function(t,n){var i,a=St(t,["active","final"]),s=u.current+l,c=r.size();return i="final"===a?mt(e,o)(t,n):null,new Tt(s,c,"final"===a,i)},g);return m.headers=v,m.body=_.uploadData(),m.progressCallback=s||null,m.errorHandler=bt(t),m}var Nt=function(){return function(t,e,n){if(B(t)||U(e)||U(n))this.next=t,this.error=e||null,this.complete=n||null;else{var r=t;this.next=r.next||null,this.error=r.error||null,this.complete=r.complete||null}}}(),At=function(){function t(t,e,n,r,i,o){this.bytesTransferred=t,this.totalBytes=e,this.state=n,this.metadata=r,this.task=i,this.ref=o}return Object.defineProperty(t.prototype,"downloadURL",{get:function(){if(null!==this.metadata){var t=this.metadata.downloadURLs;return null!=t&&null!=t[0]?t[0]:null}return null},enumerable:!0,configurable:!0}),t}();function Ot(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];F(!0).then(function(){t.apply(null,e)})}}var kt=function(){function t(t,e,n,r,i,o){void 0===o&&(o=null);var a=this;this.transferred_=0,this.needToFetchStatus_=!1,this.needToFetchMetadata_=!1,this.observers_=[],this.error_=null,this.uploadUrl_=null,this.request_=null,this.chunkMultiplier_=1,this.resolve_=null,this.reject_=null,this.ref_=t,this.authWrapper_=e,this.location_=n,this.blob_=i,this.metadata_=o,this.mappings_=r,this.resumable_=this.shouldDoResumable_(this.blob_),this.state_=k.RUNNING,this.errorHandler_=function(t){a.request_=null,a.chunkMultiplier_=1,t.codeEquals(f.CANCELED)?(a.needToFetchStatus_=!0,a.completeTransitions_()):(a.error_=t,a.transition_(k.ERROR))},this.metadataErrorHandler_=function(t){a.request_=null,t.codeEquals(f.CANCELED)?a.completeTransitions_():(a.error_=t,a.transition_(k.ERROR))},this.promise_=M(function(t,e){a.resolve_=t,a.reject_=e,a.start_()}),this.promise_.then(null,function(){})}return t.prototype.makeProgressCallback_=function(){var t=this,e=this.transferred_;return function(n,r){t.updateProgress_(e+n)}},t.prototype.shouldDoResumable_=function(t){return t.size()>262144},t.prototype.start_=function(){this.state_===k.RUNNING&&null===this.request_&&(this.resumable_?null===this.uploadUrl_?this.createResumable_():this.needToFetchStatus_?this.fetchStatus_():this.needToFetchMetadata_?this.fetchMetadata_():this.continueUpload_():this.oneShotUpload_())},t.prototype.resolveToken_=function(t){var e=this;this.authWrapper_.getAuthToken().then(function(n){switch(e.state_){case k.RUNNING:t(n);break;case k.CANCELING:e.transition_(k.CANCELED);break;case k.PAUSING:e.transition_(k.PAUSED)}})},t.prototype.createResumable_=function(){var t=this;this.resolveToken_(function(e){var n=function(t,e,n,r,i){var o=e.bucketOnlyServerUrl(),a=Ct(e,r,i),s={name:a.fullPath},u=J(o),c={"X-Goog-Upload-Protocol":"resumable","X-Goog-Upload-Command":"start","X-Goog-Upload-Header-Content-Length":r.size(),"X-Goog-Upload-Header-Content-Type":a.contentType,"Content-Type":"application/json; charset=utf-8"},l=ot(a,n),h=t.maxUploadRetryTime(),f=new _t(u,"POST",function(t,e){var n;St(t);try{n=t.getResponseHeader("X-Goog-Upload-URL")}catch(t){gt(!1)}return gt($(n)),n},h);return f.urlParams=s,f.headers=c,f.body=l,f.errorHandler=bt(e),f}(t.authWrapper_,t.location_,t.mappings_,t.blob_,t.metadata_),r=t.authWrapper_.makeRequest(n,e);t.request_=r,r.getPromise().then(function(e){t.request_=null,t.uploadUrl_=e,t.needToFetchStatus_=!1,t.completeTransitions_()},t.errorHandler_)})},t.prototype.fetchStatus_=function(){var t=this,e=this.uploadUrl_;this.resolveToken_(function(n){var r=function(t,e,n,r){var i=t.maxUploadRetryTime(),o=new _t(n,"POST",function(t,e){var n,i=St(t,["active","final"]);try{n=t.getResponseHeader("X-Goog-Upload-Size-Received")}catch(t){gt(!1)}var o=parseInt(n,10);return gt(!isNaN(o)),new Tt(o,r.size(),"final"===i)},i);return o.headers={"X-Goog-Upload-Command":"query"},o.errorHandler=bt(e),o}(t.authWrapper_,t.location_,e,t.blob_),i=t.authWrapper_.makeRequest(r,n);t.request_=i,i.getPromise().then(function(e){e=e,t.request_=null,t.updateProgress_(e.current),t.needToFetchStatus_=!1,e.finalized&&(t.needToFetchMetadata_=!0),t.completeTransitions_()},t.errorHandler_)})},t.prototype.continueUpload_=function(){var t=this,e=262144*this.chunkMultiplier_,n=new Tt(this.transferred_,this.blob_.size()),r=this.uploadUrl_;this.resolveToken_(function(i){var o;try{o=It(t.location_,t.authWrapper_,r,t.blob_,e,t.mappings_,n,t.makeProgressCallback_())}catch(e){return t.error_=e,void t.transition_(k.ERROR)}var a=t.authWrapper_.makeRequest(o,i);t.request_=a,a.getPromise().then(function(e){t.increaseMultiplier_(),t.request_=null,t.updateProgress_(e.current),e.finalized?(t.metadata_=e.metadata,t.transition_(k.SUCCESS)):t.completeTransitions_()},t.errorHandler_)})},t.prototype.increaseMultiplier_=function(){262144*this.chunkMultiplier_<33554432&&(this.chunkMultiplier_*=2)},t.prototype.fetchMetadata_=function(){var t=this;this.resolveToken_(function(e){var n=Et(t.authWrapper_,t.location_,t.mappings_),r=t.authWrapper_.makeRequest(n,e);t.request_=r,r.getPromise().then(function(e){t.request_=null,t.metadata_=e,t.transition_(k.SUCCESS)},t.metadataErrorHandler_)})},t.prototype.oneShotUpload_=function(){var t=this;this.resolveToken_(function(e){var n=function(t,e,n,r,i){var o=e.bucketOnlyServerUrl(),a={"X-Goog-Upload-Protocol":"multipart"},s=function(){for(var t="",e=0;e<2;e++)t+=Math.random().toString().slice(2);return t}();a["Content-Type"]="multipart/related; boundary="+s;var u=Ct(e,r,i),c="--"+s+"\r\nContent-Type: application/json; charset=utf-8\r\n\r\n"+ot(u,n)+"\r\n--"+s+"\r\nContent-Type: "+u.contentType+"\r\n\r\n",l="\r\n--"+s+"--",h=vt.getBlob(c,r,l);if(null===h)throw y();var f={name:u.fullPath},p=J(o),d=t.maxUploadRetryTime(),v=new _t(p,"POST",mt(t,n),d);return v.urlParams=f,v.headers=a,v.body=h.uploadData(),v.errorHandler=bt(e),v}(t.authWrapper_,t.location_,t.mappings_,t.blob_,t.metadata_),r=t.authWrapper_.makeRequest(n,e);t.request_=r,r.getPromise().then(function(e){t.request_=null,t.metadata_=e,t.updateProgress_(t.blob_.size()),t.transition_(k.SUCCESS)},t.errorHandler_)})},t.prototype.updateProgress_=function(t){var e=this.transferred_;this.transferred_=t,this.transferred_!==e&&this.notifyObservers_()},t.prototype.transition_=function(t){if(this.state_!==t)switch(t){case k.CANCELING:case k.PAUSING:this.state_=t,null!==this.request_&&this.request_.cancel();break;case k.RUNNING:var e=this.state_===k.PAUSED;this.state_=t,e&&(this.notifyObservers_(),this.start_());break;case k.PAUSED:this.state_=t,this.notifyObservers_();break;case k.CANCELED:this.error_=v(),this.state_=t,this.notifyObservers_();break;case k.ERROR:case k.SUCCESS:this.state_=t,this.notifyObservers_()}},t.prototype.completeTransitions_=function(){switch(this.state_){case k.PAUSING:this.transition_(k.PAUSED);break;case k.CANCELING:this.transition_(k.CANCELED);break;case k.RUNNING:this.start_()}},Object.defineProperty(t.prototype,"snapshot",{get:function(){var t=P(this.state_);return new At(this.transferred_,this.blob_.size(),t,this.metadata_,this,this.ref_)},enumerable:!0,configurable:!0}),t.prototype.on=function(t,e,n,r){void 0===e&&(e=void 0),void 0===n&&(n=void 0),void 0===r&&(r=void 0);var i="Expected a function or an Object with one of `next`, `error`, `complete` properties.",o=pt(!0).validator,a=ft(null,!0).validator;function s(t){try{return void o(t)}catch(t){}try{if(a(t),!(j(t.next)||j(t.error)||j(t.complete)))throw"";return}catch(t){throw i}}st("on",[ct(function(e){if(t!==O.STATE_CHANGED)throw"Expected one of the event types: ["+O.STATE_CHANGED+"]."}),ft(s,!0),pt(!0),pt(!0)],arguments);var u=this;function c(t){return function(e,n,i){null!==t&&st("on",t,arguments);var o=new Nt(e,n,r);return u.addObserver_(o),function(){u.removeObserver_(o)}}}var l=[ft(function(t){if(null===t)throw i;s(t)}),pt(!0),pt(!0)];return!(j(e)||j(n)||j(r))?c(l):c(null)(e,n,r)},t.prototype.then=function(t,e){return this.promise_.then(t,e)},t.prototype.catch=function(t){return this.then(null,t)},t.prototype.addObserver_=function(t){this.observers_.push(t),this.notifyObserver_(t)},t.prototype.removeObserver_=function(t){var e,n,r;e=this.observers_,n=t,-1!==(r=e.indexOf(n))&&e.splice(r,1)},t.prototype.notifyObservers_=function(){var t,e=this;this.finishPromise_(),(t=this.observers_,Array.prototype.slice.call(t)).forEach(function(t){e.notifyObserver_(t)})},t.prototype.finishPromise_=function(){if(null!==this.resolve_){var t=!0;switch(P(this.state_)){case R.SUCCESS:Ot(this.resolve_.bind(null,this.snapshot))();break;case R.CANCELED:case R.ERROR:Ot(this.reject_.bind(null,this.error_))();break;default:t=!1}t&&(this.resolve_=null,this.reject_=null)}},t.prototype.notifyObserver_=function(t){switch(P(this.state_)){case R.RUNNING:case R.PAUSED:null!==t.next&&Ot(t.next.bind(t,this.snapshot))();break;case R.SUCCESS:null!==t.complete&&Ot(t.complete.bind(t))();break;case R.CANCELED:case R.ERROR:null!==t.error&&Ot(t.error.bind(t,this.error_))();break;default:null!==t.error&&Ot(t.error.bind(t,this.error_))()}},t.prototype.resume=function(){st("resume",[],arguments);var t=this.state_===k.PAUSED||this.state_===k.PAUSING;return t&&this.transition_(k.RUNNING),t},t.prototype.pause=function(){st("pause",[],arguments);var t=this.state_===k.RUNNING;return t&&this.transition_(k.PAUSING),t},t.prototype.cancel=function(){st("cancel",[],arguments);var t=this.state_===k.RUNNING||this.state_===k.PAUSING;return t&&this.transition_(k.CANCELING),t},t}(),Rt=function(){function t(t,e){this.authWrapper=t,this.location=e instanceof z?e:z.makeFromUrl(e)}return t.prototype.toString=function(){return st("toString",[],arguments),"gs://"+this.location.bucket+"/"+this.location.path},t.prototype.newRef=function(e,n){return new t(e,n)},t.prototype.mappings=function(){return rt()},t.prototype.child=function(t){st("child",[ct()],arguments);var e=function(t,e){var n=e.split("/").filter(function(t){return t.length>0}).join("/");return 0===t.length?n:t+"/"+n}(this.location.path,t),n=new z(this.location.bucket,e);return this.newRef(this.authWrapper,n)},Object.defineProperty(t.prototype,"parent",{get:function(){var t=function(t){if(0==t.length)return null;var e=t.lastIndexOf("/");return-1===e?"":t.slice(0,e)}(this.location.path);if(null===t)return null;var e=new z(this.location.bucket,t);return this.newRef(this.authWrapper,e)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"root",{get:function(){var t=new z(this.location.bucket,"");return this.newRef(this.authWrapper,t)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"bucket",{get:function(){return this.location.bucket},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fullPath",{get:function(){return this.location.path},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return X(this.location.path)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"storage",{get:function(){return this.authWrapper.service()},enumerable:!0,configurable:!0}),t.prototype.put=function(t,e){return void 0===e&&(e=null),st("put",[new ut(function(t){if(!(t instanceof Uint8Array||t instanceof ArrayBuffer||H()&&t instanceof Blob))throw"Expected Blob or File."}),lt(!0)],arguments),this.throwIfRoot_("put"),new kt(this,this.authWrapper,this.location,this.mappings(),new vt(t),e)},t.prototype.putString=function(t,e,n){void 0===e&&(e=w.RAW),st("putString",[ct(),ct(E,!0),lt(!0)],arguments),this.throwIfRoot_("putString");var r=T(e,t),i=L(n);return!U(i.contentType)&&U(r.contentType)&&(i.contentType=r.contentType),new kt(this,this.authWrapper,this.location,this.mappings(),new vt(r.data,!0),i)},t.prototype.delete=function(){st("delete",[],arguments),this.throwIfRoot_("delete");var t=this;return this.authWrapper.getAuthToken().then(function(e){var n=function(t,e){var n=Y(e.fullServerUrl()),r=t.maxOperationRetryTime(),i=new _t(n,"DELETE",function(t,e){},r);return i.successCodes=[200,204],i.errorHandler=wt(e),i}(t.authWrapper,t.location);return t.authWrapper.makeRequest(n,e).getPromise()})},t.prototype.getMetadata=function(){st("getMetadata",[],arguments),this.throwIfRoot_("getMetadata");var t=this;return this.authWrapper.getAuthToken().then(function(e){var n=Et(t.authWrapper,t.location,t.mappings());return t.authWrapper.makeRequest(n,e).getPromise()})},t.prototype.updateMetadata=function(t){st("updateMetadata",[lt()],arguments),this.throwIfRoot_("updateMetadata");var e=this;return this.authWrapper.getAuthToken().then(function(n){var r=function(t,e,n,r){var i=Y(e.fullServerUrl()),o=ot(n,r),a=t.maxOperationRetryTime(),s=new _t(i,"PATCH",mt(t,r),a);return s.headers={"Content-Type":"application/json; charset=utf-8"},s.body=o,s.errorHandler=wt(e),s}(e.authWrapper,e.location,t,e.mappings());return e.authWrapper.makeRequest(r,n).getPromise()})},t.prototype.getDownloadURL=function(){return st("getDownloadURL",[],arguments),this.throwIfRoot_("getDownloadURL"),this.getMetadata().then(function(t){var e=t.downloadURLs[0];if(U(e))return e;throw new h(f.NO_DOWNLOAD_URL,"The given file does not have any download URLs.")})},t.prototype.throwIfRoot_=function(t){if(""===this.location.path)throw function(t){return new h(f.INVALID_ROOT_OPERATION,"The operation '"+t+"' cannot be performed on a root reference, create a non-root reference using child, such as .child('file.png').")}(t)},t}(),Pt=function(){function t(t){this.promise_=function(t){return Promise.reject(t)}(t)}return t.prototype.getPromise=function(){return this.promise_},t.prototype.cancel=function(t){void 0===t&&(t=!1)},t}(),Dt=function(){function t(){this.map_={},this.id_=l}return t.prototype.addRequest=function(t){var e=this.id_;this.id_++,this.map_[e]=t;var n=this;function r(){delete n.map_[e]}t.getPromise().then(r,r)},t.prototype.clear=function(){x(this.map_,function(t,e){e&&e.cancel(!0)}),this.map_={}},t}(),xt=function(){function t(e,n,r,i,o){if(this.bucket_=null,this.deleted_=!1,this.app_=e,null!==this.app_){var a=this.app_.options;U(a)&&(this.bucket_=t.extractBucket_(a))}this.storageRefMaker_=n,this.requestMaker_=r,this.pool_=o,this.service_=i,this.maxOperationRetryTime_=u,this.maxUploadRetryTime_=c,this.requestMap_=new Dt}return t.extractBucket_=function(t){var e=t.storageBucket||null;return null==e?null:z.makeFromBucketSpec(e).bucket},t.prototype.getAuthToken=function(){return null!==this.app_&&U(this.app_.INTERNAL)&&U(this.app_.INTERNAL.getToken)?this.app_.INTERNAL.getToken().then(function(t){return null!==t?t.accessToken:null},function(t){return null}):F(null)},t.prototype.bucket=function(){if(this.deleted_)throw g();return this.bucket_},t.prototype.service=function(){return this.service_},t.prototype.makeStorageReference=function(t){return this.storageRefMaker_(this,t)},t.prototype.makeRequest=function(t,e){if(this.deleted_)return new Pt(g());var n=this.requestMaker_(t,e,this.pool_);return this.requestMap_.addRequest(n),n},t.prototype.deleteApp=function(){this.deleted_=!0,this.app_=null,this.requestMap_.clear()},t.prototype.maxUploadRetryTime=function(){return this.maxUploadRetryTime_},t.prototype.setMaxUploadRetryTime=function(t){this.maxUploadRetryTime_=t},t.prototype.maxOperationRetryTime=function(){return this.maxOperationRetryTime_},t.prototype.setMaxOperationRetryTime=function(t){this.maxOperationRetryTime_=t},t}();var Lt=function(){function t(t,e,n,r,i,o,a,s,u,c,l){this.pendingXhr_=null,this.backoffId_=null,this.resolve_=null,this.reject_=null,this.canceled_=!1,this.appDelete_=!1,this.url_=t,this.method_=e,this.headers_=n,this.body_=r,this.successCodes_=i.slice(),this.additionalRetryCodes_=o.slice(),this.callback_=a,this.errorCallback_=s,this.progressCallback_=c,this.timeout_=u,this.pool_=l;var h=this;this.promise_=M(function(t,e){h.resolve_=t,h.reject_=e,h.start_()})}return t.prototype.start_=function(){var t=this;function e(e,n){var r,i=t.resolve_,o=t.reject_,a=n.xhr;if(n.wasSuccessCode)try{var s=t.callback_(a,a.getResponseText());j(s)?i(s):i()}catch(t){o(t)}else null!==a?((r=d()).setServerResponseProp(a.getResponseText()),t.errorCallback_?o(t.errorCallback_(a,r)):o(r)):n.canceled?o(r=t.appDelete_?g():v()):o(r=new h(f.RETRY_LIMIT_EXCEEDED,"Max retry time for operation exceeded, please try again."))}this.canceled_?e(0,new Mt(!1,null,!0)):this.backoffId_=function(t,e,n){var r=1,i=null,o=!1,a=0;function s(){return 2===a}var u=!1;function c(){u||(u=!0,e.apply(null,arguments))}function l(e){i=setTimeout(function(){i=null,t(h,s())},e)}function h(t){for(var e,n=[],i=1;i<arguments.length;i++)n[i-1]=arguments[i];u||(t?c.apply(null,arguments):s()||o?c.apply(null,arguments):(r<64&&(r*=2),1===a?(a=2,e=0):e=1e3*(r+Math.random()),l(e)))}var f=!1;function p(t){f||(f=!0,u||(null!==i?(t||(a=2),clearTimeout(i),l(0)):t||(a=1)))}return l(0),setTimeout(function(){o=!0,p(!0)},n),p}(function(e,n){if(n)e(!1,new Mt(!1,null,!0));else{var r=t.pool_.createXhrIo();t.pendingXhr_=r,null!==t.progressCallback_&&r.addUploadProgressListener(i),r.send(t.url_,t.method_,t.body_,t.headers_).then(function(n){null!==t.progressCallback_&&n.removeUploadProgressListener(i),t.pendingXhr_=null;var r=(n=n).getErrorCode()===A.NO_ERROR,o=n.getStatus();if(r&&!t.isRetryStatusCode_(o)){var a=yt(t.successCodes_,o);e(!0,new Mt(a,n))}else{var s=n.getErrorCode()===A.ABORT;e(!1,new Mt(!1,null,s))}})}function i(e){var n=e.loaded,r=e.lengthComputable?e.total:-1;null!==t.progressCallback_&&t.progressCallback_(n,r)}},e,this.timeout_)},t.prototype.getPromise=function(){return this.promise_},t.prototype.cancel=function(t){this.canceled_=!0,this.appDelete_=t||!1,null!==this.backoffId_&&(0,this.backoffId_)(!1),null!==this.pendingXhr_&&this.pendingXhr_.abort()},t.prototype.isRetryStatusCode_=function(t){var e=t>=500&&t<600,n=yt([408,429],t),r=yt(this.additionalRetryCodes_,t);return e||n||r},t}(),Mt=function(){return function(t,e,n){this.wasSuccessCode=t,this.xhr=e,this.canceled=!!n}}();function Ft(t,e,n){var i=Z(t.urlParams),o=t.url+i,a=L(t.headers);return function(t,e){null!==e&&e.length>0&&(t.Authorization="Firebase "+e)}(a,e),function(t){var e=void 0!==r.default?r.default.SDK_VERSION:"AppManager";t["X-Firebase-Storage-Version"]="webjs/"+e}(a),new Lt(o,t.method,a,t.body,t.successCodes,t.additionalRetryCodes,t.handler,t.errorHandler,t.timeout,t.progressCallback,n)}var Ut=function(){function t(t,e,n){if(this.bucket_=null,this.authWrapper_=new xt(t,function(t,e){return new Rt(t,e)},Ft,this,e),this.app_=t,null!=n)this.bucket_=z.makeFromBucketSpec(n);else{var r=this.authWrapper_.bucket();null!=r&&(this.bucket_=new z(r,""))}this.internals_=new jt(this)}return t.prototype.ref=function(t){if(st("ref",[ct(function(t){if(/^[A-Za-z]+:\/\//.test(t))throw"Expected child path but got a URL, use refFromURL instead."},!0)],arguments),null==this.bucket_)throw new Error("No Storage Bucket defined in Firebase Options.");var e=new Rt(this.authWrapper_,this.bucket_);return null!=t?e.child(t):e},t.prototype.refFromURL=function(t){return st("refFromURL",[ct(function(t){if(!/^[A-Za-z]+:\/\//.test(t))throw"Expected full URL but got a child path, use ref instead.";try{z.makeFromUrl(t)}catch(t){throw"Expected valid full URL but got an invalid one."}},!1)],arguments),new Rt(this.authWrapper_,t)},Object.defineProperty(t.prototype,"maxUploadRetryTime",{get:function(){return this.authWrapper_.maxUploadRetryTime()},enumerable:!0,configurable:!0}),t.prototype.setMaxUploadRetryTime=function(t){st("setMaxUploadRetryTime",[ht()],arguments),this.authWrapper_.setMaxUploadRetryTime(t)},Object.defineProperty(t.prototype,"maxOperationRetryTime",{get:function(){return this.authWrapper_.maxOperationRetryTime()},enumerable:!0,configurable:!0}),t.prototype.setMaxOperationRetryTime=function(t){st("setMaxOperationRetryTime",[ht()],arguments),this.authWrapper_.setMaxOperationRetryTime(t)},Object.defineProperty(t.prototype,"app",{get:function(){return this.app_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"INTERNAL",{get:function(){return this.internals_},enumerable:!0,configurable:!0}),t}(),jt=function(){function t(t){this.service_=t}return t.prototype.delete=function(){return this.service_.authWrapper_.deleteApp(),F(void 0)},t}(),Bt="storage";function Wt(t,e,n){return new Ut(t,new G,n)}function Vt(t){var e={TaskState:R,TaskEvent:O,StringFormat:w,Storage:Ut,Reference:Rt};t.INTERNAL.registerService(Bt,Wt,e,void 0,!0)}Vt(r.default)},function(t,e,n){n(10)},function(t,e,n){"use strict";n.r(e),n.d(e,"registerMessaging",function(){return R});var r,i,o,a=n(1),s=n(0),u=n(2),c={AVAILABLE_IN_WINDOW:"only-available-in-window",AVAILABLE_IN_SW:"only-available-in-sw",SHOULD_BE_INHERITED:"should-be-overriden",BAD_SENDER_ID:"bad-sender-id",INCORRECT_GCM_SENDER_ID:"incorrect-gcm-sender-id",PERMISSION_DEFAULT:"permission-default",PERMISSION_BLOCKED:"permission-blocked",UNSUPPORTED_BROWSER:"unsupported-browser",NOTIFICATIONS_BLOCKED:"notifications-blocked",FAILED_DEFAULT_REGISTRATION:"failed-serviceworker-registration",SW_REGISTRATION_EXPECTED:"sw-registration-expected",GET_SUBSCRIPTION_FAILED:"get-subscription-failed",INVALID_SAVED_TOKEN:"invalid-saved-token",SW_REG_REDUNDANT:"sw-reg-redundant",TOKEN_SUBSCRIBE_FAILED:"token-subscribe-failed",TOKEN_SUBSCRIBE_NO_TOKEN:"token-subscribe-no-token",TOKEN_SUBSCRIBE_NO_PUSH_SET:"token-subscribe-no-push-set",TOKEN_UNSUBSCRIBE_FAILED:"token-unsubscribe-failed",TOKEN_UPDATE_FAILED:"token-update-failed",TOKEN_UPDATE_NO_TOKEN:"token-update-no-token",USE_SW_BEFORE_GET_TOKEN:"use-sw-before-get-token",INVALID_DELETE_TOKEN:"invalid-delete-token",DELETE_TOKEN_NOT_FOUND:"delete-token-not-found",DELETE_SCOPE_NOT_FOUND:"delete-scope-not-found",BG_HANDLER_FUNCTION_EXPECTED:"bg-handler-function-expected",NO_WINDOW_CLIENT_TO_MSG:"no-window-client-to-msg",UNABLE_TO_RESUBSCRIBE:"unable-to-resubscribe",NO_FCM_TOKEN_FOR_RESUBSCRIBE:"no-fcm-token-for-resubscribe",FAILED_TO_DELETE_TOKEN:"failed-to-delete-token",NO_SW_IN_REG:"no-sw-in-reg",BAD_SCOPE:"bad-scope",BAD_VAPID_KEY:"bad-vapid-key",BAD_SUBSCRIPTION:"bad-subscription",BAD_TOKEN:"bad-token",BAD_PUSH_SET:"bad-push-set",FAILED_DELETE_VAPID_KEY:"failed-delete-vapid-key",INVALID_PUBLIC_VAPID_KEY:"invalid-public-vapid-key",USE_PUBLIC_KEY_BEFORE_GET_TOKEN:"use-public-key-before-get-token",PUBLIC_KEY_DECRYPTION_FAILED:"public-vapid-key-decryption-failed"},l=((r={})[c.AVAILABLE_IN_WINDOW]="This method is available in a Window context.",r[c.AVAILABLE_IN_SW]="This method is available in a service worker context.",r[c.SHOULD_BE_INHERITED]="This method should be overriden by extended classes.",r[c.BAD_SENDER_ID]="Please ensure that 'messagingSenderId' is set correctly in the options passed into firebase.initializeApp().",r[c.PERMISSION_DEFAULT]="The required permissions were not granted and dismissed instead.",r[c.PERMISSION_BLOCKED]="The required permissions were not granted and blocked instead.",r[c.UNSUPPORTED_BROWSER]="This browser doesn't support the API's required to use the firebase SDK.",r[c.NOTIFICATIONS_BLOCKED]="Notifications have been blocked.",r[c.FAILED_DEFAULT_REGISTRATION]="We are unable to register the default service worker. {$browserErrorMessage}",r[c.SW_REGISTRATION_EXPECTED]="A service worker registration was the expected input.",r[c.GET_SUBSCRIPTION_FAILED]="There was an error when trying to get any existing Push Subscriptions.",r[c.INVALID_SAVED_TOKEN]="Unable to access details of the saved token.",r[c.SW_REG_REDUNDANT]="The service worker being used for push was made redundant.",r[c.TOKEN_SUBSCRIBE_FAILED]="A problem occured while subscribing the user to FCM: {$message}",r[c.TOKEN_SUBSCRIBE_NO_TOKEN]="FCM returned no token when subscribing the user to push.",r[c.TOKEN_SUBSCRIBE_NO_PUSH_SET]="FCM returned an invalid response when getting an FCM token.",r[c.TOKEN_UNSUBSCRIBE_FAILED]="A problem occured while unsubscribing the user from FCM: {$message}",r[c.TOKEN_UPDATE_FAILED]="A problem occured while updating the user from FCM: {$message}",r[c.TOKEN_UPDATE_NO_TOKEN]="FCM returned no token when updating the user to push.",r[c.USE_SW_BEFORE_GET_TOKEN]="The useServiceWorker() method may only be called once and must be called before calling getToken() to ensure your service worker is used.",r[c.INVALID_DELETE_TOKEN]="You must pass a valid token into deleteToken(), i.e. the token from getToken().",r[c.DELETE_TOKEN_NOT_FOUND]="The deletion attempt for token could not be performed as the token was not found.",r[c.DELETE_SCOPE_NOT_FOUND]="The deletion attempt for service worker scope could not be performed as the scope was not found.",r[c.BG_HANDLER_FUNCTION_EXPECTED]="The input to setBackgroundMessageHandler() must be a function.",r[c.NO_WINDOW_CLIENT_TO_MSG]="An attempt was made to message a non-existant window client.",r[c.UNABLE_TO_RESUBSCRIBE]="There was an error while re-subscribing the FCM token for push messaging. Will have to resubscribe the user on next visit. {$message}",r[c.NO_FCM_TOKEN_FOR_RESUBSCRIBE]="Could not find an FCM token and as a result, unable to resubscribe. Will have to resubscribe the user on next visit.",r[c.FAILED_TO_DELETE_TOKEN]="Unable to delete the currently saved token.",r[c.NO_SW_IN_REG]="Even though the service worker registration was successful, there was a problem accessing the service worker itself.",r[c.INCORRECT_GCM_SENDER_ID]="Please change your web app manifest's 'gcm_sender_id' value to '103953800507' to use Firebase messaging.",r[c.BAD_SCOPE]="The service worker scope must be a string with at least one character.",r[c.BAD_VAPID_KEY]="The public VAPID key is not a Uint8Array with 65 bytes.",r[c.BAD_SUBSCRIPTION]="The subscription must be a valid PushSubscription.",r[c.BAD_TOKEN]="The FCM Token used for storage / lookup was not a valid token string.",r[c.BAD_PUSH_SET]="The FCM push set used for storage / lookup was not not a valid push set string.",r[c.FAILED_DELETE_VAPID_KEY]="The VAPID key could not be deleted.",r[c.INVALID_PUBLIC_VAPID_KEY]="The public VAPID key must be a string.",r[c.PUBLIC_KEY_DECRYPTION_FAILED]="The public VAPID key did not equal 65 bytes when decrypted.",r),h=new a.ErrorFactory("messaging","Messaging",l),f=new Uint8Array([4,51,148,247,223,161,235,177,220,3,162,94,21,113,219,72,211,46,237,237,178,52,219,183,71,58,12,143,196,204,225,111,60,140,132,223,171,182,102,62,242,12,212,139,254,227,249,118,47,20,28,99,8,106,111,45,177,26,149,176,206,55,192,156,110]),p="https://fcm.googleapis.com";function d(t,e){if(null==t||null==e)return!1;if(t===e)return!0;if(t.byteLength!==e.byteLength)return!1;for(var n=new DataView(t),r=new DataView(e),i=0;i<t.byteLength;i++)if(n.getUint8(i)!==r.getUint8(i))return!1;return!0}function v(t){return function(t){var e=new Uint8Array(t);return btoa(String.fromCharCode.apply(null,e))}(t).replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")}!function(t){t.TYPE_OF_MSG="firebase-messaging-msg-type",t.DATA="firebase-messaging-msg-data"}(i||(i={})),function(t){t.PUSH_MSG_RECEIVED="push-msg-received",t.NOTIFICATION_CLICKED="notification-clicked"}(o||(o={}));var y=function(){function t(){}return t.prototype.getToken=function(t,e,n){return Object(s.__awaiter)(this,void 0,void 0,function(){var r,i,o,a,u,l,d,y;return Object(s.__generator)(this,function(s){switch(s.label){case 0:r=v(e.getKey("p256dh")),i=v(e.getKey("auth")),o="authorized_entity="+t+"&endpoint="+e.endpoint+"&encryption_key="+r+"&encryption_auth="+i,n!==f&&(a=v(n),o+="&application_pub_key="+a),(u=new Headers).append("Content-Type","application/x-www-form-urlencoded"),l={method:"POST",headers:u,body:o},s.label=1;case 1:return s.trys.push([1,4,,5]),[4,fetch(p+"/fcm/connect/subscribe",l)];case 2:return[4,s.sent().json()];case 3:return d=s.sent(),[3,5];case 4:throw s.sent(),h.create(c.TOKEN_SUBSCRIBE_FAILED);case 5:if(d.error)throw y=d.error.message,h.create(c.TOKEN_SUBSCRIBE_FAILED,{message:y});if(!d.token)throw h.create(c.TOKEN_SUBSCRIBE_NO_TOKEN);if(!d.pushSet)throw h.create(c.TOKEN_SUBSCRIBE_NO_PUSH_SET);return[2,{token:d.token,pushSet:d.pushSet}]}})})},t.prototype.updateToken=function(t,e,n,r,i){return Object(s.__awaiter)(this,void 0,void 0,function(){var o,a,u,l,d,y,_,g;return Object(s.__generator)(this,function(s){switch(s.label){case 0:o=v(r.getKey("p256dh")),a=v(r.getKey("auth")),u="push_set="+n+"&token="+e+"&authorized_entity="+t+"&endpoint="+r.endpoint+"&encryption_key="+o+"&encryption_auth="+a,i!==f&&(l=v(i),u+="&application_pub_key="+l),(d=new Headers).append("Content-Type","application/x-www-form-urlencoded"),y={method:"POST",headers:d,body:u},s.label=1;case 1:return s.trys.push([1,4,,5]),[4,fetch(p+"/fcm/connect/subscribe",y)];case 2:return[4,s.sent().json()];case 3:return _=s.sent(),[3,5];case 4:throw s.sent(),h.create(c.TOKEN_UPDATE_FAILED);case 5:if(_.error)throw g=_.error.message,h.create(c.TOKEN_UPDATE_FAILED,{message:g});if(!_.token)throw h.create(c.TOKEN_UPDATE_NO_TOKEN);return[2,_.token]}})})},t.prototype.deleteToken=function(t,e,n){return Object(s.__awaiter)(this,void 0,void 0,function(){var r,i,o,a,u;return Object(s.__generator)(this,function(s){switch(s.label){case 0:r="authorized_entity="+t+"&token="+e+"&pushSet="+n,(i=new Headers).append("Content-Type","application/x-www-form-urlencoded"),o={method:"POST",headers:i,body:r},s.label=1;case 1:return s.trys.push([1,4,,5]),[4,fetch(p+"/fcm/connect/unsubscribe",o)];case 2:return[4,s.sent().json()];case 3:if((a=s.sent()).error)throw u=a.error.message,h.create(c.TOKEN_UNSUBSCRIBE_FAILED,{message:u});return[3,5];case 4:throw s.sent(),h.create(c.TOKEN_UNSUBSCRIBE_FAILED);case 5:return[2]}})})},t}();function _(t){for(var e=(t+"=".repeat((4-t.length%4)%4)).replace(/\-/g,"+").replace(/_/g,"/"),n=window.atob(e),r=new Uint8Array(n.length),i=0;i<n.length;++i)r[i]=n.charCodeAt(i);return r}var g="undefined",m="fcm_token_object_Store";function b(){var t=indexedDB.open(g);t.onerror=function(t){},t.onsuccess=function(e){!function(t){if(t.objectStoreNames.contains(m)){var e=t.transaction(m).objectStore(m),n=new y,r=e.openCursor();r.onerror=function(t){console.warn("Unable to cleanup old IDB.",t)},r.onsuccess=function(){var e=r.result;if(e){var i=e.value;n.deleteToken(i.fcmSenderId,i.fcmToken,i.fcmPushSet),e.continue()}else t.close(),indexedDB.deleteDatabase(g)}}}(t.result)}}var w=function(){function t(){this.dbPromise=null}return t.prototype.get=function(t){return this.createTransaction(function(e){return e.get(t)})},t.prototype.getIndex=function(t,e){return this.createTransaction(function(n){return n.index(t).get(e)})},t.prototype.put=function(t){return this.createTransaction(function(e){return e.put(t)},"readwrite")},t.prototype.delete=function(t){return this.createTransaction(function(e){return e.delete(t)},"readwrite")},t.prototype.closeDatabase=function(){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(t){switch(t.label){case 0:return this.dbPromise?[4,this.dbPromise]:[3,2];case 1:t.sent().close(),this.dbPromise=null,t.label=2;case 2:return[2]}})})},t.prototype.createTransaction=function(t,e){return Object(s.__awaiter)(this,void 0,void 0,function(){var n,r,i,o;return Object(s.__generator)(this,function(a){switch(a.label){case 0:return[4,this.getDb()];case 1:return n=a.sent(),r=n.transaction(this.objectStoreName,e),i=r.objectStore(this.objectStoreName),[4,function(t){return new Promise(function(e,n){t.onsuccess=function(){e(t.result)},t.onerror=function(){n(t.error)}})}(t(i))];case 2:return o=a.sent(),[2,new Promise(function(t,e){r.oncomplete=function(){t(o)},r.onerror=function(){e(r.error)}})]}})})},t.prototype.getDb=function(){var t=this;return this.dbPromise||(this.dbPromise=new Promise(function(e,n){var r=indexedDB.open(t.dbName,t.dbVersion);r.onsuccess=function(){e(r.result)},r.onerror=function(){t.dbPromise=null,n(r.error)},r.onupgradeneeded=function(e){return t.onDbUpgrade(r,e)}})),this.dbPromise},t}();var E=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.dbName="fcm_token_details_db",e.dbVersion=3,e.objectStoreName="fcm_token_object_Store",e}return Object(s.__extends)(e,t),e.prototype.onDbUpgrade=function(t,e){var n=t.result;switch(e.oldVersion){case 0:(r=n.createObjectStore(this.objectStoreName,{keyPath:"swScope"})).createIndex("fcmSenderId","fcmSenderId",{unique:!1}),r.createIndex("fcmToken","fcmToken",{unique:!0});case 1:b();case 2:var r,i=(r=t.transaction.objectStore(this.objectStoreName)).openCursor();i.onsuccess=function(){var t=i.result;if(t){var e=t.value,n=Object(s.__assign)({},e);e.createTime||(n.createTime=Date.now()),"string"==typeof e.vapidKey&&(n.vapidKey=_(e.vapidKey)),"string"==typeof e.auth&&(n.auth=_(e.auth).buffer),"string"==typeof e.auth&&(n.p256dh=_(e.p256dh).buffer),t.update(n),t.continue()}}}},e.prototype.getTokenDetailsFromToken=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(e){if(!t)throw h.create(c.BAD_TOKEN);return C({fcmToken:t}),[2,this.getIndex("fcmToken",t)]})})},e.prototype.getTokenDetailsFromSWScope=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(e){if(!t)throw h.create(c.BAD_SCOPE);return C({swScope:t}),[2,this.get(t)]})})},e.prototype.saveTokenDetails=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(e){if(!t.swScope)throw h.create(c.BAD_SCOPE);if(!t.vapidKey)throw h.create(c.BAD_VAPID_KEY);if(!t.endpoint||!t.auth||!t.p256dh)throw h.create(c.BAD_SUBSCRIPTION);if(!t.fcmSenderId)throw h.create(c.BAD_SENDER_ID);if(!t.fcmToken)throw h.create(c.BAD_TOKEN);if(!t.fcmPushSet)throw h.create(c.BAD_PUSH_SET);return C(t),[2,this.put(t)]})})},e.prototype.deleteToken=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){var e;return Object(s.__generator)(this,function(n){switch(n.label){case 0:return"string"!=typeof t||0===t.length?[2,Promise.reject(h.create(c.INVALID_DELETE_TOKEN))]:[4,this.getTokenDetailsFromToken(t)];case 1:if(!(e=n.sent()))throw h.create(c.DELETE_TOKEN_NOT_FOUND);return[4,this.delete(e.swScope)];case 2:return n.sent(),[2,e]}})})},e}(w);function C(t){if(t.fcmToken&&("string"!=typeof t.fcmToken||0===t.fcmToken.length))throw h.create(c.BAD_TOKEN);if(t.swScope&&("string"!=typeof t.swScope||0===t.swScope.length))throw h.create(c.BAD_SCOPE);if(t.vapidKey&&(!(t.vapidKey instanceof Uint8Array)||65!==t.vapidKey.length))throw h.create(c.BAD_VAPID_KEY);if(t.endpoint&&("string"!=typeof t.endpoint||0===t.endpoint.length))throw h.create(c.BAD_SUBSCRIPTION);if(t.auth&&!(t.auth instanceof ArrayBuffer))throw h.create(c.BAD_SUBSCRIPTION);if(t.p256dh&&!(t.p256dh instanceof ArrayBuffer))throw h.create(c.BAD_SUBSCRIPTION);if(t.fcmSenderId&&("string"!=typeof t.fcmSenderId||0===t.fcmSenderId.length))throw h.create(c.BAD_SENDER_ID);if(t.fcmPushSet&&("string"!=typeof t.fcmPushSet||0===t.fcmPushSet.length))throw h.create(c.BAD_PUSH_SET)}var T=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.dbName="fcm_vapid_details_db",e.dbVersion=1,e.objectStoreName="fcm_vapid_object_Store",e}return Object(s.__extends)(e,t),e.prototype.onDbUpgrade=function(t){t.result.createObjectStore(this.objectStoreName,{keyPath:"swScope"})},e.prototype.getVapidFromSWScope=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){var e;return Object(s.__generator)(this,function(n){switch(n.label){case 0:if("string"!=typeof t||0===t.length)throw h.create(c.BAD_SCOPE);return[4,this.get(t)];case 1:return[2,(e=n.sent())?e.vapidKey:void 0]}})})},e.prototype.saveVapidDetails=function(t,e){return Object(s.__awaiter)(this,void 0,void 0,function(){var n;return Object(s.__generator)(this,function(r){if("string"!=typeof t||0===t.length)throw h.create(c.BAD_SCOPE);if(null===e||65!==e.length)throw h.create(c.BAD_VAPID_KEY);return n={swScope:t,vapidKey:e},[2,this.put(n)]})})},e.prototype.deleteVapidDetails=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){var e;return Object(s.__generator)(this,function(n){switch(n.label){case 0:return[4,this.getVapidFromSWScope(t)];case 1:if(!(e=n.sent()))throw h.create(c.DELETE_SCOPE_NOT_FOUND);return[4,this.delete(t)];case 2:return n.sent(),[2,e]}})})},e}(w),S="messagingSenderId",I=function(){function t(t){var e=this;if(!t.options[S]||"string"!=typeof t.options[S])throw h.create(c.BAD_SENDER_ID);this.messagingSenderId=t.options[S],this.tokenDetailsModel=new E,this.vapidDetailsModel=new T,this.iidModel=new y,this.app=t,this.INTERNAL={delete:function(){return e.delete()}}}return t.prototype.getToken=function(){return Object(s.__awaiter)(this,void 0,void 0,function(){var t,e,n,r,i;return Object(s.__generator)(this,function(o){switch(o.label){case 0:return"granted"!==(t=this.getNotificationPermission_())?"denied"===t?[2,Promise.reject(h.create(c.NOTIFICATIONS_BLOCKED))]:[2,Promise.resolve(null)]:[4,this.getSWRegistration_()];case 1:return e=o.sent(),[4,this.getPublicVapidKey_()];case 2:return n=o.sent(),[4,this.getPushSubscription(e,n)];case 3:return r=o.sent(),[4,this.tokenDetailsModel.getTokenDetailsFromSWScope(e.scope)];case 4:return(i=o.sent())?[2,this.manageExistingToken(e,r,n,i)]:[2,this.getNewToken(e,r,n)]}})})},t.prototype.manageExistingToken=function(t,e,n,r){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(i){switch(i.label){case 0:return function(t,e,n){if(!d(e.buffer,n.vapidKey.buffer))return!1;var r=t.endpoint===n.endpoint,i=d(t.getKey("auth"),n.auth),o=d(t.getKey("p256dh"),n.p256dh);return r&&i&&o}(e,n,r)?Date.now()<r.createTime+6048e5?[2,r.fcmToken]:[2,this.updateToken(t,e,n,r)]:[4,this.deleteTokenFromDB(r.fcmToken)];case 1:return i.sent(),[2,this.getNewToken(t,e,n)]}})})},t.prototype.updateToken=function(t,e,n,r){return Object(s.__awaiter)(this,void 0,void 0,function(){var i,o,a;return Object(s.__generator)(this,function(s){switch(s.label){case 0:return s.trys.push([0,4,,6]),[4,this.iidModel.updateToken(this.messagingSenderId,r.fcmToken,r.fcmPushSet,e,n)];case 1:return i=s.sent(),o={swScope:t.scope,vapidKey:n,fcmSenderId:this.messagingSenderId,fcmToken:i,fcmPushSet:r.fcmPushSet,createTime:Date.now(),endpoint:e.endpoint,auth:e.getKey("auth"),p256dh:e.getKey("p256dh")},[4,this.tokenDetailsModel.saveTokenDetails(o)];case 2:return s.sent(),[4,this.vapidDetailsModel.saveVapidDetails(t.scope,n)];case 3:return s.sent(),[2,i];case 4:return a=s.sent(),[4,this.deleteToken(r.fcmToken)];case 5:throw s.sent(),a;case 6:return[2]}})})},t.prototype.getNewToken=function(t,e,n){return Object(s.__awaiter)(this,void 0,void 0,function(){var r,i;return Object(s.__generator)(this,function(o){switch(o.label){case 0:return[4,this.iidModel.getToken(this.messagingSenderId,e,n)];case 1:return r=o.sent(),i={swScope:t.scope,vapidKey:n,fcmSenderId:this.messagingSenderId,fcmToken:r.token,fcmPushSet:r.pushSet,createTime:Date.now(),endpoint:e.endpoint,auth:e.getKey("auth"),p256dh:e.getKey("p256dh")},[4,this.tokenDetailsModel.saveTokenDetails(i)];case 2:return o.sent(),[4,this.vapidDetailsModel.saveVapidDetails(t.scope,n)];case 3:return o.sent(),[2,r.token]}})})},t.prototype.deleteToken=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){var e,n;return Object(s.__generator)(this,function(r){switch(r.label){case 0:return[4,this.deleteTokenFromDB(t)];case 1:return r.sent(),[4,this.getSWRegistration_()];case 2:return(e=r.sent())?[4,e.pushManager.getSubscription()]:[3,4];case 3:if(n=r.sent())return[2,n.unsubscribe()];r.label=4;case 4:return[2,!0]}})})},t.prototype.deleteTokenFromDB=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){var e;return Object(s.__generator)(this,function(n){switch(n.label){case 0:return[4,this.tokenDetailsModel.deleteToken(t)];case 1:return e=n.sent(),[4,this.iidModel.deleteToken(e.fcmSenderId,e.fcmToken,e.fcmPushSet)];case 2:return n.sent(),[2]}})})},t.prototype.getPushSubscription=function(t,e){return t.pushManager.getSubscription().then(function(n){return n||t.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:e})})},t.prototype.requestPermission=function(){throw h.create(c.AVAILABLE_IN_WINDOW)},t.prototype.useServiceWorker=function(t){throw h.create(c.AVAILABLE_IN_WINDOW)},t.prototype.usePublicVapidKey=function(t){throw h.create(c.AVAILABLE_IN_WINDOW)},t.prototype.onMessage=function(t,e,n){throw h.create(c.AVAILABLE_IN_WINDOW)},t.prototype.onTokenRefresh=function(t,e,n){throw h.create(c.AVAILABLE_IN_WINDOW)},t.prototype.setBackgroundMessageHandler=function(t){throw h.create(c.AVAILABLE_IN_SW)},t.prototype.delete=function(){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(t){switch(t.label){case 0:return[4,Promise.all([this.tokenDetailsModel.closeDatabase(),this.vapidDetailsModel.closeDatabase()])];case 1:return t.sent(),[2]}})})},t.prototype.getNotificationPermission_=function(){return Notification.permission},t.prototype.getTokenDetailsModel=function(){return this.tokenDetailsModel},t.prototype.getVapidDetailsModel=function(){return this.vapidDetailsModel},t.prototype.getIIDModel=function(){return this.iidModel},t}();var N=function(t){function e(e){var n=t.call(this,e)||this;return n.bgMessageHandler=null,self.addEventListener("push",function(t){n.onPush(t)}),self.addEventListener("pushsubscriptionchange",function(t){n.onSubChange(t)}),self.addEventListener("notificationclick",function(t){n.onNotificationClick(t)}),n}return Object(s.__extends)(e,t),e.prototype.onPush=function(t){t.waitUntil(this.onPush_(t))},e.prototype.onSubChange=function(t){t.waitUntil(this.onSubChange_(t))},e.prototype.onNotificationClick=function(t){t.waitUntil(this.onNotificationClick_(t))},e.prototype.onPush_=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){var e,n,r;return Object(s.__generator)(this,function(i){switch(i.label){case 0:if(!t.data)return[2];try{e=t.data.json()}catch(t){return[2]}return[4,this.hasVisibleClients_()];case 1:return i.sent()?e.notification||this.bgMessageHandler?[2,this.sendMessageToWindowClients_(e)]:[2]:(n=this.getNotificationData_(e))?(r=n.title||"",[4,this.getSWRegistration_()]):[3,3];case 2:return[2,i.sent().showNotification(r,n)];case 3:return this.bgMessageHandler?[4,this.bgMessageHandler(e)]:[3,5];case 4:return i.sent(),[2];case 5:return[2]}})})},e.prototype.onSubChange_=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){var t,e,n,r;return Object(s.__generator)(this,function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),[4,this.getSWRegistration_()];case 1:return t=i.sent(),[3,3];case 2:throw e=i.sent(),h.create(c.UNABLE_TO_RESUBSCRIBE,{message:e});case 3:return i.trys.push([3,5,,8]),[4,t.pushManager.getSubscription()];case 4:return i.sent(),[3,8];case 5:return n=i.sent(),[4,this.getTokenDetailsModel().getTokenDetailsFromSWScope(t.scope)];case 6:if(!(r=i.sent()))throw n;return[4,this.deleteToken(r.fcmToken)];case 7:throw i.sent(),n;case 8:return[2]}})})},e.prototype.onNotificationClick_=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){var e,n,r,i;return Object(s.__generator)(this,function(a){switch(a.label){case 0:return t.notification&&t.notification.data&&t.notification.data.FCM_MSG?(t.stopImmediatePropagation(),t.notification.close(),(e=t.notification.data.FCM_MSG).notification&&(n=e.notification.click_action)?[4,this.getWindowClient_(n)]:[2]):[2];case 1:return(r=a.sent())?[3,3]:[4,self.clients.openWindow(n)];case 2:return r=a.sent(),[3,5];case 3:return[4,r.focus()];case 4:r=a.sent(),a.label=5;case 5:return r?(delete e.notification,i=O(o.NOTIFICATION_CLICKED,e),[2,this.attemptToMessageClient_(r,i)]):[2]}})})},e.prototype.getNotificationData_=function(t){if(t&&"object"==typeof t.notification){var e,n=Object(s.__assign)({},t.notification);return n.data=((e={}).FCM_MSG=t,e),n}},e.prototype.setBackgroundMessageHandler=function(t){if(!t||"function"!=typeof t)throw h.create(c.BG_HANDLER_FUNCTION_EXPECTED);this.bgMessageHandler=t},e.prototype.getWindowClient_=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){var e,n,r,i;return Object(s.__generator)(this,function(o){switch(o.label){case 0:return e=new URL(t,self.location.href).href,[4,A()];case 1:for(n=o.sent(),r=null,i=0;i<n.length;i++)if(new URL(n[i].url,self.location.href).href===e){r=n[i];break}return[2,r]}})})},e.prototype.attemptToMessageClient_=function(t,e){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(n){if(!t)throw h.create(c.NO_WINDOW_CLIENT_TO_MSG);return t.postMessage(e),[2]})})},e.prototype.hasVisibleClients_=function(){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(t){switch(t.label){case 0:return[4,A()];case 1:return[2,t.sent().some(function(t){return"visible"===t.visibilityState})]}})})},e.prototype.sendMessageToWindowClients_=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){var e,n,r=this;return Object(s.__generator)(this,function(i){switch(i.label){case 0:return[4,A()];case 1:return e=i.sent(),n=O(o.PUSH_MSG_RECEIVED,t),[4,Promise.all(e.map(function(t){return r.attemptToMessageClient_(t,n)}))];case 2:return i.sent(),[2]}})})},e.prototype.getSWRegistration_=function(){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(t){return[2,self.registration]})})},e.prototype.getPublicVapidKey_=function(){return Object(s.__awaiter)(this,void 0,void 0,function(){var t,e;return Object(s.__generator)(this,function(n){switch(n.label){case 0:return[4,this.getSWRegistration_()];case 1:if(!(t=n.sent()))throw h.create(c.SW_REGISTRATION_EXPECTED);return[4,this.getVapidDetailsModel().getVapidFromSWScope(t.scope)];case 2:return null==(e=n.sent())?[2,f]:[2,e]}})})},e}(I);function A(){return self.clients.matchAll({type:"window",includeUncontrolled:!0})}function O(t,e){return(n={})[i.TYPE_OF_MSG]=t,n[i.DATA]=e,n;var n}var k=function(t){function e(e){var n=t.call(this,e)||this;return n.registrationToUse=null,n.publicVapidKeyToUse=null,n.manifestCheckPromise=null,n.messageObserver=null,n.tokenRefreshObserver=null,n.onMessageInternal=Object(a.createSubscribe)(function(t){n.messageObserver=t}),n.onTokenRefreshInternal=Object(a.createSubscribe)(function(t){n.tokenRefreshObserver=t}),n.setupSWMessageListener_(),n}return Object(s.__extends)(e,t),e.prototype.getToken=function(){var e=this;return this.isSupported_()?this.manifestCheck_().then(function(){return t.prototype.getToken.call(e)}):Promise.reject(h.create(c.UNSUPPORTED_BROWSER))},e.prototype.manifestCheck_=function(){if(this.manifestCheckPromise)return this.manifestCheckPromise;var t=document.querySelector('link[rel="manifest"]');return this.manifestCheckPromise=t?fetch(t.href).then(function(t){return t.json()}).catch(function(){}).then(function(t){if(t&&t.gcm_sender_id&&"103953800507"!==t.gcm_sender_id)throw h.create(c.INCORRECT_GCM_SENDER_ID)}):Promise.resolve(),this.manifestCheckPromise},e.prototype.requestPermission=function(){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(t){return"granted"===Notification.permission?[2]:[2,new Promise(function(t,e){var n=function(n){return"granted"===n?t():e("denied"===n?h.create(c.PERMISSION_BLOCKED):h.create(c.PERMISSION_DEFAULT))},r=Notification.requestPermission(n);r&&r.then(n)})]})})},e.prototype.useServiceWorker=function(t){if(!(t instanceof ServiceWorkerRegistration))throw h.create(c.SW_REGISTRATION_EXPECTED);if(null!=this.registrationToUse)throw h.create(c.USE_SW_BEFORE_GET_TOKEN);this.registrationToUse=t},e.prototype.usePublicVapidKey=function(t){if("string"!=typeof t)throw h.create(c.INVALID_PUBLIC_VAPID_KEY);if(null!=this.publicVapidKeyToUse)throw h.create(c.USE_PUBLIC_KEY_BEFORE_GET_TOKEN);var e=_(t);if(65!==e.length)throw h.create(c.PUBLIC_KEY_DECRYPTION_FAILED);this.publicVapidKeyToUse=e},e.prototype.onMessage=function(t,e,n){return"function"==typeof t?this.onMessageInternal(t,e,n):this.onMessageInternal(t)},e.prototype.onTokenRefresh=function(t,e,n){return"function"==typeof t?this.onTokenRefreshInternal(t,e,n):this.onTokenRefreshInternal(t)},e.prototype.waitForRegistrationToActivate_=function(t){var e=t.installing||t.waiting||t.active;return new Promise(function(n,r){if(e)if("activated"!==e.state)if("redundant"!==e.state){var i=function(){if("activated"===e.state)n(t);else{if("redundant"!==e.state)return;r(h.create(c.SW_REG_REDUNDANT))}e.removeEventListener("statechange",i)};e.addEventListener("statechange",i)}else r(h.create(c.SW_REG_REDUNDANT));else n(t);else r(h.create(c.NO_SW_IN_REG))})},e.prototype.getSWRegistration_=function(){var t=this;return this.registrationToUse?this.waitForRegistrationToActivate_(this.registrationToUse):(this.registrationToUse=null,navigator.serviceWorker.register("/firebase-messaging-sw.js",{scope:"/firebase-cloud-messaging-push-scope"}).catch(function(t){throw h.create(c.FAILED_DEFAULT_REGISTRATION,{browserErrorMessage:t.message})}).then(function(e){return t.waitForRegistrationToActivate_(e).then(function(){return t.registrationToUse=e,e.update(),e})}))},e.prototype.getPublicVapidKey_=function(){return this.publicVapidKeyToUse?Promise.resolve(this.publicVapidKeyToUse):Promise.resolve(f)},e.prototype.setupSWMessageListener_=function(){var t=this;"serviceWorker"in navigator&&navigator.serviceWorker.addEventListener("message",function(e){if(e.data&&e.data[i.TYPE_OF_MSG]){var n=e.data;switch(n[i.TYPE_OF_MSG]){case o.PUSH_MSG_RECEIVED:case o.NOTIFICATION_CLICKED:var r=n[i.DATA];t.messageObserver&&t.messageObserver.next(r)}}},!1)},e.prototype.isSupported_=function(){return"serviceWorker"in navigator&&"PushManager"in window&&"Notification"in window&&"fetch"in window&&ServiceWorkerRegistration.prototype.hasOwnProperty("showNotification")&&PushSubscription.prototype.hasOwnProperty("getKey")},e}(I);function R(t){var e={Messaging:k};t.INTERNAL.registerService("messaging",function(t){return self&&"ServiceWorkerGlobalScope"in self?new N(t):new k(t)},e)}R(u.default)},function(t,e,n){n(12)},function(t,e,n){"use strict";n.r(e),n.d(e,"setLogLevel",function(){return u}),n.d(e,"Logger",function(){return s}),n.d(e,"LogLevel",function(){return r});var r,i=[];!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(r||(r={}));var o=r.INFO,a=function(t,e){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];if(!(e<t.logLevel)){var o=(new Date).toISOString();switch(e){case r.DEBUG:case r.VERBOSE:console.log.apply(console,["["+o+"]  "+t.name+":"].concat(n));break;case r.INFO:console.info.apply(console,["["+o+"]  "+t.name+":"].concat(n));break;case r.WARN:console.warn.apply(console,["["+o+"]  "+t.name+":"].concat(n));break;case r.ERROR:console.error.apply(console,["["+o+"]  "+t.name+":"].concat(n));break;default:throw new Error("Attempted to log a message with an invalid logType (value: "+e+")")}}},s=function(){function t(t){this.name=t,this._logLevel=o,this._logHandler=a,i.push(this)}return Object.defineProperty(t.prototype,"logLevel",{get:function(){return this._logLevel},set:function(t){if(!(t in r))throw new TypeError("Invalid value assigned to `logLevel`");this._logLevel=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"logHandler",{get:function(){return this._logHandler},set:function(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t},enumerable:!0,configurable:!0}),t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.DEBUG].concat(t))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.VERBOSE].concat(t))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.INFO].concat(t))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.WARN].concat(t))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.ERROR].concat(t))},t}();function u(t){i.forEach(function(e){e.logLevel=t})}},function(t,e,n){"use strict";(function(r){Object.defineProperty(e,"__esModule",{value:!0});var i,o,a=n(1),s=n(14),u=n(0),c=(i=n(2))&&"object"==typeof i&&"default"in i?i.default:i,l=function(){function t(t){this.domStorage_=t,this.prefix_="firebase:"}return t.prototype.set=function(t,e){null==e?this.domStorage_.removeItem(this.prefixedName_(t)):this.domStorage_.setItem(this.prefixedName_(t),a.stringify(e))},t.prototype.get=function(t){var e=this.domStorage_.getItem(this.prefixedName_(t));return null==e?null:a.jsonEval(e)},t.prototype.remove=function(t){this.domStorage_.removeItem(this.prefixedName_(t))},t.prototype.prefixedName_=function(t){return this.prefix_+t},t.prototype.toString=function(){return this.domStorage_.toString()},t}(),h=function(){function t(){this.cache_={},this.isInMemoryStorage=!0}return t.prototype.set=function(t,e){null==e?delete this.cache_[t]:this.cache_[t]=e},t.prototype.get=function(t){return a.contains(this.cache_,t)?this.cache_[t]:null},t.prototype.remove=function(t){delete this.cache_[t]},t}(),f=function(t){try{if("undefined"!=typeof window&&void 0!==window[t]){var e=window[t];return e.setItem("firebase:sentinel","cache"),e.removeItem("firebase:sentinel"),new l(e)}}catch(t){}return new h},p=f("localStorage"),d=f("sessionStorage"),v=new s.Logger("@firebase/database"),y=(o=1,function(){return o++}),_=function(t){var e=a.stringToByteArray(t),n=new a.Sha1;n.update(e);var r=n.digest();return a.base64.encodeByteArray(r)},g=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var n="",r=0;r<t.length;r++)Array.isArray(t[r])||t[r]&&"object"==typeof t[r]&&"number"==typeof t[r].length?n+=g.apply(null,t[r]):"object"==typeof t[r]?n+=a.stringify(t[r]):n+=t[r],n+=" ";return n},m=null,b=!0,w=function(t,e){a.assert(!e||!0===t||!1===t,"Can't turn on custom loggers persistently."),!0===t?(v.logLevel=s.LogLevel.VERBOSE,m=v.log.bind(v),e&&d.set("logging_enabled",!0)):"function"==typeof t?m=t:(m=null,d.remove("logging_enabled"))},E=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(!0===b&&(b=!1,null===m&&!0===d.get("logging_enabled")&&w(!0)),m){var n=g.apply(null,t);m(n)}},C=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];E.apply(void 0,[t].concat(e))}},T=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE INTERNAL ERROR: "+g.apply(void 0,t);v.error(n)},S=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE FATAL ERROR: "+g.apply(void 0,t);throw v.error(n),new Error(n)},I=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE WARNING: "+g.apply(void 0,t);v.warn(n)},N=function(t){return"number"==typeof t&&(t!=t||t==Number.POSITIVE_INFINITY||t==Number.NEGATIVE_INFINITY)},A="[MIN_NAME]",O="[MAX_NAME]",k=function(t,e){if(t===e)return 0;if(t===A||e===O)return-1;if(e===A||t===O)return 1;var n=U(t),r=U(e);return null!==n?null!==r?n-r==0?t.length-e.length:n-r:-1:null!==r?1:t<e?-1:1},R=function(t,e){return t===e?0:t<e?-1:1},P=function(t,e){if(e&&t in e)return e[t];throw new Error("Missing required key ("+t+") in object: "+a.stringify(e))},D=function(t){if("object"!=typeof t||null===t)return a.stringify(t);var e=[];for(var n in t)e.push(n);e.sort();for(var r="{",i=0;i<e.length;i++)0!==i&&(r+=","),r+=a.stringify(e[i]),r+=":",r+=D(t[e[i]]);return r+="}"},x=function(t,e){var n=t.length;if(n<=e)return[t];for(var r=[],i=0;i<n;i+=e)i+e>n?r.push(t.substring(i,n)):r.push(t.substring(i,i+e));return r},L=function(t,e){if(Array.isArray(t))for(var n=0;n<t.length;++n)e(n,t[n]);else a.forEach(t,function(t,n){return e(n,t)})},M=function(t){a.assert(!N(t),"Invalid JSON number");var e,n,r,i,o,s,u;for(0===t?(n=0,r=0,e=1/t==-1/0?1:0):(e=t<0,(t=Math.abs(t))>=Math.pow(2,-1022)?(n=(i=Math.min(Math.floor(Math.log(t)/Math.LN2),1023))+1023,r=Math.round(t*Math.pow(2,52-i)-Math.pow(2,52))):(n=0,r=Math.round(t/Math.pow(2,-1074)))),s=[],o=52;o;o-=1)s.push(r%2?1:0),r=Math.floor(r/2);for(o=11;o;o-=1)s.push(n%2?1:0),n=Math.floor(n/2);s.push(e?1:0),s.reverse(),u=s.join("");var c="";for(o=0;o<64;o+=8){var l=parseInt(u.substr(o,8),2).toString(16);1===l.length&&(l="0"+l),c+=l}return c.toLowerCase()},F=new RegExp("^-?\\d{1,10}$"),U=function(t){if(F.test(t)){var e=Number(t);if(e>=-2147483648&&e<=2147483647)return e}return null},j=function(t){try{t()}catch(t){setTimeout(function(){var e=t.stack||"";throw I("Exception was thrown by user callback.",e),t},Math.floor(0))}},B=function(){return("object"==typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)>=0},W=function(t,e){var n=setTimeout(t,e);return"object"==typeof n&&n.unref&&n.unref(),n},V=function(){function t(t,e){if(void 0===e){this.pieces_=t.split("/");for(var n=0,r=0;r<this.pieces_.length;r++)this.pieces_[r].length>0&&(this.pieces_[n]=this.pieces_[r],n++);this.pieces_.length=n,this.pieceNum_=0}else this.pieces_=t,this.pieceNum_=e}return Object.defineProperty(t,"Empty",{get:function(){return new t("")},enumerable:!0,configurable:!0}),t.prototype.getFront=function(){return this.pieceNum_>=this.pieces_.length?null:this.pieces_[this.pieceNum_]},t.prototype.getLength=function(){return this.pieces_.length-this.pieceNum_},t.prototype.popFront=function(){var e=this.pieceNum_;return e<this.pieces_.length&&e++,new t(this.pieces_,e)},t.prototype.getBack=function(){return this.pieceNum_<this.pieces_.length?this.pieces_[this.pieces_.length-1]:null},t.prototype.toString=function(){for(var t="",e=this.pieceNum_;e<this.pieces_.length;e++)""!==this.pieces_[e]&&(t+="/"+this.pieces_[e]);return t||"/"},t.prototype.toUrlEncodedString=function(){for(var t="",e=this.pieceNum_;e<this.pieces_.length;e++)""!==this.pieces_[e]&&(t+="/"+encodeURIComponent(String(this.pieces_[e])));return t||"/"},t.prototype.slice=function(t){return void 0===t&&(t=0),this.pieces_.slice(this.pieceNum_+t)},t.prototype.parent=function(){if(this.pieceNum_>=this.pieces_.length)return null;for(var e=[],n=this.pieceNum_;n<this.pieces_.length-1;n++)e.push(this.pieces_[n]);return new t(e,0)},t.prototype.child=function(e){for(var n=[],r=this.pieceNum_;r<this.pieces_.length;r++)n.push(this.pieces_[r]);if(e instanceof t)for(r=e.pieceNum_;r<e.pieces_.length;r++)n.push(e.pieces_[r]);else{var i=e.split("/");for(r=0;r<i.length;r++)i[r].length>0&&n.push(i[r])}return new t(n,0)},t.prototype.isEmpty=function(){return this.pieceNum_>=this.pieces_.length},t.relativePath=function(e,n){var r=e.getFront(),i=n.getFront();if(null===r)return n;if(r===i)return t.relativePath(e.popFront(),n.popFront());throw new Error("INTERNAL ERROR: innerPath ("+n+") is not within outerPath ("+e+")")},t.comparePaths=function(t,e){for(var n=t.slice(),r=e.slice(),i=0;i<n.length&&i<r.length;i++){var o=k(n[i],r[i]);if(0!==o)return o}return n.length===r.length?0:n.length<r.length?-1:1},t.prototype.equals=function(t){if(this.getLength()!==t.getLength())return!1;for(var e=this.pieceNum_,n=t.pieceNum_;e<=this.pieces_.length;e++,n++)if(this.pieces_[e]!==t.pieces_[n])return!1;return!0},t.prototype.contains=function(t){var e=this.pieceNum_,n=t.pieceNum_;if(this.getLength()>t.getLength())return!1;for(;e<this.pieces_.length;){if(this.pieces_[e]!==t.pieces_[n])return!1;++e,++n}return!0},t}(),$=function(){function t(t,e){this.errorPrefix_=e,this.parts_=t.slice(),this.byteLength_=Math.max(1,this.parts_.length);for(var n=0;n<this.parts_.length;n++)this.byteLength_+=a.stringLength(this.parts_[n]);this.checkValid_()}return Object.defineProperty(t,"MAX_PATH_DEPTH",{get:function(){return 32},enumerable:!0,configurable:!0}),Object.defineProperty(t,"MAX_PATH_LENGTH_BYTES",{get:function(){return 768},enumerable:!0,configurable:!0}),t.prototype.push=function(t){this.parts_.length>0&&(this.byteLength_+=1),this.parts_.push(t),this.byteLength_+=a.stringLength(t),this.checkValid_()},t.prototype.pop=function(){var t=this.parts_.pop();this.byteLength_-=a.stringLength(t),this.parts_.length>0&&(this.byteLength_-=1)},t.prototype.checkValid_=function(){if(this.byteLength_>t.MAX_PATH_LENGTH_BYTES)throw new Error(this.errorPrefix_+"has a key path longer than "+t.MAX_PATH_LENGTH_BYTES+" bytes ("+this.byteLength_+").");if(this.parts_.length>t.MAX_PATH_DEPTH)throw new Error(this.errorPrefix_+"path specified exceeds the maximum depth that can be written ("+t.MAX_PATH_DEPTH+") or object contains a cycle "+this.toErrorString())},t.prototype.toErrorString=function(){return 0==this.parts_.length?"":"in property '"+this.parts_.join(".")+"'"},t}(),q="long_polling",H=function(){function t(t,e,n,r,i){void 0===i&&(i=""),this.secure=e,this.namespace=n,this.webSocketOnly=r,this.persistenceKey=i,this.host=t.toLowerCase(),this.domain=this.host.substr(this.host.indexOf(".")+1),this.internalHost=p.get("host:"+t)||this.host}return t.prototype.needsQueryParam=function(){return this.host!==this.internalHost||this.isCustomHost()},t.prototype.isCacheableHost=function(){return"s-"===this.internalHost.substr(0,2)},t.prototype.isDemoHost=function(){return"firebaseio-demo.com"===this.domain},t.prototype.isCustomHost=function(){return"firebaseio.com"!==this.domain&&"firebaseio-demo.com"!==this.domain},t.prototype.updateHost=function(t){t!==this.internalHost&&(this.internalHost=t,this.isCacheableHost()&&p.set("host:"+this.host,this.internalHost))},t.prototype.connectionURL=function(t,e){var n;if(a.assert("string"==typeof t,"typeof type must == string"),a.assert("object"==typeof e,"typeof params must == object"),"websocket"===t)n=(this.secure?"wss://":"ws://")+this.internalHost+"/.ws?";else{if(t!==q)throw new Error("Unknown connection type: "+t);n=(this.secure?"https://":"http://")+this.internalHost+"/.lp?"}this.needsQueryParam()&&(e.ns=this.namespace);var r=[];return a.forEach(e,function(t,e){r.push(t+"="+e)}),n+r.join("&")},t.prototype.toString=function(){var t=this.toURLString();return this.persistenceKey&&(t+="<"+this.persistenceKey+">"),t},t.prototype.toURLString=function(){return(this.secure?"https://":"http://")+this.host},t}();var K,G,Q,z,X,Y=function(t){var e=J(t),n=e.subdomain;"firebase"===e.domain&&S(e.host+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead"),n&&"undefined"!=n||"localhost"===e.domain||S("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com"),e.secure||"undefined"!=typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&I("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");var r="ws"===e.scheme||"wss"===e.scheme;return{repoInfo:new H(e.host,e.secure,n,r),path:new V(e.pathString)}},J=function(t){var e="",n="",r="",i="",o=!0,a="https",s=443;if("string"==typeof t){var u=t.indexOf("//");u>=0&&(a=t.substring(0,u-1),t=t.substring(u+2));var c=t.indexOf("/");-1===c&&(c=t.length);var l=t.indexOf("?");-1===l&&(l=t.length),e=t.substring(0,Math.min(c,l)),c<l&&(i=function(t){for(var e="",n=t.split("/"),r=0;r<n.length;r++)if(n[r].length>0){var i=n[r];try{i=decodeURIComponent(i.replace(/\+/g," "))}catch(t){}e+="/"+i}return e}(t.substring(c,l)));var h=function(t){var e={};t.startsWith("?")&&(t=t.substring(1));for(var n=0,r=t.split("&");n<r.length;n++){var i=r[n];if(0!==i.length){var o=i.split("=");2===o.length?e[decodeURIComponent(o[0])]=decodeURIComponent(o[1]):I("Invalid query segment '"+i+"' in query '"+t+"'")}}return e}(t.substring(Math.min(t.length,l)));(u=e.indexOf(":"))>=0?(o="https"===a||"wss"===a,s=parseInt(e.substring(u+1),10)):u=t.length;var f=e.split(".");3===f.length?(n=f[1],r=f[0].toLowerCase()):2===f.length?n=f[0]:"localhost"===f[0].slice(0,u).toLowerCase()&&(n="localhost"),""===r&&"ns"in h&&(r=h.ns)}return{host:e,port:s,domain:n,subdomain:r,secure:o,scheme:a,pathString:i}},Z=/[\[\].#$\/\u0000-\u001F\u007F]/,tt=/[\[\].#$\u0000-\u001F\u007F]/,et=function(t){return"string"==typeof t&&0!==t.length&&!Z.test(t)},nt=function(t){return"string"==typeof t&&0!==t.length&&!tt.test(t)},rt=function(t){return null===t||"string"==typeof t||"number"==typeof t&&!N(t)||t&&"object"==typeof t&&a.contains(t,".sv")},it=function(t,e,n,r,i){i&&void 0===n||ot(a.errorPrefix(t,e,i),n,r)},ot=function(t,e,n){var r=n instanceof V?new $(n,t):n;if(void 0===e)throw new Error(t+"contains undefined "+r.toErrorString());if("function"==typeof e)throw new Error(t+"contains a function "+r.toErrorString()+" with contents = "+e.toString());if(N(e))throw new Error(t+"contains "+e.toString()+" "+r.toErrorString());if("string"==typeof e&&e.length>10485760/3&&a.stringLength(e)>10485760)throw new Error(t+"contains a string greater than 10485760 utf8 bytes "+r.toErrorString()+" ('"+e.substring(0,50)+"...')");if(e&&"object"==typeof e){var i=!1,o=!1;if(a.forEach(e,function(e,n){if(".value"===e)i=!0;else if(".priority"!==e&&".sv"!==e&&(o=!0,!et(e)))throw new Error(t+" contains an invalid key ("+e+") "+r.toErrorString()+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');r.push(e),ot(t,n,r),r.pop()}),i&&o)throw new Error(t+' contains ".value" child '+r.toErrorString()+" in addition to actual children.")}},at=function(t,e,n,r,i){if(!i||void 0!==n){var o=a.errorPrefix(t,e,i);if(!n||"object"!=typeof n||Array.isArray(n))throw new Error(o+" must be an object containing the children to replace.");var s=[];a.forEach(n,function(t,e){var n=new V(t);if(ot(o,e,r.child(n)),".priority"===n.getBack()&&!rt(e))throw new Error(o+"contains an invalid value for '"+n.toString()+"', which must be a valid Firebase priority (a string, finite number, server value, or null).");s.push(n)}),function(t,e){var n,r;for(n=0;n<e.length;n++)for(var i=(r=e[n]).slice(),o=0;o<i.length;o++)if(".priority"===i[o]&&o===i.length-1);else if(!et(i[o]))throw new Error(t+"contains an invalid key ("+i[o]+") in path "+r.toString()+'. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');e.sort(V.comparePaths);var a=null;for(n=0;n<e.length;n++){if(r=e[n],null!==a&&a.contains(r))throw new Error(t+"contains a path "+a.toString()+" that is ancestor of another path "+r.toString());a=r}}(o,s)}},st=function(t,e,n,r){if(!r||void 0!==n){if(N(n))throw new Error(a.errorPrefix(t,e,r)+"is "+n.toString()+", but must be a valid Firebase priority (a string, finite number, server value, or null).");if(!rt(n))throw new Error(a.errorPrefix(t,e,r)+"must be a valid Firebase priority (a string, finite number, server value, or null).")}},ut=function(t,e,n,r){if(!r||void 0!==n)switch(n){case"value":case"child_added":case"child_removed":case"child_changed":case"child_moved":break;default:throw new Error(a.errorPrefix(t,e,r)+'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".')}},ct=function(t,e,n,r){if(!(r&&void 0===n||et(n)))throw new Error(a.errorPrefix(t,e,r)+'was an invalid key = "'+n+'".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").')},lt=function(t,e,n,r){if(!(r&&void 0===n||nt(n)))throw new Error(a.errorPrefix(t,e,r)+'was an invalid path = "'+n+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"')},ht=function(t,e){if(".info"===e.getFront())throw new Error(t+" failed = Can't modify data under /.info/")},ft=function(t,e,n){var r=n.path.toString();if("string"!=typeof n.repoInfo.host||0===n.repoInfo.host.length||!et(n.repoInfo.namespace)&&"localhost"!==n.repoInfo.host.split(":")[0]||0!==r.length&&!function(t){return t&&(t=t.replace(/^\/*\.info(\/|$)/,"/")),nt(t)}(r))throw new Error(a.errorPrefix(t,e,!1)+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".')},pt=function(){function t(t,e){this.repo_=t,this.path_=e}return t.prototype.cancel=function(t){a.validateArgCount("OnDisconnect.cancel",0,1,arguments.length),a.validateCallback("OnDisconnect.cancel",1,t,!0);var e=new a.Deferred;return this.repo_.onDisconnectCancel(this.path_,e.wrapCallback(t)),e.promise},t.prototype.remove=function(t){a.validateArgCount("OnDisconnect.remove",0,1,arguments.length),ht("OnDisconnect.remove",this.path_),a.validateCallback("OnDisconnect.remove",1,t,!0);var e=new a.Deferred;return this.repo_.onDisconnectSet(this.path_,null,e.wrapCallback(t)),e.promise},t.prototype.set=function(t,e){a.validateArgCount("OnDisconnect.set",1,2,arguments.length),ht("OnDisconnect.set",this.path_),it("OnDisconnect.set",1,t,this.path_,!1),a.validateCallback("OnDisconnect.set",2,e,!0);var n=new a.Deferred;return this.repo_.onDisconnectSet(this.path_,t,n.wrapCallback(e)),n.promise},t.prototype.setWithPriority=function(t,e,n){a.validateArgCount("OnDisconnect.setWithPriority",2,3,arguments.length),ht("OnDisconnect.setWithPriority",this.path_),it("OnDisconnect.setWithPriority",1,t,this.path_,!1),st("OnDisconnect.setWithPriority",2,e,!1),a.validateCallback("OnDisconnect.setWithPriority",3,n,!0);var r=new a.Deferred;return this.repo_.onDisconnectSetWithPriority(this.path_,t,e,r.wrapCallback(n)),r.promise},t.prototype.update=function(t,e){if(a.validateArgCount("OnDisconnect.update",1,2,arguments.length),ht("OnDisconnect.update",this.path_),Array.isArray(t)){for(var n={},r=0;r<t.length;++r)n[""+r]=t[r];t=n,I("Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}at("OnDisconnect.update",1,t,this.path_,!1),a.validateCallback("OnDisconnect.update",2,e,!0);var i=new a.Deferred;return this.repo_.onDisconnectUpdate(this.path_,t,i.wrapCallback(e)),i.promise},t}(),dt=function(){function t(t,e){this.committed=t,this.snapshot=e}return t.prototype.toJSON=function(){return a.validateArgCount("TransactionResult.toJSON",0,1,arguments.length),{committed:this.committed,snapshot:this.snapshot.toJSON()}},t}(),vt=(K="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz",G=0,Q=[],function(t){var e,n=t===G;G=t;var r=new Array(8);for(e=7;e>=0;e--)r[e]=K.charAt(t%64),t=Math.floor(t/64);a.assert(0===t,"Cannot push at time == 0");var i=r.join("");if(n){for(e=11;e>=0&&63===Q[e];e--)Q[e]=0;Q[e]++}else for(e=0;e<12;e++)Q[e]=Math.floor(64*Math.random());for(e=0;e<12;e++)i+=K.charAt(Q[e]);return a.assert(20===i.length,"nextPushId: Length should be 20."),i}),yt=function(){function t(t,e){this.name=t,this.node=e}return t.Wrap=function(e,n){return new t(e,n)},t}(),_t=function(){function t(){}return t.prototype.getCompare=function(){return this.compare.bind(this)},t.prototype.indexedValueChanged=function(t,e){var n=new yt(A,t),r=new yt(A,e);return 0!==this.compare(n,r)},t.prototype.minPost=function(){return yt.MIN},t}(),gt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u.__extends(e,t),Object.defineProperty(e,"__EMPTY_NODE",{get:function(){return z},set:function(t){z=t},enumerable:!0,configurable:!0}),e.prototype.compare=function(t,e){return k(t.name,e.name)},e.prototype.isDefinedOn=function(t){throw a.assertionError("KeyIndex.isDefinedOn not expected to be called.")},e.prototype.indexedValueChanged=function(t,e){return!1},e.prototype.minPost=function(){return yt.MIN},e.prototype.maxPost=function(){return new yt(O,z)},e.prototype.makePost=function(t,e){return a.assert("string"==typeof t,"KeyIndex indexValue must always be a string."),new yt(t,z)},e.prototype.toString=function(){return".key"},e}(_t),mt=new gt;var bt,wt,Et,Ct=function(t){return"number"==typeof t?"number:"+M(t):"string:"+t},Tt=function(t){if(t.isLeafNode()){var e=t.val();a.assert("string"==typeof e||"number"==typeof e||"object"==typeof e&&a.contains(e,".sv"),"Priority must be a string or number.")}else a.assert(t===X||t.isEmpty(),"priority of unexpected type.");a.assert(t===X||t.getPriority().isEmpty(),"Priority nodes can't have a priority of their own.")},St=function(){function t(e,n){void 0===n&&(n=t.__childrenNodeConstructor.EMPTY_NODE),this.value_=e,this.priorityNode_=n,this.lazyHash_=null,a.assert(void 0!==this.value_&&null!==this.value_,"LeafNode shouldn't be created with null/undefined value."),Tt(this.priorityNode_)}return Object.defineProperty(t,"__childrenNodeConstructor",{get:function(){return bt},set:function(t){bt=t},enumerable:!0,configurable:!0}),t.prototype.isLeafNode=function(){return!0},t.prototype.getPriority=function(){return this.priorityNode_},t.prototype.updatePriority=function(e){return new t(this.value_,e)},t.prototype.getImmediateChild=function(e){return".priority"===e?this.priorityNode_:t.__childrenNodeConstructor.EMPTY_NODE},t.prototype.getChild=function(e){return e.isEmpty()?this:".priority"===e.getFront()?this.priorityNode_:t.__childrenNodeConstructor.EMPTY_NODE},t.prototype.hasChild=function(){return!1},t.prototype.getPredecessorChildName=function(t,e){return null},t.prototype.updateImmediateChild=function(e,n){return".priority"===e?this.updatePriority(n):n.isEmpty()&&".priority"!==e?this:t.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(e,n).updatePriority(this.priorityNode_)},t.prototype.updateChild=function(e,n){var r=e.getFront();return null===r?n:n.isEmpty()&&".priority"!==r?this:(a.assert(".priority"!==r||1===e.getLength(),".priority must be the last token in a path"),this.updateImmediateChild(r,t.__childrenNodeConstructor.EMPTY_NODE.updateChild(e.popFront(),n)))},t.prototype.isEmpty=function(){return!1},t.prototype.numChildren=function(){return 0},t.prototype.forEachChild=function(t,e){return!1},t.prototype.val=function(t){return t&&!this.getPriority().isEmpty()?{".value":this.getValue(),".priority":this.getPriority().val()}:this.getValue()},t.prototype.hash=function(){if(null===this.lazyHash_){var t="";this.priorityNode_.isEmpty()||(t+="priority:"+Ct(this.priorityNode_.val())+":");var e=typeof this.value_;t+=e+":",t+="number"===e?M(this.value_):this.value_,this.lazyHash_=_(t)}return this.lazyHash_},t.prototype.getValue=function(){return this.value_},t.prototype.compareTo=function(e){return e===t.__childrenNodeConstructor.EMPTY_NODE?1:e instanceof t.__childrenNodeConstructor?-1:(a.assert(e.isLeafNode(),"Unknown node type"),this.compareToLeafNode_(e))},t.prototype.compareToLeafNode_=function(e){var n=typeof e.value_,r=typeof this.value_,i=t.VALUE_TYPE_ORDER.indexOf(n),o=t.VALUE_TYPE_ORDER.indexOf(r);return a.assert(i>=0,"Unknown leaf type: "+n),a.assert(o>=0,"Unknown leaf type: "+r),i===o?"object"===r?0:this.value_<e.value_?-1:this.value_===e.value_?0:1:o-i},t.prototype.withIndex=function(){return this},t.prototype.isIndexed=function(){return!0},t.prototype.equals=function(t){if(t===this)return!0;if(t.isLeafNode()){var e=t;return this.value_===e.value_&&this.priorityNode_.equals(e.priorityNode_)}return!1},t.VALUE_TYPE_ORDER=["object","boolean","number","string"],t}();var It,Nt,At=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u.__extends(e,t),e.prototype.compare=function(t,e){var n=t.node.getPriority(),r=e.node.getPriority(),i=n.compareTo(r);return 0===i?k(t.name,e.name):i},e.prototype.isDefinedOn=function(t){return!t.getPriority().isEmpty()},e.prototype.indexedValueChanged=function(t,e){return!t.getPriority().equals(e.getPriority())},e.prototype.minPost=function(){return yt.MIN},e.prototype.maxPost=function(){return new yt(O,new St("[PRIORITY-POST]",Et))},e.prototype.makePost=function(t,e){var n=wt(t);return new yt(e,new St("[PRIORITY-POST]",n))},e.prototype.toString=function(){return".priority"},e}(_t)),Ot=function(){function t(t,e,n,r,i){void 0===i&&(i=null),this.isReverse_=r,this.resultGenerator_=i,this.nodeStack_=[];for(var o=1;!t.isEmpty();)if(t=t,o=e?n(t.key,e):1,r&&(o*=-1),o<0)t=this.isReverse_?t.left:t.right;else{if(0===o){this.nodeStack_.push(t);break}this.nodeStack_.push(t),t=this.isReverse_?t.right:t.left}}return t.prototype.getNext=function(){if(0===this.nodeStack_.length)return null;var t,e=this.nodeStack_.pop();if(t=this.resultGenerator_?this.resultGenerator_(e.key,e.value):{key:e.key,value:e.value},this.isReverse_)for(e=e.left;!e.isEmpty();)this.nodeStack_.push(e),e=e.right;else for(e=e.right;!e.isEmpty();)this.nodeStack_.push(e),e=e.left;return t},t.prototype.hasNext=function(){return this.nodeStack_.length>0},t.prototype.peek=function(){if(0===this.nodeStack_.length)return null;var t=this.nodeStack_[this.nodeStack_.length-1];return this.resultGenerator_?this.resultGenerator_(t.key,t.value):{key:t.key,value:t.value}},t}(),kt=function(){function t(e,n,r,i,o){this.key=e,this.value=n,this.color=null!=r?r:t.RED,this.left=null!=i?i:Pt.EMPTY_NODE,this.right=null!=o?o:Pt.EMPTY_NODE}return t.prototype.copy=function(e,n,r,i,o){return new t(null!=e?e:this.key,null!=n?n:this.value,null!=r?r:this.color,null!=i?i:this.left,null!=o?o:this.right)},t.prototype.count=function(){return this.left.count()+1+this.right.count()},t.prototype.isEmpty=function(){return!1},t.prototype.inorderTraversal=function(t){return this.left.inorderTraversal(t)||t(this.key,this.value)||this.right.inorderTraversal(t)},t.prototype.reverseTraversal=function(t){return this.right.reverseTraversal(t)||t(this.key,this.value)||this.left.reverseTraversal(t)},t.prototype.min_=function(){return this.left.isEmpty()?this:this.left.min_()},t.prototype.minKey=function(){return this.min_().key},t.prototype.maxKey=function(){return this.right.isEmpty()?this.key:this.right.maxKey()},t.prototype.insert=function(t,e,n){var r,i;return(i=(r=n(t,(i=this).key))<0?i.copy(null,null,null,i.left.insert(t,e,n),null):0===r?i.copy(null,e,null,null,null):i.copy(null,null,null,null,i.right.insert(t,e,n))).fixUp_()},t.prototype.removeMin_=function(){if(this.left.isEmpty())return Pt.EMPTY_NODE;var t=this;return t.left.isRed_()||t.left.left.isRed_()||(t=t.moveRedLeft_()),(t=t.copy(null,null,null,t.left.removeMin_(),null)).fixUp_()},t.prototype.remove=function(t,e){var n,r;if(e(t,(n=this).key)<0)n.left.isEmpty()||n.left.isRed_()||n.left.left.isRed_()||(n=n.moveRedLeft_()),n=n.copy(null,null,null,n.left.remove(t,e),null);else{if(n.left.isRed_()&&(n=n.rotateRight_()),n.right.isEmpty()||n.right.isRed_()||n.right.left.isRed_()||(n=n.moveRedRight_()),0===e(t,n.key)){if(n.right.isEmpty())return Pt.EMPTY_NODE;r=n.right.min_(),n=n.copy(r.key,r.value,null,null,n.right.removeMin_())}n=n.copy(null,null,null,null,n.right.remove(t,e))}return n.fixUp_()},t.prototype.isRed_=function(){return this.color},t.prototype.fixUp_=function(){var t=this;return t.right.isRed_()&&!t.left.isRed_()&&(t=t.rotateLeft_()),t.left.isRed_()&&t.left.left.isRed_()&&(t=t.rotateRight_()),t.left.isRed_()&&t.right.isRed_()&&(t=t.colorFlip_()),t},t.prototype.moveRedLeft_=function(){var t=this.colorFlip_();return t.right.left.isRed_()&&(t=(t=(t=t.copy(null,null,null,null,t.right.rotateRight_())).rotateLeft_()).colorFlip_()),t},t.prototype.moveRedRight_=function(){var t=this.colorFlip_();return t.left.left.isRed_()&&(t=(t=t.rotateRight_()).colorFlip_()),t},t.prototype.rotateLeft_=function(){var e=this.copy(null,null,t.RED,null,this.right.left);return this.right.copy(null,null,this.color,e,null)},t.prototype.rotateRight_=function(){var e=this.copy(null,null,t.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,e)},t.prototype.colorFlip_=function(){var t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e)},t.prototype.checkMaxDepth_=function(){var t=this.check_();return Math.pow(2,t)<=this.count()+1},t.prototype.check_=function(){var t;if(this.isRed_()&&this.left.isRed_())throw new Error("Red node has red child("+this.key+","+this.value+")");if(this.right.isRed_())throw new Error("Right child of ("+this.key+","+this.value+") is red");if((t=this.left.check_())!==this.right.check_())throw new Error("Black depths differ");return t+(this.isRed_()?0:1)},t.RED=!0,t.BLACK=!1,t}(),Rt=function(){function t(){}return t.prototype.copy=function(t,e,n,r,i){return this},t.prototype.insert=function(t,e,n){return new kt(t,e,null)},t.prototype.remove=function(t,e){return this},t.prototype.count=function(){return 0},t.prototype.isEmpty=function(){return!0},t.prototype.inorderTraversal=function(t){return!1},t.prototype.reverseTraversal=function(t){return!1},t.prototype.minKey=function(){return null},t.prototype.maxKey=function(){return null},t.prototype.check_=function(){return 0},t.prototype.isRed_=function(){return!1},t}(),Pt=function(){function t(e,n){void 0===n&&(n=t.EMPTY_NODE),this.comparator_=e,this.root_=n}return t.prototype.insert=function(e,n){return new t(this.comparator_,this.root_.insert(e,n,this.comparator_).copy(null,null,kt.BLACK,null,null))},t.prototype.remove=function(e){return new t(this.comparator_,this.root_.remove(e,this.comparator_).copy(null,null,kt.BLACK,null,null))},t.prototype.get=function(t){for(var e,n=this.root_;!n.isEmpty();){if(0===(e=this.comparator_(t,n.key)))return n.value;e<0?n=n.left:e>0&&(n=n.right)}return null},t.prototype.getPredecessorKey=function(t){for(var e,n=this.root_,r=null;!n.isEmpty();){if(0===(e=this.comparator_(t,n.key))){if(n.left.isEmpty())return r?r.key:null;for(n=n.left;!n.right.isEmpty();)n=n.right;return n.key}e<0?n=n.left:e>0&&(r=n,n=n.right)}throw new Error("Attempted to find predecessor key for a nonexistent key.  What gives?")},t.prototype.isEmpty=function(){return this.root_.isEmpty()},t.prototype.count=function(){return this.root_.count()},t.prototype.minKey=function(){return this.root_.minKey()},t.prototype.maxKey=function(){return this.root_.maxKey()},t.prototype.inorderTraversal=function(t){return this.root_.inorderTraversal(t)},t.prototype.reverseTraversal=function(t){return this.root_.reverseTraversal(t)},t.prototype.getIterator=function(t){return new Ot(this.root_,null,this.comparator_,!1,t)},t.prototype.getIteratorFrom=function(t,e){return new Ot(this.root_,t,this.comparator_,!1,e)},t.prototype.getReverseIteratorFrom=function(t,e){return new Ot(this.root_,t,this.comparator_,!0,e)},t.prototype.getReverseIterator=function(t){return new Ot(this.root_,null,this.comparator_,!0,t)},t.EMPTY_NODE=new Rt,t}(),Dt=Math.log(2),xt=function(){function t(t){var e;this.count=(e=t+1,parseInt(Math.log(e)/Dt,10)),this.current_=this.count-1;var n,r=(n=this.count,parseInt(Array(n+1).join("1"),2));this.bits_=t+1&r}return t.prototype.nextBitIsOne=function(){var t=!(this.bits_&1<<this.current_);return this.current_--,t},t}(),Lt=function(t,e,n,r){t.sort(e);var i=function(e,r){var o,a,s=r-e;if(0==s)return null;if(1==s)return o=t[e],a=n?n(o):o,new kt(a,o.node,kt.BLACK,null,null);var u=parseInt(s/2,10)+e,c=i(e,u),l=i(u+1,r);return o=t[u],a=n?n(o):o,new kt(a,o.node,kt.BLACK,c,l)},o=function(e){for(var r=null,o=null,a=t.length,s=function(e,r){var o=a-e,s=a;a-=e;var c=i(o+1,s),l=t[o],h=n?n(l):l;u(new kt(h,l.node,r,null,c))},u=function(t){r?(r.left=t,r=t):(o=t,r=t)},c=0;c<e.count;++c){var l=e.nextBitIsOne(),h=Math.pow(2,e.count-(c+1));l?s(h,kt.BLACK):(s(h,kt.BLACK),s(h,kt.RED))}return o}(new xt(t.length));return new Pt(r||e,o)},Mt={},Ft=function(){function t(t,e){this.indexes_=t,this.indexSet_=e}return Object.defineProperty(t,"Default",{get:function(){return a.assert(Mt&&At,"ChildrenNode.ts has not been loaded"),It=It||new t({".priority":Mt},{".priority":At})},enumerable:!0,configurable:!0}),t.prototype.get=function(t){var e=a.safeGet(this.indexes_,t);if(!e)throw new Error("No index defined for "+t);return e===Mt?null:e},t.prototype.hasIndex=function(t){return a.contains(this.indexSet_,t.toString())},t.prototype.addIndex=function(e,n){a.assert(e!==mt,"KeyIndex always exists and isn't meant to be added to the IndexMap.");for(var r,i=[],o=!1,s=n.getIterator(yt.Wrap),u=s.getNext();u;)o=o||e.isDefinedOn(u.node),i.push(u),u=s.getNext();r=o?Lt(i,e.getCompare()):Mt;var c=e.toString(),l=a.clone(this.indexSet_);l[c]=e;var h=a.clone(this.indexes_);return h[c]=r,new t(h,l)},t.prototype.addToIndexes=function(e,n){var r=this;return new t(a.map(this.indexes_,function(t,i){var o=a.safeGet(r.indexSet_,i);if(a.assert(o,"Missing index implementation for "+i),t===Mt){if(o.isDefinedOn(e.node)){for(var s=[],u=n.getIterator(yt.Wrap),c=u.getNext();c;)c.name!=e.name&&s.push(c),c=u.getNext();return s.push(e),Lt(s,o.getCompare())}return Mt}var l=n.get(e.name),h=t;return l&&(h=h.remove(new yt(e.name,l))),h.insert(e,e.node)}),this.indexSet_)},t.prototype.removeFromIndexes=function(e,n){return new t(a.map(this.indexes_,function(t){if(t===Mt)return t;var r=n.get(e.name);return r?t.remove(new yt(e.name,r)):t}),this.indexSet_)},t}();function Ut(t,e){return k(t.name,e.name)}function jt(t,e){return k(t,e)}var Bt=function(){function t(t,e,n){this.children_=t,this.priorityNode_=e,this.indexMap_=n,this.lazyHash_=null,this.priorityNode_&&Tt(this.priorityNode_),this.children_.isEmpty()&&a.assert(!this.priorityNode_||this.priorityNode_.isEmpty(),"An empty node cannot have a priority")}return Object.defineProperty(t,"EMPTY_NODE",{get:function(){return Nt||(Nt=new t(new Pt(jt),null,Ft.Default))},enumerable:!0,configurable:!0}),t.prototype.isLeafNode=function(){return!1},t.prototype.getPriority=function(){return this.priorityNode_||Nt},t.prototype.updatePriority=function(e){return this.children_.isEmpty()?this:new t(this.children_,e,this.indexMap_)},t.prototype.getImmediateChild=function(t){if(".priority"===t)return this.getPriority();var e=this.children_.get(t);return null===e?Nt:e},t.prototype.getChild=function(t){var e=t.getFront();return null===e?this:this.getImmediateChild(e).getChild(t.popFront())},t.prototype.hasChild=function(t){return null!==this.children_.get(t)},t.prototype.updateImmediateChild=function(e,n){if(a.assert(n,"We should always be passing snapshot nodes"),".priority"===e)return this.updatePriority(n);var r=new yt(e,n),i=void 0,o=void 0;return n.isEmpty()?(i=this.children_.remove(e),o=this.indexMap_.removeFromIndexes(r,this.children_)):(i=this.children_.insert(e,n),o=this.indexMap_.addToIndexes(r,this.children_)),new t(i,i.isEmpty()?Nt:this.priorityNode_,o)},t.prototype.updateChild=function(t,e){var n=t.getFront();if(null===n)return e;a.assert(".priority"!==t.getFront()||1===t.getLength(),".priority must be the last token in a path");var r=this.getImmediateChild(n).updateChild(t.popFront(),e);return this.updateImmediateChild(n,r)},t.prototype.isEmpty=function(){return this.children_.isEmpty()},t.prototype.numChildren=function(){return this.children_.count()},t.prototype.val=function(e){if(this.isEmpty())return null;var n={},r=0,i=0,o=!0;if(this.forEachChild(At,function(a,s){n[a]=s.val(e),r++,o&&t.INTEGER_REGEXP_.test(a)?i=Math.max(i,Number(a)):o=!1}),!e&&o&&i<2*r){var a=[];for(var s in n)a[s]=n[s];return a}return e&&!this.getPriority().isEmpty()&&(n[".priority"]=this.getPriority().val()),n},t.prototype.hash=function(){if(null===this.lazyHash_){var t="";this.getPriority().isEmpty()||(t+="priority:"+Ct(this.getPriority().val())+":"),this.forEachChild(At,function(e,n){var r=n.hash();""!==r&&(t+=":"+e+":"+r)}),this.lazyHash_=""===t?"":_(t)}return this.lazyHash_},t.prototype.getPredecessorChildName=function(t,e,n){var r=this.resolveIndex_(n);if(r){var i=r.getPredecessorKey(new yt(t,e));return i?i.name:null}return this.children_.getPredecessorKey(t)},t.prototype.getFirstChildName=function(t){var e=this.resolveIndex_(t);if(e){var n=e.minKey();return n&&n.name}return this.children_.minKey()},t.prototype.getFirstChild=function(t){var e=this.getFirstChildName(t);return e?new yt(e,this.children_.get(e)):null},t.prototype.getLastChildName=function(t){var e=this.resolveIndex_(t);if(e){var n=e.maxKey();return n&&n.name}return this.children_.maxKey()},t.prototype.getLastChild=function(t){var e=this.getLastChildName(t);return e?new yt(e,this.children_.get(e)):null},t.prototype.forEachChild=function(t,e){var n=this.resolveIndex_(t);return n?n.inorderTraversal(function(t){return e(t.name,t.node)}):this.children_.inorderTraversal(e)},t.prototype.getIterator=function(t){return this.getIteratorFrom(t.minPost(),t)},t.prototype.getIteratorFrom=function(t,e){var n=this.resolveIndex_(e);if(n)return n.getIteratorFrom(t,function(t){return t});for(var r=this.children_.getIteratorFrom(t.name,yt.Wrap),i=r.peek();null!=i&&e.compare(i,t)<0;)r.getNext(),i=r.peek();return r},t.prototype.getReverseIterator=function(t){return this.getReverseIteratorFrom(t.maxPost(),t)},t.prototype.getReverseIteratorFrom=function(t,e){var n=this.resolveIndex_(e);if(n)return n.getReverseIteratorFrom(t,function(t){return t});for(var r=this.children_.getReverseIteratorFrom(t.name,yt.Wrap),i=r.peek();null!=i&&e.compare(i,t)>0;)r.getNext(),i=r.peek();return r},t.prototype.compareTo=function(t){return this.isEmpty()?t.isEmpty()?0:-1:t.isLeafNode()||t.isEmpty()?1:t===Wt?-1:0},t.prototype.withIndex=function(e){if(e===mt||this.indexMap_.hasIndex(e))return this;var n=this.indexMap_.addIndex(e,this.children_);return new t(this.children_,this.priorityNode_,n)},t.prototype.isIndexed=function(t){return t===mt||this.indexMap_.hasIndex(t)},t.prototype.equals=function(t){if(t===this)return!0;if(t.isLeafNode())return!1;var e=t;if(this.getPriority().equals(e.getPriority())){if(this.children_.count()===e.children_.count()){for(var n=this.getIterator(At),r=e.getIterator(At),i=n.getNext(),o=r.getNext();i&&o;){if(i.name!==o.name||!i.node.equals(o.node))return!1;i=n.getNext(),o=r.getNext()}return null===i&&null===o}return!1}return!1},t.prototype.resolveIndex_=function(t){return t===mt?null:this.indexMap_.get(t.toString())},t.INTEGER_REGEXP_=/^(0|[1-9]\d*)$/,t}(),Wt=new(function(t){function e(){return t.call(this,new Pt(jt),Bt.EMPTY_NODE,Ft.Default)||this}return u.__extends(e,t),e.prototype.compareTo=function(t){return t===this?0:1},e.prototype.equals=function(t){return t===this},e.prototype.getPriority=function(){return this},e.prototype.getImmediateChild=function(t){return Bt.EMPTY_NODE},e.prototype.isEmpty=function(){return!1},e}(Bt));Object.defineProperties(yt,{MIN:{value:new yt(A,Bt.EMPTY_NODE)},MAX:{value:new yt(O,Wt)}}),gt.__EMPTY_NODE=Bt.EMPTY_NODE,St.__childrenNodeConstructor=Bt,X=Wt,function(t){Et=t}(Wt);var Vt=!0;function $t(t,e){if(void 0===e&&(e=null),null===t)return Bt.EMPTY_NODE;if("object"==typeof t&&".priority"in t&&(e=t[".priority"]),a.assert(null===e||"string"==typeof e||"number"==typeof e||"object"==typeof e&&".sv"in e,"Invalid priority type found: "+typeof e),"object"==typeof t&&".value"in t&&null!==t[".value"]&&(t=t[".value"]),"object"!=typeof t||".sv"in t)return new St(t,$t(e));if(t instanceof Array||!Vt){var n=Bt.EMPTY_NODE,r=t;return a.forEach(r,function(t,e){if(a.contains(r,t)&&"."!==t.substring(0,1)){var i=$t(e);!i.isLeafNode()&&i.isEmpty()||(n=n.updateImmediateChild(t,i))}}),n.updatePriority($t(e))}var i=[],o=!1,s=t;if(a.forEach(s,function(t,e){if("string"!=typeof t||"."!==t.substring(0,1)){var n=$t(s[t]);n.isEmpty()||(o=o||!n.getPriority().isEmpty(),i.push(new yt(t,n)))}}),0==i.length)return Bt.EMPTY_NODE;var u=Lt(i,Ut,function(t){return t.name},jt);if(o){var c=Lt(i,At.getCompare());return new Bt(u,$t(e),new Ft({".priority":c},{".priority":At}))}return new Bt(u,$t(e),Ft.Default)}!function(t){wt=t}($t);var qt,Ht,Kt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u.__extends(e,t),e.prototype.compare=function(t,e){var n=t.node.compareTo(e.node);return 0===n?k(t.name,e.name):n},e.prototype.isDefinedOn=function(t){return!0},e.prototype.indexedValueChanged=function(t,e){return!t.equals(e)},e.prototype.minPost=function(){return yt.MIN},e.prototype.maxPost=function(){return yt.MAX},e.prototype.makePost=function(t,e){var n=$t(t);return new yt(e,n)},e.prototype.toString=function(){return".value"},e}(_t)),Gt=function(t){function e(e){var n=t.call(this)||this;return n.indexPath_=e,a.assert(!e.isEmpty()&&".priority"!==e.getFront(),"Can't create PathIndex with empty path or .priority key"),n}return u.__extends(e,t),e.prototype.extractChild=function(t){return t.getChild(this.indexPath_)},e.prototype.isDefinedOn=function(t){return!t.getChild(this.indexPath_).isEmpty()},e.prototype.compare=function(t,e){var n=this.extractChild(t.node),r=this.extractChild(e.node),i=n.compareTo(r);return 0===i?k(t.name,e.name):i},e.prototype.makePost=function(t,e){var n=$t(t),r=Bt.EMPTY_NODE.updateChild(this.indexPath_,n);return new yt(e,r)},e.prototype.maxPost=function(){var t=Bt.EMPTY_NODE.updateChild(this.indexPath_,Wt);return new yt(O,t)},e.prototype.toString=function(){return this.indexPath_.slice().join("/")},e}(_t),Qt=function(){function t(t,e,n){this.node_=t,this.ref_=e,this.index_=n}return t.prototype.val=function(){return a.validateArgCount("DataSnapshot.val",0,0,arguments.length),this.node_.val()},t.prototype.exportVal=function(){return a.validateArgCount("DataSnapshot.exportVal",0,0,arguments.length),this.node_.val(!0)},t.prototype.toJSON=function(){return a.validateArgCount("DataSnapshot.toJSON",0,1,arguments.length),this.exportVal()},t.prototype.exists=function(){return a.validateArgCount("DataSnapshot.exists",0,0,arguments.length),!this.node_.isEmpty()},t.prototype.child=function(e){a.validateArgCount("DataSnapshot.child",0,1,arguments.length),e=String(e),lt("DataSnapshot.child",1,e,!1);var n=new V(e),r=this.ref_.child(n);return new t(this.node_.getChild(n),r,At)},t.prototype.hasChild=function(t){a.validateArgCount("DataSnapshot.hasChild",1,1,arguments.length),lt("DataSnapshot.hasChild",1,t,!1);var e=new V(t);return!this.node_.getChild(e).isEmpty()},t.prototype.getPriority=function(){return a.validateArgCount("DataSnapshot.getPriority",0,0,arguments.length),this.node_.getPriority().val()},t.prototype.forEach=function(e){var n=this;return a.validateArgCount("DataSnapshot.forEach",1,1,arguments.length),a.validateCallback("DataSnapshot.forEach",1,e,!1),!this.node_.isLeafNode()&&!!this.node_.forEachChild(this.index_,function(r,i){return e(new t(i,n.ref_.child(r),At))})},t.prototype.hasChildren=function(){return a.validateArgCount("DataSnapshot.hasChildren",0,0,arguments.length),!this.node_.isLeafNode()&&!this.node_.isEmpty()},Object.defineProperty(t.prototype,"key",{get:function(){return this.ref_.getKey()},enumerable:!0,configurable:!0}),t.prototype.numChildren=function(){return a.validateArgCount("DataSnapshot.numChildren",0,0,arguments.length),this.node_.numChildren()},t.prototype.getRef=function(){return a.validateArgCount("DataSnapshot.ref",0,0,arguments.length),this.ref_},Object.defineProperty(t.prototype,"ref",{get:function(){return this.getRef()},enumerable:!0,configurable:!0}),t}(),zt=function(){function t(t,e,n,r){this.eventType=t,this.eventRegistration=e,this.snapshot=n,this.prevName=r}return t.prototype.getPath=function(){var t=this.snapshot.getRef();return"value"===this.eventType?t.path:t.getParent().path},t.prototype.getEventType=function(){return this.eventType},t.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},t.prototype.toString=function(){return this.getPath().toString()+":"+this.eventType+":"+a.stringify(this.snapshot.exportVal())},t}(),Xt=function(){function t(t,e,n){this.eventRegistration=t,this.error=e,this.path=n}return t.prototype.getPath=function(){return this.path},t.prototype.getEventType=function(){return"cancel"},t.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},t.prototype.toString=function(){return this.path.toString()+":cancel"},t}(),Yt=function(){function t(t,e,n){this.callback_=t,this.cancelCallback_=e,this.context_=n}return t.prototype.respondsTo=function(t){return"value"===t},t.prototype.createEvent=function(t,e){var n=e.getQueryParams().getIndex();return new zt("value",this,new Qt(t.snapshotNode,e.getRef(),n))},t.prototype.getEventRunner=function(t){var e=this.context_;if("cancel"===t.getEventType()){a.assert(this.cancelCallback_,"Raising a cancel event on a listener with no cancel callback");var n=this.cancelCallback_;return function(){n.call(e,t.error)}}var r=this.callback_;return function(){r.call(e,t.snapshot)}},t.prototype.createCancelEvent=function(t,e){return this.cancelCallback_?new Xt(this,t,e):null},t.prototype.matches=function(e){return e instanceof t&&(!e.callback_||!this.callback_||e.callback_===this.callback_&&e.context_===this.context_)},t.prototype.hasAnyCallback=function(){return null!==this.callback_},t}(),Jt=function(){function t(t,e,n){this.callbacks_=t,this.cancelCallback_=e,this.context_=n}return t.prototype.respondsTo=function(t){var e="children_added"===t?"child_added":t;return e="children_removed"===e?"child_removed":e,a.contains(this.callbacks_,e)},t.prototype.createCancelEvent=function(t,e){return this.cancelCallback_?new Xt(this,t,e):null},t.prototype.createEvent=function(t,e){a.assert(null!=t.childName,"Child events should have a childName.");var n=e.getRef().child(t.childName),r=e.getQueryParams().getIndex();return new zt(t.type,this,new Qt(t.snapshotNode,n,r),t.prevName)},t.prototype.getEventRunner=function(t){var e=this.context_;if("cancel"===t.getEventType()){a.assert(this.cancelCallback_,"Raising a cancel event on a listener with no cancel callback");var n=this.cancelCallback_;return function(){n.call(e,t.error)}}var r=this.callbacks_[t.eventType];return function(){r.call(e,t.snapshot,t.prevName)}},t.prototype.matches=function(e){if(e instanceof t){if(!this.callbacks_||!e.callbacks_)return!0;if(this.context_===e.context_){var n=a.getCount(e.callbacks_);if(n===a.getCount(this.callbacks_)){if(1===n){var r=a.getAnyKey(e.callbacks_),i=a.getAnyKey(this.callbacks_);return!(i!==r||e.callbacks_[r]&&this.callbacks_[i]&&e.callbacks_[r]!==this.callbacks_[i])}return a.every(this.callbacks_,function(t,n){return e.callbacks_[t]===n})}}}return!1},t.prototype.hasAnyCallback=function(){return null!==this.callbacks_},t}(),Zt=function(){function t(t,e,n,r){this.repo=t,this.path=e,this.queryParams_=n,this.orderByCalled_=r}return Object.defineProperty(t,"__referenceConstructor",{get:function(){return a.assert(qt,"Reference.ts has not been loaded"),qt},set:function(t){qt=t},enumerable:!0,configurable:!0}),t.validateQueryEndpoints_=function(t){var e=null,n=null;if(t.hasStart()&&(e=t.getIndexStartValue()),t.hasEnd()&&(n=t.getIndexEndValue()),t.getIndex()===mt){var r="Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().",i="Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.";if(t.hasStart()){if(t.getIndexStartName()!=A)throw new Error(r);if("string"!=typeof e)throw new Error(i)}if(t.hasEnd()){if(t.getIndexEndName()!=O)throw new Error(r);if("string"!=typeof n)throw new Error(i)}}else if(t.getIndex()===At){if(null!=e&&!rt(e)||null!=n&&!rt(n))throw new Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).")}else if(a.assert(t.getIndex()instanceof Gt||t.getIndex()===Kt,"unknown index type."),null!=e&&"object"==typeof e||null!=n&&"object"==typeof n)throw new Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.")},t.validateLimit_=function(t){if(t.hasStart()&&t.hasEnd()&&t.hasLimit()&&!t.hasAnchoredLimit())throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.")},t.prototype.validateNoPreviousOrderByCall_=function(t){if(!0===this.orderByCalled_)throw new Error(t+": You can't combine multiple orderBy calls.")},t.prototype.getQueryParams=function(){return this.queryParams_},t.prototype.getRef=function(){return a.validateArgCount("Query.ref",0,0,arguments.length),new t.__referenceConstructor(this.repo,this.path)},t.prototype.on=function(e,n,r,i){a.validateArgCount("Query.on",2,4,arguments.length),ut("Query.on",1,e,!1),a.validateCallback("Query.on",2,n,!1);var o=t.getCancelAndContextArgs_("Query.on",r,i);if("value"===e)this.onValueEvent(n,o.cancel,o.context);else{var s={};s[e]=n,this.onChildEvent(s,o.cancel,o.context)}return n},t.prototype.onValueEvent=function(t,e,n){var r=new Yt(t,e||null,n||null);this.repo.addEventCallbackForQuery(this,r)},t.prototype.onChildEvent=function(t,e,n){var r=new Jt(t,e,n);this.repo.addEventCallbackForQuery(this,r)},t.prototype.off=function(t,e,n){a.validateArgCount("Query.off",0,3,arguments.length),ut("Query.off",1,t,!0),a.validateCallback("Query.off",2,e,!0),a.validateContextObject("Query.off",3,n,!0);var r=null,i=null;"value"===t?r=new Yt(e||null,null,n||null):t&&(e&&((i={})[t]=e),r=new Jt(i,null,n||null));this.repo.removeEventCallbackForQuery(this,r)},t.prototype.once=function(e,n,r,i){var o=this;a.validateArgCount("Query.once",1,4,arguments.length),ut("Query.once",1,e,!1),a.validateCallback("Query.once",2,n,!0);var s=t.getCancelAndContextArgs_("Query.once",r,i),u=!0,c=new a.Deferred;c.promise.catch(function(){});var l=function(t){u&&(u=!1,o.off(e,l),n&&n.bind(s.context)(t),c.resolve(t))};return this.on(e,l,function(t){o.off(e,l),s.cancel&&s.cancel.bind(s.context)(t),c.reject(t)}),c.promise},t.prototype.limitToFirst=function(e){if(a.validateArgCount("Query.limitToFirst",1,1,arguments.length),"number"!=typeof e||Math.floor(e)!==e||e<=0)throw new Error("Query.limitToFirst: First argument must be a positive integer.");if(this.queryParams_.hasLimit())throw new Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new t(this.repo,this.path,this.queryParams_.limitToFirst(e),this.orderByCalled_)},t.prototype.limitToLast=function(e){if(a.validateArgCount("Query.limitToLast",1,1,arguments.length),"number"!=typeof e||Math.floor(e)!==e||e<=0)throw new Error("Query.limitToLast: First argument must be a positive integer.");if(this.queryParams_.hasLimit())throw new Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new t(this.repo,this.path,this.queryParams_.limitToLast(e),this.orderByCalled_)},t.prototype.orderByChild=function(e){if(a.validateArgCount("Query.orderByChild",1,1,arguments.length),"$key"===e)throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');if("$priority"===e)throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');if("$value"===e)throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');lt("Query.orderByChild",1,e,!1),this.validateNoPreviousOrderByCall_("Query.orderByChild");var n=new V(e);if(n.isEmpty())throw new Error("Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.");var r=new Gt(n),i=this.queryParams_.orderBy(r);return t.validateQueryEndpoints_(i),new t(this.repo,this.path,i,!0)},t.prototype.orderByKey=function(){a.validateArgCount("Query.orderByKey",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByKey");var e=this.queryParams_.orderBy(mt);return t.validateQueryEndpoints_(e),new t(this.repo,this.path,e,!0)},t.prototype.orderByPriority=function(){a.validateArgCount("Query.orderByPriority",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByPriority");var e=this.queryParams_.orderBy(At);return t.validateQueryEndpoints_(e),new t(this.repo,this.path,e,!0)},t.prototype.orderByValue=function(){a.validateArgCount("Query.orderByValue",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByValue");var e=this.queryParams_.orderBy(Kt);return t.validateQueryEndpoints_(e),new t(this.repo,this.path,e,!0)},t.prototype.startAt=function(e,n){void 0===e&&(e=null),a.validateArgCount("Query.startAt",0,2,arguments.length),it("Query.startAt",1,e,this.path,!0),ct("Query.startAt",2,n,!0);var r=this.queryParams_.startAt(e,n);if(t.validateLimit_(r),t.validateQueryEndpoints_(r),this.queryParams_.hasStart())throw new Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");return void 0===e&&(e=null,n=null),new t(this.repo,this.path,r,this.orderByCalled_)},t.prototype.endAt=function(e,n){void 0===e&&(e=null),a.validateArgCount("Query.endAt",0,2,arguments.length),it("Query.endAt",1,e,this.path,!0),ct("Query.endAt",2,n,!0);var r=this.queryParams_.endAt(e,n);if(t.validateLimit_(r),t.validateQueryEndpoints_(r),this.queryParams_.hasEnd())throw new Error("Query.endAt: Ending point was already set (by another call to endAt or equalTo).");return new t(this.repo,this.path,r,this.orderByCalled_)},t.prototype.equalTo=function(t,e){if(a.validateArgCount("Query.equalTo",1,2,arguments.length),it("Query.equalTo",1,t,this.path,!1),ct("Query.equalTo",2,e,!0),this.queryParams_.hasStart())throw new Error("Query.equalTo: Starting point was already set (by another call to startAt or equalTo).");if(this.queryParams_.hasEnd())throw new Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");return this.startAt(t,e).endAt(t,e)},t.prototype.toString=function(){return a.validateArgCount("Query.toString",0,0,arguments.length),this.repo.toString()+this.path.toUrlEncodedString()},t.prototype.toJSON=function(){return a.validateArgCount("Query.toJSON",0,1,arguments.length),this.toString()},t.prototype.queryObject=function(){return this.queryParams_.getQueryObject()},t.prototype.queryIdentifier=function(){var t=this.queryObject(),e=D(t);return"{}"===e?"default":e},t.prototype.isEqual=function(e){if(a.validateArgCount("Query.isEqual",1,1,arguments.length),!(e instanceof t)){throw new Error("Query.isEqual failed: First argument must be an instance of firebase.database.Query.")}var n=this.repo===e.repo,r=this.path.equals(e.path),i=this.queryIdentifier()===e.queryIdentifier();return n&&r&&i},t.getCancelAndContextArgs_=function(t,e,n){var r={cancel:null,context:null};if(e&&n)r.cancel=e,a.validateCallback(t,3,r.cancel,!0),r.context=n,a.validateContextObject(t,4,r.context,!0);else if(e)if("object"==typeof e&&null!==e)r.context=e;else{if("function"!=typeof e)throw new Error(a.errorPrefix(t,3,!0)+" must either be a cancel callback or a context object.");r.cancel=e}return r},Object.defineProperty(t.prototype,"ref",{get:function(){return this.getRef()},enumerable:!0,configurable:!0}),t}(),te=function(){function t(){this.set={}}return t.prototype.add=function(t,e){this.set[t]=null===e||e},t.prototype.contains=function(t){return a.contains(this.set,t)},t.prototype.get=function(t){return this.contains(t)?this.set[t]:void 0},t.prototype.remove=function(t){delete this.set[t]},t.prototype.clear=function(){this.set={}},t.prototype.isEmpty=function(){return a.isEmpty(this.set)},t.prototype.count=function(){return a.getCount(this.set)},t.prototype.each=function(t){a.forEach(this.set,function(e,n){return t(e,n)})},t.prototype.keys=function(){var t=[];return a.forEach(this.set,function(e){t.push(e)}),t},t}(),ee=function(){function t(){this.value_=null,this.children_=null}return t.prototype.find=function(t){if(null!=this.value_)return this.value_.getChild(t);if(t.isEmpty()||null==this.children_)return null;var e=t.getFront();return t=t.popFront(),this.children_.contains(e)?this.children_.get(e).find(t):null},t.prototype.remember=function(e,n){if(e.isEmpty())this.value_=n,this.children_=null;else if(null!==this.value_)this.value_=this.value_.updateChild(e,n);else{null==this.children_&&(this.children_=new te);var r=e.getFront();this.children_.contains(r)||this.children_.add(r,new t);var i=this.children_.get(r);e=e.popFront(),i.remember(e,n)}},t.prototype.forget=function(t){if(t.isEmpty())return this.value_=null,this.children_=null,!0;if(null!==this.value_){if(this.value_.isLeafNode())return!1;var e=this.value_;this.value_=null;var n=this;return e.forEachChild(At,function(t,e){n.remember(new V(t),e)}),this.forget(t)}if(null!==this.children_){var r=t.getFront();if(t=t.popFront(),this.children_.contains(r))this.children_.get(r).forget(t)&&this.children_.remove(r);return!!this.children_.isEmpty()&&(this.children_=null,!0)}return!0},t.prototype.forEachTree=function(t,e){null!==this.value_?e(t,this.value_):this.forEachChild(function(n,r){var i=new V(t.toString()+"/"+n);r.forEachTree(i,e)})},t.prototype.forEachChild=function(t){null!==this.children_&&this.children_.each(function(e,n){t(e,n)})},t}(),ne=function(t,e){return t&&"object"==typeof t?(a.assert(".sv"in t,"Unexpected leaf node or priority contents"),e[t[".sv"]]):t},re=function(t,e){var n,r=t.getPriority().val(),i=ne(r,e);if(t.isLeafNode()){var o=t,a=ne(o.getValue(),e);return a!==o.getValue()||i!==o.getPriority().val()?new St(a,$t(i)):t}var s=t;return n=s,i!==s.getPriority().val()&&(n=n.updatePriority(new St(i))),s.forEachChild(At,function(t,r){var i=re(r,e);i!==r&&(n=n.updateImmediateChild(t,i))}),n};!function(t){t[t.OVERWRITE=0]="OVERWRITE",t[t.MERGE=1]="MERGE",t[t.ACK_USER_WRITE=2]="ACK_USER_WRITE",t[t.LISTEN_COMPLETE=3]="LISTEN_COMPLETE"}(Ht||(Ht={}));var ie,oe,ae=function(){function t(t,e,n,r){this.fromUser=t,this.fromServer=e,this.queryId=n,this.tagged=r,a.assert(!r||e,"Tagged queries must be from server.")}return t.User=new t(!0,!1,null,!1),t.Server=new t(!1,!0,null,!1),t.forServerTaggedQuery=function(e){return new t(!1,!0,e,!0)},t}(),se=function(){function t(t,e,n){this.path=t,this.affectedTree=e,this.revert=n,this.type=Ht.ACK_USER_WRITE,this.source=ae.User}return t.prototype.operationForChild=function(e){if(this.path.isEmpty()){if(null!=this.affectedTree.value)return a.assert(this.affectedTree.children.isEmpty(),"affectedTree should not have overlapping affected paths."),this;var n=this.affectedTree.subtree(new V(e));return new t(V.Empty,n,this.revert)}return a.assert(this.path.getFront()===e,"operationForChild called for unrelated child."),new t(this.path.popFront(),this.affectedTree,this.revert)},t}(),ue=function(){return ie||(ie=new Pt(R)),ie},ce=function(){function t(t,e){void 0===e&&(e=ue()),this.value=t,this.children=e}return t.fromObject=function(e){var n=t.Empty;return a.forEach(e,function(t,e){n=n.set(new V(t),e)}),n},t.prototype.isEmpty=function(){return null===this.value&&this.children.isEmpty()},t.prototype.findRootMostMatchingPathAndValue=function(t,e){if(null!=this.value&&e(this.value))return{path:V.Empty,value:this.value};if(t.isEmpty())return null;var n=t.getFront(),r=this.children.get(n);if(null!==r){var i=r.findRootMostMatchingPathAndValue(t.popFront(),e);return null!=i?{path:new V(n).child(i.path),value:i.value}:null}return null},t.prototype.findRootMostValueAndPath=function(t){return this.findRootMostMatchingPathAndValue(t,function(){return!0})},t.prototype.subtree=function(e){if(e.isEmpty())return this;var n=e.getFront(),r=this.children.get(n);return null!==r?r.subtree(e.popFront()):t.Empty},t.prototype.set=function(e,n){if(e.isEmpty())return new t(n,this.children);var r=e.getFront(),i=(this.children.get(r)||t.Empty).set(e.popFront(),n),o=this.children.insert(r,i);return new t(this.value,o)},t.prototype.remove=function(e){if(e.isEmpty())return this.children.isEmpty()?t.Empty:new t(null,this.children);var n=e.getFront(),r=this.children.get(n);if(r){var i=r.remove(e.popFront()),o=void 0;return o=i.isEmpty()?this.children.remove(n):this.children.insert(n,i),null===this.value&&o.isEmpty()?t.Empty:new t(this.value,o)}return this},t.prototype.get=function(t){if(t.isEmpty())return this.value;var e=t.getFront(),n=this.children.get(e);return n?n.get(t.popFront()):null},t.prototype.setTree=function(e,n){if(e.isEmpty())return n;var r=e.getFront(),i=(this.children.get(r)||t.Empty).setTree(e.popFront(),n),o=void 0;return o=i.isEmpty()?this.children.remove(r):this.children.insert(r,i),new t(this.value,o)},t.prototype.fold=function(t){return this.fold_(V.Empty,t)},t.prototype.fold_=function(t,e){var n={};return this.children.inorderTraversal(function(r,i){n[r]=i.fold_(t.child(r),e)}),e(t,this.value,n)},t.prototype.findOnPath=function(t,e){return this.findOnPath_(t,V.Empty,e)},t.prototype.findOnPath_=function(t,e,n){var r=!!this.value&&n(e,this.value);if(r)return r;if(t.isEmpty())return null;var i=t.getFront(),o=this.children.get(i);return o?o.findOnPath_(t.popFront(),e.child(i),n):null},t.prototype.foreachOnPath=function(t,e){return this.foreachOnPath_(t,V.Empty,e)},t.prototype.foreachOnPath_=function(e,n,r){if(e.isEmpty())return this;this.value&&r(n,this.value);var i=e.getFront(),o=this.children.get(i);return o?o.foreachOnPath_(e.popFront(),n.child(i),r):t.Empty},t.prototype.foreach=function(t){this.foreach_(V.Empty,t)},t.prototype.foreach_=function(t,e){this.children.inorderTraversal(function(n,r){r.foreach_(t.child(n),e)}),this.value&&e(t,this.value)},t.prototype.foreachChild=function(t){this.children.inorderTraversal(function(e,n){n.value&&t(e,n.value)})},t.Empty=new t(null),t}(),le=function(){function t(t,e){this.source=t,this.path=e,this.type=Ht.LISTEN_COMPLETE}return t.prototype.operationForChild=function(e){return this.path.isEmpty()?new t(this.source,V.Empty):new t(this.source,this.path.popFront())},t}(),he=function(){function t(t,e,n){this.source=t,this.path=e,this.snap=n,this.type=Ht.OVERWRITE}return t.prototype.operationForChild=function(e){return this.path.isEmpty()?new t(this.source,V.Empty,this.snap.getImmediateChild(e)):new t(this.source,this.path.popFront(),this.snap)},t}(),fe=function(){function t(t,e,n){this.source=t,this.path=e,this.children=n,this.type=Ht.MERGE}return t.prototype.operationForChild=function(e){if(this.path.isEmpty()){var n=this.children.subtree(new V(e));return n.isEmpty()?null:n.value?new he(this.source,V.Empty,n.value):new t(this.source,V.Empty,n)}return a.assert(this.path.getFront()===e,"Can't get a merge for a child not on the path of the operation"),new t(this.source,this.path.popFront(),this.children)},t.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"},t}(),pe=function(){function t(t,e,n){this.node_=t,this.fullyInitialized_=e,this.filtered_=n}return t.prototype.isFullyInitialized=function(){return this.fullyInitialized_},t.prototype.isFiltered=function(){return this.filtered_},t.prototype.isCompleteForPath=function(t){if(t.isEmpty())return this.isFullyInitialized()&&!this.filtered_;var e=t.getFront();return this.isCompleteForChild(e)},t.prototype.isCompleteForChild=function(t){return this.isFullyInitialized()&&!this.filtered_||this.node_.hasChild(t)},t.prototype.getNode=function(){return this.node_},t}(),de=function(){function t(t,e){this.eventCache_=t,this.serverCache_=e}return t.prototype.updateEventSnap=function(e,n,r){return new t(new pe(e,n,r),this.serverCache_)},t.prototype.updateServerSnap=function(e,n,r){return new t(this.eventCache_,new pe(e,n,r))},t.prototype.getEventCache=function(){return this.eventCache_},t.prototype.getCompleteEventSnap=function(){return this.eventCache_.isFullyInitialized()?this.eventCache_.getNode():null},t.prototype.getServerCache=function(){return this.serverCache_},t.prototype.getCompleteServerSnap=function(){return this.serverCache_.isFullyInitialized()?this.serverCache_.getNode():null},t.Empty=new t(new pe(Bt.EMPTY_NODE,!1,!1),new pe(Bt.EMPTY_NODE,!1,!1)),t}(),ve=function(){function t(t,e,n,r,i){this.type=t,this.snapshotNode=e,this.childName=n,this.oldSnap=r,this.prevName=i}return t.valueChange=function(e){return new t(t.VALUE,e)},t.childAddedChange=function(e,n){return new t(t.CHILD_ADDED,n,e)},t.childRemovedChange=function(e,n){return new t(t.CHILD_REMOVED,n,e)},t.childChangedChange=function(e,n,r){return new t(t.CHILD_CHANGED,n,e,r)},t.childMovedChange=function(e,n){return new t(t.CHILD_MOVED,n,e)},t.CHILD_ADDED="child_added",t.CHILD_REMOVED="child_removed",t.CHILD_CHANGED="child_changed",t.CHILD_MOVED="child_moved",t.VALUE="value",t}(),ye=function(){function t(t){this.index_=t}return t.prototype.updateChild=function(t,e,n,r,i,o){a.assert(t.isIndexed(this.index_),"A node must be indexed if only a child is updated");var s=t.getImmediateChild(e);return s.getChild(r).equals(n.getChild(r))&&s.isEmpty()==n.isEmpty()?t:(null!=o&&(n.isEmpty()?t.hasChild(e)?o.trackChildChange(ve.childRemovedChange(e,s)):a.assert(t.isLeafNode(),"A child remove without an old child only makes sense on a leaf node"):s.isEmpty()?o.trackChildChange(ve.childAddedChange(e,n)):o.trackChildChange(ve.childChangedChange(e,n,s))),t.isLeafNode()&&n.isEmpty()?t:t.updateImmediateChild(e,n).withIndex(this.index_))},t.prototype.updateFullNode=function(t,e,n){return null!=n&&(t.isLeafNode()||t.forEachChild(At,function(t,r){e.hasChild(t)||n.trackChildChange(ve.childRemovedChange(t,r))}),e.isLeafNode()||e.forEachChild(At,function(e,r){if(t.hasChild(e)){var i=t.getImmediateChild(e);i.equals(r)||n.trackChildChange(ve.childChangedChange(e,r,i))}else n.trackChildChange(ve.childAddedChange(e,r))})),e.withIndex(this.index_)},t.prototype.updatePriority=function(t,e){return t.isEmpty()?Bt.EMPTY_NODE:t.updatePriority(e)},t.prototype.filtersNodes=function(){return!1},t.prototype.getIndexedFilter=function(){return this},t.prototype.getIndex=function(){return this.index_},t}(),_e=function(){function t(){this.changeMap_={}}return t.prototype.trackChildChange=function(t){var e=t.type,n=t.childName;a.assert(e==ve.CHILD_ADDED||e==ve.CHILD_CHANGED||e==ve.CHILD_REMOVED,"Only child changes supported for tracking"),a.assert(".priority"!==n,"Only non-priority child changes can be tracked.");var r=a.safeGet(this.changeMap_,n);if(r){var i=r.type;if(e==ve.CHILD_ADDED&&i==ve.CHILD_REMOVED)this.changeMap_[n]=ve.childChangedChange(n,t.snapshotNode,r.snapshotNode);else if(e==ve.CHILD_REMOVED&&i==ve.CHILD_ADDED)delete this.changeMap_[n];else if(e==ve.CHILD_REMOVED&&i==ve.CHILD_CHANGED)this.changeMap_[n]=ve.childRemovedChange(n,r.oldSnap);else if(e==ve.CHILD_CHANGED&&i==ve.CHILD_ADDED)this.changeMap_[n]=ve.childAddedChange(n,t.snapshotNode);else{if(e!=ve.CHILD_CHANGED||i!=ve.CHILD_CHANGED)throw a.assertionError("Illegal combination of changes: "+t+" occurred after "+r);this.changeMap_[n]=ve.childChangedChange(n,t.snapshotNode,r.oldSnap)}}else this.changeMap_[n]=t},t.prototype.getChanges=function(){return a.getValues(this.changeMap_)},t}(),ge=new(function(){function t(){}return t.prototype.getCompleteChild=function(t){return null},t.prototype.getChildAfterChild=function(t,e,n){return null},t}()),me=function(){function t(t,e,n){void 0===n&&(n=null),this.writes_=t,this.viewCache_=e,this.optCompleteServerCache_=n}return t.prototype.getCompleteChild=function(t){var e=this.viewCache_.getEventCache();if(e.isCompleteForChild(t))return e.getNode().getImmediateChild(t);var n=null!=this.optCompleteServerCache_?new pe(this.optCompleteServerCache_,!0,!1):this.viewCache_.getServerCache();return this.writes_.calcCompleteChild(t,n)},t.prototype.getChildAfterChild=function(t,e,n){var r=null!=this.optCompleteServerCache_?this.optCompleteServerCache_:this.viewCache_.getCompleteServerSnap(),i=this.writes_.calcIndexedSlice(r,e,1,n,t);return 0===i.length?null:i[0]},t}(),be=function(){return function(t,e){this.viewCache=t,this.changes=e}}(),we=function(){function t(t){this.filter_=t}return t.prototype.assertIndexed=function(t){a.assert(t.getEventCache().getNode().isIndexed(this.filter_.getIndex()),"Event snap not indexed"),a.assert(t.getServerCache().getNode().isIndexed(this.filter_.getIndex()),"Server snap not indexed")},t.prototype.applyOperation=function(e,n,r,i){var o,s,u=new _e;if(n.type===Ht.OVERWRITE){var c=n;c.source.fromUser?o=this.applyUserOverwrite_(e,c.path,c.snap,r,i,u):(a.assert(c.source.fromServer,"Unknown source."),s=c.source.tagged||e.getServerCache().isFiltered()&&!c.path.isEmpty(),o=this.applyServerOverwrite_(e,c.path,c.snap,r,i,s,u))}else if(n.type===Ht.MERGE){var l=n;l.source.fromUser?o=this.applyUserMerge_(e,l.path,l.children,r,i,u):(a.assert(l.source.fromServer,"Unknown source."),s=l.source.tagged||e.getServerCache().isFiltered(),o=this.applyServerMerge_(e,l.path,l.children,r,i,s,u))}else if(n.type===Ht.ACK_USER_WRITE){var h=n;o=h.revert?this.revertUserWrite_(e,h.path,r,i,u):this.ackUserWrite_(e,h.path,h.affectedTree,r,i,u)}else{if(n.type!==Ht.LISTEN_COMPLETE)throw a.assertionError("Unknown operation type: "+n.type);o=this.listenComplete_(e,n.path,r,u)}var f=u.getChanges();return t.maybeAddValueEvent_(e,o,f),new be(o,f)},t.maybeAddValueEvent_=function(t,e,n){var r=e.getEventCache();if(r.isFullyInitialized()){var i=r.getNode().isLeafNode()||r.getNode().isEmpty(),o=t.getCompleteEventSnap();(n.length>0||!t.getEventCache().isFullyInitialized()||i&&!r.getNode().equals(o)||!r.getNode().getPriority().equals(o.getPriority()))&&n.push(ve.valueChange(e.getCompleteEventSnap()))}},t.prototype.generateEventCacheAfterServerEvent_=function(t,e,n,r,i){var o=t.getEventCache();if(null!=n.shadowingWrite(e))return t;var s=void 0,u=void 0;if(e.isEmpty())if(a.assert(t.getServerCache().isFullyInitialized(),"If change path is empty, we must have complete server data"),t.getServerCache().isFiltered()){var c=t.getCompleteServerSnap(),l=c instanceof Bt?c:Bt.EMPTY_NODE,h=n.calcCompleteEventChildren(l);s=this.filter_.updateFullNode(t.getEventCache().getNode(),h,i)}else{var f=n.calcCompleteEventCache(t.getCompleteServerSnap());s=this.filter_.updateFullNode(t.getEventCache().getNode(),f,i)}else{var p=e.getFront();if(".priority"==p){a.assert(1==e.getLength(),"Can't have a priority with additional path components");var d=o.getNode();u=t.getServerCache().getNode();var v=n.calcEventCacheAfterServerOverwrite(e,d,u);s=null!=v?this.filter_.updatePriority(d,v):o.getNode()}else{var y=e.popFront(),_=void 0;if(o.isCompleteForChild(p)){u=t.getServerCache().getNode();var g=n.calcEventCacheAfterServerOverwrite(e,o.getNode(),u);_=null!=g?o.getNode().getImmediateChild(p).updateChild(y,g):o.getNode().getImmediateChild(p)}else _=n.calcCompleteChild(p,t.getServerCache());s=null!=_?this.filter_.updateChild(o.getNode(),p,_,y,r,i):o.getNode()}}return t.updateEventSnap(s,o.isFullyInitialized()||e.isEmpty(),this.filter_.filtersNodes())},t.prototype.applyServerOverwrite_=function(t,e,n,r,i,o,a){var s,u=t.getServerCache(),c=o?this.filter_:this.filter_.getIndexedFilter();if(e.isEmpty())s=c.updateFullNode(u.getNode(),n,null);else if(c.filtersNodes()&&!u.isFiltered()){var l=u.getNode().updateChild(e,n);s=c.updateFullNode(u.getNode(),l,null)}else{var h=e.getFront();if(!u.isCompleteForPath(e)&&e.getLength()>1)return t;var f=e.popFront(),p=u.getNode().getImmediateChild(h).updateChild(f,n);s=".priority"==h?c.updatePriority(u.getNode(),p):c.updateChild(u.getNode(),h,p,f,ge,null)}var d=t.updateServerSnap(s,u.isFullyInitialized()||e.isEmpty(),c.filtersNodes()),v=new me(r,d,i);return this.generateEventCacheAfterServerEvent_(d,e,r,v,a)},t.prototype.applyUserOverwrite_=function(t,e,n,r,i,o){var a,s,u=t.getEventCache(),c=new me(r,t,i);if(e.isEmpty())s=this.filter_.updateFullNode(t.getEventCache().getNode(),n,o),a=t.updateEventSnap(s,!0,this.filter_.filtersNodes());else{var l=e.getFront();if(".priority"===l)s=this.filter_.updatePriority(t.getEventCache().getNode(),n),a=t.updateEventSnap(s,u.isFullyInitialized(),u.isFiltered());else{var h=e.popFront(),f=u.getNode().getImmediateChild(l),p=void 0;if(h.isEmpty())p=n;else{var d=c.getCompleteChild(l);p=null!=d?".priority"===h.getBack()&&d.getChild(h.parent()).isEmpty()?d:d.updateChild(h,n):Bt.EMPTY_NODE}if(f.equals(p))a=t;else{var v=this.filter_.updateChild(u.getNode(),l,p,h,c,o);a=t.updateEventSnap(v,u.isFullyInitialized(),this.filter_.filtersNodes())}}}return a},t.cacheHasChild_=function(t,e){return t.getEventCache().isCompleteForChild(e)},t.prototype.applyUserMerge_=function(e,n,r,i,o,a){var s=this,u=e;return r.foreach(function(r,c){var l=n.child(r);t.cacheHasChild_(e,l.getFront())&&(u=s.applyUserOverwrite_(u,l,c,i,o,a))}),r.foreach(function(r,c){var l=n.child(r);t.cacheHasChild_(e,l.getFront())||(u=s.applyUserOverwrite_(u,l,c,i,o,a))}),u},t.prototype.applyMerge_=function(t,e){return e.foreach(function(e,n){t=t.updateChild(e,n)}),t},t.prototype.applyServerMerge_=function(t,e,n,r,i,o,a){var s=this;if(t.getServerCache().getNode().isEmpty()&&!t.getServerCache().isFullyInitialized())return t;var u,c=t;u=e.isEmpty()?n:ce.Empty.setTree(e,n);var l=t.getServerCache().getNode();return u.children.inorderTraversal(function(e,n){if(l.hasChild(e)){var u=t.getServerCache().getNode().getImmediateChild(e),h=s.applyMerge_(u,n);c=s.applyServerOverwrite_(c,new V(e),h,r,i,o,a)}}),u.children.inorderTraversal(function(e,n){var u=!t.getServerCache().isCompleteForChild(e)&&null==n.value;if(!l.hasChild(e)&&!u){var h=t.getServerCache().getNode().getImmediateChild(e),f=s.applyMerge_(h,n);c=s.applyServerOverwrite_(c,new V(e),f,r,i,o,a)}}),c},t.prototype.ackUserWrite_=function(t,e,n,r,i,o){if(null!=r.shadowingWrite(e))return t;var a=t.getServerCache().isFiltered(),s=t.getServerCache();if(null!=n.value){if(e.isEmpty()&&s.isFullyInitialized()||s.isCompleteForPath(e))return this.applyServerOverwrite_(t,e,s.getNode().getChild(e),r,i,a,o);if(e.isEmpty()){var u=ce.Empty;return s.getNode().forEachChild(mt,function(t,e){u=u.set(new V(t),e)}),this.applyServerMerge_(t,e,u,r,i,a,o)}return t}var c=ce.Empty;return n.foreach(function(t,n){var r=e.child(t);s.isCompleteForPath(r)&&(c=c.set(t,s.getNode().getChild(r)))}),this.applyServerMerge_(t,e,c,r,i,a,o)},t.prototype.listenComplete_=function(t,e,n,r){var i=t.getServerCache(),o=t.updateServerSnap(i.getNode(),i.isFullyInitialized()||e.isEmpty(),i.isFiltered());return this.generateEventCacheAfterServerEvent_(o,e,n,ge,r)},t.prototype.revertUserWrite_=function(t,e,n,r,i){var o;if(null!=n.shadowingWrite(e))return t;var s=new me(n,t,r),u=t.getEventCache().getNode(),c=void 0;if(e.isEmpty()||".priority"===e.getFront()){var l=void 0;if(t.getServerCache().isFullyInitialized())l=n.calcCompleteEventCache(t.getCompleteServerSnap());else{var h=t.getServerCache().getNode();a.assert(h instanceof Bt,"serverChildren would be complete if leaf node"),l=n.calcCompleteEventChildren(h)}l=l,c=this.filter_.updateFullNode(u,l,i)}else{var f=e.getFront(),p=n.calcCompleteChild(f,t.getServerCache());null==p&&t.getServerCache().isCompleteForChild(f)&&(p=u.getImmediateChild(f)),(c=null!=p?this.filter_.updateChild(u,f,p,e.popFront(),s,i):t.getEventCache().getNode().hasChild(f)?this.filter_.updateChild(u,f,Bt.EMPTY_NODE,e.popFront(),s,i):u).isEmpty()&&t.getServerCache().isFullyInitialized()&&(o=n.calcCompleteEventCache(t.getCompleteServerSnap())).isLeafNode()&&(c=this.filter_.updateFullNode(c,o,i))}return o=t.getServerCache().isFullyInitialized()||null!=n.shadowingWrite(V.Empty),t.updateEventSnap(c,o,this.filter_.filtersNodes())},t}(),Ee=function(){function t(t){this.query_=t,this.index_=this.query_.getQueryParams().getIndex()}return t.prototype.generateEventsForChanges=function(t,e,n){var r=this,i=[],o=[];return t.forEach(function(t){t.type===ve.CHILD_CHANGED&&r.index_.indexedValueChanged(t.oldSnap,t.snapshotNode)&&o.push(ve.childMovedChange(t.childName,t.snapshotNode))}),this.generateEventsForType_(i,ve.CHILD_REMOVED,t,n,e),this.generateEventsForType_(i,ve.CHILD_ADDED,t,n,e),this.generateEventsForType_(i,ve.CHILD_MOVED,o,n,e),this.generateEventsForType_(i,ve.CHILD_CHANGED,t,n,e),this.generateEventsForType_(i,ve.VALUE,t,n,e),i},t.prototype.generateEventsForType_=function(t,e,n,r,i){var o=this,a=n.filter(function(t){return t.type===e});a.sort(this.compareChanges_.bind(this)),a.forEach(function(e){var n=o.materializeSingleChange_(e,i);r.forEach(function(r){r.respondsTo(e.type)&&t.push(r.createEvent(n,o.query_))})})},t.prototype.materializeSingleChange_=function(t,e){return"value"===t.type||"child_removed"===t.type?t:(t.prevName=e.getPredecessorChildName(t.childName,t.snapshotNode,this.index_),t)},t.prototype.compareChanges_=function(t,e){if(null==t.childName||null==e.childName)throw a.assertionError("Should only compare child_ events.");var n=new yt(t.childName,t.snapshotNode),r=new yt(e.childName,e.snapshotNode);return this.index_.compare(n,r)},t}(),Ce=function(){function t(t,e){this.query_=t,this.eventRegistrations_=[];var n=this.query_.getQueryParams(),r=new ye(n.getIndex()),i=n.getNodeFilter();this.processor_=new we(i);var o=e.getServerCache(),a=e.getEventCache(),s=r.updateFullNode(Bt.EMPTY_NODE,o.getNode(),null),u=i.updateFullNode(Bt.EMPTY_NODE,a.getNode(),null),c=new pe(s,o.isFullyInitialized(),r.filtersNodes()),l=new pe(u,a.isFullyInitialized(),i.filtersNodes());this.viewCache_=new de(l,c),this.eventGenerator_=new Ee(this.query_)}return t.prototype.getQuery=function(){return this.query_},t.prototype.getServerCache=function(){return this.viewCache_.getServerCache().getNode()},t.prototype.getCompleteServerCache=function(t){var e=this.viewCache_.getCompleteServerSnap();return e&&(this.query_.getQueryParams().loadsAllData()||!t.isEmpty()&&!e.getImmediateChild(t.getFront()).isEmpty())?e.getChild(t):null},t.prototype.isEmpty=function(){return 0===this.eventRegistrations_.length},t.prototype.addEventRegistration=function(t){this.eventRegistrations_.push(t)},t.prototype.removeEventRegistration=function(t,e){var n=[];if(e){a.assert(null==t,"A cancel should cancel all event registrations.");var r=this.query_.path;this.eventRegistrations_.forEach(function(t){e=e;var i=t.createCancelEvent(e,r);i&&n.push(i)})}if(t){for(var i=[],o=0;o<this.eventRegistrations_.length;++o){var s=this.eventRegistrations_[o];if(s.matches(t)){if(t.hasAnyCallback()){i=i.concat(this.eventRegistrations_.slice(o+1));break}}else i.push(s)}this.eventRegistrations_=i}else this.eventRegistrations_=[];return n},t.prototype.applyOperation=function(t,e,n){t.type===Ht.MERGE&&null!==t.source.queryId&&(a.assert(this.viewCache_.getCompleteServerSnap(),"We should always have a full cache before handling merges"),a.assert(this.viewCache_.getCompleteEventSnap(),"Missing event cache, even though we have a server cache"));var r=this.viewCache_,i=this.processor_.applyOperation(r,t,e,n);return this.processor_.assertIndexed(i.viewCache),a.assert(i.viewCache.getServerCache().isFullyInitialized()||!r.getServerCache().isFullyInitialized(),"Once a server snap is complete, it should never go back"),this.viewCache_=i.viewCache,this.generateEventsForChanges_(i.changes,i.viewCache.getEventCache().getNode(),null)},t.prototype.getInitialEvents=function(t){var e=this.viewCache_.getEventCache(),n=[];e.getNode().isLeafNode()||e.getNode().forEachChild(At,function(t,e){n.push(ve.childAddedChange(t,e))});return e.isFullyInitialized()&&n.push(ve.valueChange(e.getNode())),this.generateEventsForChanges_(n,e.getNode(),t)},t.prototype.generateEventsForChanges_=function(t,e,n){var r=n?[n]:this.eventRegistrations_;return this.eventGenerator_.generateEventsForChanges(t,e,r)},t}(),Te=function(){function t(){this.views_={}}return Object.defineProperty(t,"__referenceConstructor",{get:function(){return a.assert(oe,"Reference.ts has not been loaded"),oe},set:function(t){a.assert(!oe,"__referenceConstructor has already been defined"),oe=t},enumerable:!0,configurable:!0}),t.prototype.isEmpty=function(){return a.isEmpty(this.views_)},t.prototype.applyOperation=function(t,e,n){var r=t.source.queryId;if(null!==r){var i=a.safeGet(this.views_,r);return a.assert(null!=i,"SyncTree gave us an op for an invalid query."),i.applyOperation(t,e,n)}var o=[];return a.forEach(this.views_,function(r,i){o=o.concat(i.applyOperation(t,e,n))}),o},t.prototype.addEventRegistration=function(t,e,n,r,i){var o=t.queryIdentifier(),s=a.safeGet(this.views_,o);if(!s){var u=n.calcCompleteEventCache(i?r:null),c=!1;u?c=!0:r instanceof Bt?(u=n.calcCompleteEventChildren(r),c=!1):(u=Bt.EMPTY_NODE,c=!1);var l=new de(new pe(u,c,!1),new pe(r,i,!1));s=new Ce(t,l),this.views_[o]=s}return s.addEventRegistration(e),s.getInitialEvents(e)},t.prototype.removeEventRegistration=function(e,n,r){var i=e.queryIdentifier(),o=[],s=[],u=this.hasCompleteView();if("default"===i){var c=this;a.forEach(this.views_,function(t,e){s=s.concat(e.removeEventRegistration(n,r)),e.isEmpty()&&(delete c.views_[t],e.getQuery().getQueryParams().loadsAllData()||o.push(e.getQuery()))})}else{var l=a.safeGet(this.views_,i);l&&(s=s.concat(l.removeEventRegistration(n,r)),l.isEmpty()&&(delete this.views_[i],l.getQuery().getQueryParams().loadsAllData()||o.push(l.getQuery())))}return u&&!this.hasCompleteView()&&o.push(new t.__referenceConstructor(e.repo,e.path)),{removed:o,events:s}},t.prototype.getQueryViews=function(){var t=this;return Object.keys(this.views_).map(function(e){return t.views_[e]}).filter(function(t){return!t.getQuery().getQueryParams().loadsAllData()})},t.prototype.getCompleteServerCache=function(t){var e=null;return a.forEach(this.views_,function(n,r){e=e||r.getCompleteServerCache(t)}),e},t.prototype.viewForQuery=function(t){if(t.getQueryParams().loadsAllData())return this.getCompleteView();var e=t.queryIdentifier();return a.safeGet(this.views_,e)},t.prototype.viewExistsForQuery=function(t){return null!=this.viewForQuery(t)},t.prototype.hasCompleteView=function(){return null!=this.getCompleteView()},t.prototype.getCompleteView=function(){return a.findValue(this.views_,function(t){return t.getQuery().getQueryParams().loadsAllData()})||null},t}(),Se=function(){function t(t){this.writeTree_=t}return t.prototype.addWrite=function(e,n){if(e.isEmpty())return new t(new ce(n));var r=this.writeTree_.findRootMostValueAndPath(e);if(null!=r){var i=r.path,o=r.value,a=V.relativePath(i,e);return o=o.updateChild(a,n),new t(this.writeTree_.set(i,o))}var s=new ce(n);return new t(this.writeTree_.setTree(e,s))},t.prototype.addWrites=function(t,e){var n=this;return a.forEach(e,function(e,r){n=n.addWrite(t.child(e),r)}),n},t.prototype.removeWrite=function(e){return e.isEmpty()?t.Empty:new t(this.writeTree_.setTree(e,ce.Empty))},t.prototype.hasCompleteWrite=function(t){return null!=this.getCompleteNode(t)},t.prototype.getCompleteNode=function(t){var e=this.writeTree_.findRootMostValueAndPath(t);return null!=e?this.writeTree_.get(e.path).getChild(V.relativePath(e.path,t)):null},t.prototype.getCompleteChildren=function(){var t=[],e=this.writeTree_.value;return null!=e?e.isLeafNode()||e.forEachChild(At,function(e,n){t.push(new yt(e,n))}):this.writeTree_.children.inorderTraversal(function(e,n){null!=n.value&&t.push(new yt(e,n.value))}),t},t.prototype.childCompoundWrite=function(e){if(e.isEmpty())return this;var n=this.getCompleteNode(e);return new t(null!=n?new ce(n):this.writeTree_.subtree(e))},t.prototype.isEmpty=function(){return this.writeTree_.isEmpty()},t.prototype.apply=function(e){return t.applySubtreeWrite_(V.Empty,this.writeTree_,e)},t.Empty=new t(new ce(null)),t.applySubtreeWrite_=function(e,n,r){if(null!=n.value)return r.updateChild(e,n.value);var i=null;return n.children.inorderTraversal(function(n,o){".priority"===n?(a.assert(null!==o.value,"Priority writes must always be leaf nodes"),i=o.value):r=t.applySubtreeWrite_(e.child(n),o,r)}),r.getChild(e).isEmpty()||null===i||(r=r.updateChild(e.child(".priority"),i)),r},t}(),Ie=function(){function t(){this.visibleWrites_=Se.Empty,this.allWrites_=[],this.lastWriteId_=-1}return t.prototype.childWrites=function(t){return new Ne(t,this)},t.prototype.addOverwrite=function(t,e,n,r){a.assert(n>this.lastWriteId_,"Stacking an older write on top of newer ones"),void 0===r&&(r=!0),this.allWrites_.push({path:t,snap:e,writeId:n,visible:r}),r&&(this.visibleWrites_=this.visibleWrites_.addWrite(t,e)),this.lastWriteId_=n},t.prototype.addMerge=function(t,e,n){a.assert(n>this.lastWriteId_,"Stacking an older merge on top of newer ones"),this.allWrites_.push({path:t,children:e,writeId:n,visible:!0}),this.visibleWrites_=this.visibleWrites_.addWrites(t,e),this.lastWriteId_=n},t.prototype.getWrite=function(t){for(var e=0;e<this.allWrites_.length;e++){var n=this.allWrites_[e];if(n.writeId===t)return n}return null},t.prototype.removeWrite=function(t){var e=this,n=this.allWrites_.findIndex(function(e){return e.writeId===t});a.assert(n>=0,"removeWrite called with nonexistent writeId.");var r=this.allWrites_[n];this.allWrites_.splice(n,1);for(var i=r.visible,o=!1,s=this.allWrites_.length-1;i&&s>=0;){var u=this.allWrites_[s];u.visible&&(s>=n&&this.recordContainsPath_(u,r.path)?i=!1:r.path.contains(u.path)&&(o=!0)),s--}if(i){if(o)return this.resetTree_(),!0;if(r.snap)this.visibleWrites_=this.visibleWrites_.removeWrite(r.path);else{var c=r.children;a.forEach(c,function(t){e.visibleWrites_=e.visibleWrites_.removeWrite(r.path.child(t))})}return!0}return!1},t.prototype.getCompleteWriteData=function(t){return this.visibleWrites_.getCompleteNode(t)},t.prototype.calcCompleteEventCache=function(e,n,r,i){if(r||i){var o=this.visibleWrites_.childCompoundWrite(e);if(!i&&o.isEmpty())return n;if(i||null!=n||o.hasCompleteWrite(V.Empty)){var a=t.layerTree_(this.allWrites_,function(t){return(t.visible||i)&&(!r||!~r.indexOf(t.writeId))&&(t.path.contains(e)||e.contains(t.path))},e);c=n||Bt.EMPTY_NODE;return a.apply(c)}return null}var s=this.visibleWrites_.getCompleteNode(e);if(null!=s)return s;var u=this.visibleWrites_.childCompoundWrite(e);if(u.isEmpty())return n;if(null!=n||u.hasCompleteWrite(V.Empty)){var c=n||Bt.EMPTY_NODE;return u.apply(c)}return null},t.prototype.calcCompleteEventChildren=function(t,e){var n=Bt.EMPTY_NODE,r=this.visibleWrites_.getCompleteNode(t);if(r)return r.isLeafNode()||r.forEachChild(At,function(t,e){n=n.updateImmediateChild(t,e)}),n;if(e){var i=this.visibleWrites_.childCompoundWrite(t);return e.forEachChild(At,function(t,e){var r=i.childCompoundWrite(new V(t)).apply(e);n=n.updateImmediateChild(t,r)}),i.getCompleteChildren().forEach(function(t){n=n.updateImmediateChild(t.name,t.node)}),n}return this.visibleWrites_.childCompoundWrite(t).getCompleteChildren().forEach(function(t){n=n.updateImmediateChild(t.name,t.node)}),n},t.prototype.calcEventCacheAfterServerOverwrite=function(t,e,n,r){a.assert(n||r,"Either existingEventSnap or existingServerSnap must exist");var i=t.child(e);if(this.visibleWrites_.hasCompleteWrite(i))return null;var o=this.visibleWrites_.childCompoundWrite(i);return o.isEmpty()?r.getChild(e):o.apply(r.getChild(e))},t.prototype.calcCompleteChild=function(t,e,n){var r=t.child(e),i=this.visibleWrites_.getCompleteNode(r);return null!=i?i:n.isCompleteForChild(e)?this.visibleWrites_.childCompoundWrite(r).apply(n.getNode().getImmediateChild(e)):null},t.prototype.shadowingWrite=function(t){return this.visibleWrites_.getCompleteNode(t)},t.prototype.calcIndexedSlice=function(t,e,n,r,i,o){var a,s=this.visibleWrites_.childCompoundWrite(t),u=s.getCompleteNode(V.Empty);if(null!=u)a=u;else{if(null==e)return[];a=s.apply(e)}if((a=a.withIndex(o)).isEmpty()||a.isLeafNode())return[];for(var c=[],l=o.getCompare(),h=i?a.getReverseIteratorFrom(n,o):a.getIteratorFrom(n,o),f=h.getNext();f&&c.length<r;)0!==l(f,n)&&c.push(f),f=h.getNext();return c},t.prototype.recordContainsPath_=function(t,e){return t.snap?t.path.contains(e):!!a.findKey(t.children,function(n,r){return t.path.child(r).contains(e)})},t.prototype.resetTree_=function(){this.visibleWrites_=t.layerTree_(this.allWrites_,t.DefaultFilter_,V.Empty),this.allWrites_.length>0?this.lastWriteId_=this.allWrites_[this.allWrites_.length-1].writeId:this.lastWriteId_=-1},t.DefaultFilter_=function(t){return t.visible},t.layerTree_=function(t,e,n){for(var r=Se.Empty,i=0;i<t.length;++i){var o=t[i];if(e(o)){var s=o.path,u=void 0;if(o.snap)n.contains(s)?(u=V.relativePath(n,s),r=r.addWrite(u,o.snap)):s.contains(n)&&(u=V.relativePath(s,n),r=r.addWrite(V.Empty,o.snap.getChild(u)));else{if(!o.children)throw a.assertionError("WriteRecord should have .snap or .children");if(n.contains(s))u=V.relativePath(n,s),r=r.addWrites(u,o.children);else if(s.contains(n))if((u=V.relativePath(s,n)).isEmpty())r=r.addWrites(V.Empty,o.children);else{var c=a.safeGet(o.children,u.getFront());if(c){var l=c.getChild(u.popFront());r=r.addWrite(V.Empty,l)}}}}}return r},t}(),Ne=function(){function t(t,e){this.treePath_=t,this.writeTree_=e}return t.prototype.calcCompleteEventCache=function(t,e,n){return this.writeTree_.calcCompleteEventCache(this.treePath_,t,e,n)},t.prototype.calcCompleteEventChildren=function(t){return this.writeTree_.calcCompleteEventChildren(this.treePath_,t)},t.prototype.calcEventCacheAfterServerOverwrite=function(t,e,n){return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_,t,e,n)},t.prototype.shadowingWrite=function(t){return this.writeTree_.shadowingWrite(this.treePath_.child(t))},t.prototype.calcIndexedSlice=function(t,e,n,r,i){return this.writeTree_.calcIndexedSlice(this.treePath_,t,e,n,r,i)},t.prototype.calcCompleteChild=function(t,e){return this.writeTree_.calcCompleteChild(this.treePath_,t,e)},t.prototype.child=function(e){return new t(this.treePath_.child(e),this.writeTree_)},t}(),Ae=function(){function t(t){this.listenProvider_=t,this.syncPointTree_=ce.Empty,this.pendingWriteTree_=new Ie,this.tagToQueryMap_={},this.queryToTagMap_={}}return t.prototype.applyUserOverwrite=function(t,e,n,r){return this.pendingWriteTree_.addOverwrite(t,e,n,r),r?this.applyOperationToSyncPoints_(new he(ae.User,t,e)):[]},t.prototype.applyUserMerge=function(t,e,n){this.pendingWriteTree_.addMerge(t,e,n);var r=ce.fromObject(e);return this.applyOperationToSyncPoints_(new fe(ae.User,t,r))},t.prototype.ackUserWrite=function(t,e){void 0===e&&(e=!1);var n=this.pendingWriteTree_.getWrite(t);if(this.pendingWriteTree_.removeWrite(t)){var r=ce.Empty;return null!=n.snap?r=r.set(V.Empty,!0):a.forEach(n.children,function(t,e){r=r.set(new V(t),e)}),this.applyOperationToSyncPoints_(new se(n.path,r,e))}return[]},t.prototype.applyServerOverwrite=function(t,e){return this.applyOperationToSyncPoints_(new he(ae.Server,t,e))},t.prototype.applyServerMerge=function(t,e){var n=ce.fromObject(e);return this.applyOperationToSyncPoints_(new fe(ae.Server,t,n))},t.prototype.applyListenComplete=function(t){return this.applyOperationToSyncPoints_(new le(ae.Server,t))},t.prototype.applyTaggedQueryOverwrite=function(e,n,r){var i=this.queryKeyForTag_(r);if(null!=i){var o=t.parseQueryKey_(i),a=o.path,s=o.queryId,u=V.relativePath(a,e),c=new he(ae.forServerTaggedQuery(s),u,n);return this.applyTaggedOperation_(a,c)}return[]},t.prototype.applyTaggedQueryMerge=function(e,n,r){var i=this.queryKeyForTag_(r);if(i){var o=t.parseQueryKey_(i),a=o.path,s=o.queryId,u=V.relativePath(a,e),c=ce.fromObject(n),l=new fe(ae.forServerTaggedQuery(s),u,c);return this.applyTaggedOperation_(a,l)}return[]},t.prototype.applyTaggedListenComplete=function(e,n){var r=this.queryKeyForTag_(n);if(r){var i=t.parseQueryKey_(r),o=i.path,a=i.queryId,s=V.relativePath(o,e),u=new le(ae.forServerTaggedQuery(a),s);return this.applyTaggedOperation_(o,u)}return[]},t.prototype.addEventRegistration=function(e,n){var r=e.path,i=null,o=!1;this.syncPointTree_.foreachOnPath(r,function(t,e){var n=V.relativePath(t,r);i=i||e.getCompleteServerCache(n),o=o||e.hasCompleteView()});var s,u=this.syncPointTree_.get(r);(u?(o=o||u.hasCompleteView(),i=i||u.getCompleteServerCache(V.Empty)):(u=new Te,this.syncPointTree_=this.syncPointTree_.set(r,u)),null!=i)?s=!0:(s=!1,i=Bt.EMPTY_NODE,this.syncPointTree_.subtree(r).foreachChild(function(t,e){var n=e.getCompleteServerCache(V.Empty);n&&(i=i.updateImmediateChild(t,n))}));var c=u.viewExistsForQuery(e);if(!c&&!e.getQueryParams().loadsAllData()){var l=t.makeQueryKey_(e);a.assert(!(l in this.queryToTagMap_),"View does not exist, but we have a tag");var h=t.getNextQueryTag_();this.queryToTagMap_[l]=h,this.tagToQueryMap_["_"+h]=l}var f=this.pendingWriteTree_.childWrites(r),p=u.addEventRegistration(e,n,f,i,s);if(!c&&!o){var d=u.viewForQuery(e);p=p.concat(this.setupListener_(e,d))}return p},t.prototype.removeEventRegistration=function(e,n,r){var i=this,o=e.path,a=this.syncPointTree_.get(o),s=[];if(a&&("default"===e.queryIdentifier()||a.viewExistsForQuery(e))){var u=a.removeEventRegistration(e,n,r);a.isEmpty()&&(this.syncPointTree_=this.syncPointTree_.remove(o));var c=u.removed;s=u.events;var l=-1!==c.findIndex(function(t){return t.getQueryParams().loadsAllData()}),h=this.syncPointTree_.findOnPath(o,function(t,e){return e.hasCompleteView()});if(l&&!h){var f=this.syncPointTree_.subtree(o);if(!f.isEmpty())for(var p=this.collectDistinctViewsForSubTree_(f),d=0;d<p.length;++d){var v=p[d],y=v.getQuery(),_=this.createListenerForView_(v);this.listenProvider_.startListening(t.queryForListening_(y),this.tagForQuery_(y),_.hashFn,_.onComplete)}}if(!h&&c.length>0&&!r)if(l){this.listenProvider_.stopListening(t.queryForListening_(e),null)}else c.forEach(function(e){var n=i.queryToTagMap_[t.makeQueryKey_(e)];i.listenProvider_.stopListening(t.queryForListening_(e),n)});this.removeTags_(c)}return s},t.prototype.calcCompleteEventCache=function(t,e){var n=this.pendingWriteTree_,r=this.syncPointTree_.findOnPath(t,function(e,n){var r=V.relativePath(e,t),i=n.getCompleteServerCache(r);if(i)return i});return n.calcCompleteEventCache(t,r,e,!0)},t.prototype.collectDistinctViewsForSubTree_=function(t){return t.fold(function(t,e,n){if(e&&e.hasCompleteView())return[e.getCompleteView()];var r=[];return e&&(r=e.getQueryViews()),a.forEach(n,function(t,e){r=r.concat(e)}),r})},t.prototype.removeTags_=function(e){for(var n=0;n<e.length;++n){var r=e[n];if(!r.getQueryParams().loadsAllData()){var i=t.makeQueryKey_(r),o=this.queryToTagMap_[i];delete this.queryToTagMap_[i],delete this.tagToQueryMap_["_"+o]}}},t.queryForListening_=function(t){return t.getQueryParams().loadsAllData()&&!t.getQueryParams().isDefault()?t.getRef():t},t.prototype.setupListener_=function(e,n){var r=e.path,i=this.tagForQuery_(e),o=this.createListenerForView_(n),s=this.listenProvider_.startListening(t.queryForListening_(e),i,o.hashFn,o.onComplete),u=this.syncPointTree_.subtree(r);if(i)a.assert(!u.value.hasCompleteView(),"If we're adding a query, it shouldn't be shadowed");else for(var c=u.fold(function(t,e,n){if(!t.isEmpty()&&e&&e.hasCompleteView())return[e.getCompleteView().getQuery()];var r=[];return e&&(r=r.concat(e.getQueryViews().map(function(t){return t.getQuery()}))),a.forEach(n,function(t,e){r=r.concat(e)}),r}),l=0;l<c.length;++l){var h=c[l];this.listenProvider_.stopListening(t.queryForListening_(h),this.tagForQuery_(h))}return s},t.prototype.createListenerForView_=function(t){var e=this,n=t.getQuery(),r=this.tagForQuery_(n);return{hashFn:function(){return(t.getServerCache()||Bt.EMPTY_NODE).hash()},onComplete:function(t){if("ok"===t)return r?e.applyTaggedListenComplete(n.path,r):e.applyListenComplete(n.path);var i=function(t,e){var n="Unknown Error";"too_big"===t?n="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"==t?n="Client doesn't have permission to access the desired data.":"unavailable"==t&&(n="The service is unavailable");var r=new Error(t+" at "+e.path.toString()+": "+n);return r.code=t.toUpperCase(),r}(t,n);return e.removeEventRegistration(n,null,i)}}},t.makeQueryKey_=function(t){return t.path.toString()+"$"+t.queryIdentifier()},t.parseQueryKey_=function(t){var e=t.indexOf("$");return a.assert(-1!==e&&e<t.length-1,"Bad queryKey."),{queryId:t.substr(e+1),path:new V(t.substr(0,e))}},t.prototype.queryKeyForTag_=function(t){return this.tagToQueryMap_["_"+t]},t.prototype.tagForQuery_=function(e){var n=t.makeQueryKey_(e);return a.safeGet(this.queryToTagMap_,n)},t.getNextQueryTag_=function(){return t.nextQueryTag_++},t.prototype.applyTaggedOperation_=function(t,e){var n=this.syncPointTree_.get(t);a.assert(n,"Missing sync point for query tag that we're tracking");var r=this.pendingWriteTree_.childWrites(t);return n.applyOperation(e,r,null)},t.prototype.applyOperationToSyncPoints_=function(t){return this.applyOperationHelper_(t,this.syncPointTree_,null,this.pendingWriteTree_.childWrites(V.Empty))},t.prototype.applyOperationHelper_=function(t,e,n,r){if(t.path.isEmpty())return this.applyOperationDescendantsHelper_(t,e,n,r);var i=e.get(V.Empty);null==n&&null!=i&&(n=i.getCompleteServerCache(V.Empty));var o=[],a=t.path.getFront(),s=t.operationForChild(a),u=e.children.get(a);if(u&&s){var c=n?n.getImmediateChild(a):null,l=r.child(a);o=o.concat(this.applyOperationHelper_(s,u,c,l))}return i&&(o=o.concat(i.applyOperation(t,r,n))),o},t.prototype.applyOperationDescendantsHelper_=function(t,e,n,r){var i=this,o=e.get(V.Empty);null==n&&null!=o&&(n=o.getCompleteServerCache(V.Empty));var a=[];return e.children.inorderTraversal(function(e,o){var s=n?n.getImmediateChild(e):null,u=r.child(e),c=t.operationForChild(e);c&&(a=a.concat(i.applyOperationDescendantsHelper_(c,o,s,u)))}),o&&(a=a.concat(o.applyOperation(t,r,n))),a},t.nextQueryTag_=1,t}(),Oe=function(){function t(){this.rootNode_=Bt.EMPTY_NODE}return t.prototype.getNode=function(t){return this.rootNode_.getChild(t)},t.prototype.updateSnapshot=function(t,e){this.rootNode_=this.rootNode_.updateChild(t,e)},t}(),ke=function(){function t(t){this.app_=t}return t.prototype.getToken=function(t){return this.app_.INTERNAL.getToken(t).then(null,function(t){return t&&"auth/token-not-initialized"===t.code?(E("Got auth/token-not-initialized error.  Treating as null token."),null):Promise.reject(t)})},t.prototype.addTokenChangeListener=function(t){this.app_.INTERNAL.addAuthTokenListener(t)},t.prototype.removeTokenChangeListener=function(t){this.app_.INTERNAL.removeAuthTokenListener(t)},t.prototype.notifyForInvalidToken=function(){var t='Provided authentication credentials for the app named "'+this.app_.name+'" are invalid. This usually indicates your app was not initialized correctly. ';"credential"in this.app_.options?t+='Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':"serviceAccount"in this.app_.options?t+='Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':t+='Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.',I(t)},t}(),Re=function(){function t(){this.counters_={}}return t.prototype.incrementCounter=function(t,e){void 0===e&&(e=1),a.contains(this.counters_,t)||(this.counters_[t]=0),this.counters_[t]+=e},t.prototype.get=function(){return a.deepCopy(this.counters_)},t}(),Pe=function(){function t(){}return t.getCollection=function(t){var e=t.toString();return this.collections_[e]||(this.collections_[e]=new Re),this.collections_[e]},t.getOrCreateReporter=function(t,e){var n=t.toString();return this.reporters_[n]||(this.reporters_[n]=e()),this.reporters_[n]},t.collections_={},t.reporters_={},t}(),De=function(){function t(t){this.collection_=t,this.last_=null}return t.prototype.get=function(){var t=this.collection_.get(),e=a.clone(t);return this.last_&&a.forEach(this.last_,function(t,n){e[t]=e[t]-n}),this.last_=t,e},t}(),xe=1e4,Le=3e4,Me=function(){function t(t,e){this.server_=e,this.statsToReport_={},this.statsListener_=new De(t);var n=xe+(Le-xe)*Math.random();W(this.reportStats_.bind(this),Math.floor(n))}return t.prototype.includeStat=function(t){this.statsToReport_[t]=!0},t.prototype.reportStats_=function(){var t=this,e=this.statsListener_.get(),n={},r=!1;a.forEach(e,function(e,i){i>0&&a.contains(t.statsToReport_,e)&&(n[e]=i,r=!0)}),r&&this.server_.reportStats(n),W(this.reportStats_.bind(this),Math.floor(2*Math.random()*3e5))},t}(),Fe=function(){function t(){this.eventLists_=[],this.recursionDepth_=0}return t.prototype.queueEvents=function(t){for(var e=null,n=0;n<t.length;n++){var r=t[n],i=r.getPath();null===e||i.equals(e.getPath())||(this.eventLists_.push(e),e=null),null===e&&(e=new Ue(i)),e.add(r)}e&&this.eventLists_.push(e)},t.prototype.raiseEventsAtPath=function(t,e){this.queueEvents(e),this.raiseQueuedEventsMatchingPredicate_(function(e){return e.equals(t)})},t.prototype.raiseEventsForChangedPath=function(t,e){this.queueEvents(e),this.raiseQueuedEventsMatchingPredicate_(function(e){return e.contains(t)||t.contains(e)})},t.prototype.raiseQueuedEventsMatchingPredicate_=function(t){this.recursionDepth_++;for(var e=!0,n=0;n<this.eventLists_.length;n++){var r=this.eventLists_[n];if(r)t(r.getPath())?(this.eventLists_[n].raise(),this.eventLists_[n]=null):e=!1}e&&(this.eventLists_=[]),this.recursionDepth_--},t}(),Ue=function(){function t(t){this.path_=t,this.events_=[]}return t.prototype.add=function(t){this.events_.push(t)},t.prototype.raise=function(){for(var t=0;t<this.events_.length;t++){var e=this.events_[t];if(null!==e){this.events_[t]=null;var n=e.getEventRunner();m&&E("event: "+e.toString()),j(n)}}},t.prototype.getPath=function(){return this.path_},t}(),je=function(){function t(t){this.allowedEvents_=t,this.listeners_={},a.assert(Array.isArray(t)&&t.length>0,"Requires a non-empty array")}return t.prototype.trigger=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(Array.isArray(this.listeners_[t]))for(var r=this.listeners_[t].slice(),i=0;i<r.length;i++)r[i].callback.apply(r[i].context,e)},t.prototype.on=function(t,e,n){this.validateEventType_(t),this.listeners_[t]=this.listeners_[t]||[],this.listeners_[t].push({callback:e,context:n});var r=this.getInitialEvent(t);r&&e.apply(n,r)},t.prototype.off=function(t,e,n){this.validateEventType_(t);for(var r=this.listeners_[t]||[],i=0;i<r.length;i++)if(r[i].callback===e&&(!n||n===r[i].context))return void r.splice(i,1)},t.prototype.validateEventType_=function(t){a.assert(this.allowedEvents_.find(function(e){return e===t}),"Unknown event: "+t)},t}(),Be=function(t){function e(){var e,n,r=t.call(this,["visible"])||this;return"undefined"!=typeof document&&void 0!==document.addEventListener&&(void 0!==document.hidden?(n="visibilitychange",e="hidden"):void 0!==document.mozHidden?(n="mozvisibilitychange",e="mozHidden"):void 0!==document.msHidden?(n="msvisibilitychange",e="msHidden"):void 0!==document.webkitHidden&&(n="webkitvisibilitychange",e="webkitHidden")),r.visible_=!0,n&&document.addEventListener(n,function(){var t=!document[e];t!==r.visible_&&(r.visible_=t,r.trigger("visible",t))},!1),r}return u.__extends(e,t),e.getInstance=function(){return new e},e.prototype.getInitialEvent=function(t){return a.assert("visible"===t,"Unknown event type: "+t),[this.visible_]},e}(je),We=function(t){function e(){var e=t.call(this,["online"])||this;return e.online_=!0,"undefined"==typeof window||void 0===window.addEventListener||a.isMobileCordova()||(window.addEventListener("online",function(){e.online_||(e.online_=!0,e.trigger("online",!0))},!1),window.addEventListener("offline",function(){e.online_&&(e.online_=!1,e.trigger("online",!1))},!1)),e}return u.__extends(e,t),e.getInstance=function(){return new e},e.prototype.getInitialEvent=function(t){return a.assert("online"===t,"Unknown event type: "+t),[this.online_]},e.prototype.currentlyOnline=function(){return this.online_},e}(je),Ve=function(){function t(t){this.onMessage_=t,this.pendingResponses=[],this.currentResponseNum=0,this.closeAfterResponse=-1,this.onClose=null}return t.prototype.closeAfter=function(t,e){this.closeAfterResponse=t,this.onClose=e,this.closeAfterResponse<this.currentResponseNum&&(this.onClose(),this.onClose=null)},t.prototype.handleResponse=function(t,e){var n=this;this.pendingResponses[t]=e;for(var r=function(){var t=i.pendingResponses[i.currentResponseNum];delete i.pendingResponses[i.currentResponseNum];for(var e=function(e){t[e]&&j(function(){n.onMessage_(t[e])})},r=0;r<t.length;++r)e(r);if(i.currentResponseNum===i.closeAfterResponse)return i.onClose&&(i.onClose(),i.onClose=null),"break";i.currentResponseNum++},i=this;this.pendingResponses[this.currentResponseNum];){if("break"===r())break}},t}(),$e="pLPCommand",qe="pRTLPCB",He=function(){function t(t,e,n,r){this.connId=t,this.repoInfo=e,this.transportSessionId=n,this.lastSessionId=r,this.bytesSent=0,this.bytesReceived=0,this.everConnected_=!1,this.log_=C(t),this.stats_=Pe.getCollection(e),this.urlFn=function(t){return e.connectionURL(q,t)}}return t.prototype.open=function(t,e){var n=this;this.curSegmentNum=0,this.onDisconnect_=e,this.myPacketOrderer=new Ve(t),this.isClosed_=!1,this.connectTimeoutTimer_=setTimeout(function(){n.log_("Timed out trying to connect."),n.onClosed_(),n.connectTimeoutTimer_=null},Math.floor(3e4)),function(t){if(a.isNodeSdk()||"complete"===document.readyState)t();else{var e=!1,n=function(){document.body?e||(e=!0,t()):setTimeout(n,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",function(){"complete"===document.readyState&&n()}),window.attachEvent("onload",n))}}(function(){if(!n.isClosed_){n.scriptTagHolder=new Ke(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t[0],i=t[1],o=t[2];if(n.incrementIncomingBytes_(t),n.scriptTagHolder)if(n.connectTimeoutTimer_&&(clearTimeout(n.connectTimeoutTimer_),n.connectTimeoutTimer_=null),n.everConnected_=!0,"start"==r)n.id=i,n.password=o;else{if("close"!==r)throw new Error("Unrecognized command received: "+r);i?(n.scriptTagHolder.sendNewPolls=!1,n.myPacketOrderer.closeAfter(i,function(){n.onClosed_()})):n.onClosed_()}},function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t[0],i=t[1];n.incrementIncomingBytes_(t),n.myPacketOrderer.handleResponse(r,i)},function(){n.onClosed_()},n.urlFn);var t={start:"t"};t.ser=Math.floor(1e8*Math.random()),n.scriptTagHolder.uniqueCallbackIdentifier&&(t.cb=n.scriptTagHolder.uniqueCallbackIdentifier),t.v="5",n.transportSessionId&&(t.s=n.transportSessionId),n.lastSessionId&&(t.ls=n.lastSessionId),!a.isNodeSdk()&&"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(t.r="f");var e=n.urlFn(t);n.log_("Connecting via long-poll to "+e),n.scriptTagHolder.addTag(e,function(){})}})},t.prototype.start=function(){this.scriptTagHolder.startLongPoll(this.id,this.password),this.addDisconnectPingFrame(this.id,this.password)},t.forceAllow=function(){t.forceAllow_=!0},t.forceDisallow=function(){t.forceDisallow_=!0},t.isAvailable=function(){return t.forceAllow_||!t.forceDisallow_&&"undefined"!=typeof document&&null!=document.createElement&&!("object"==typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href))&&!("object"==typeof Windows&&"object"==typeof Windows.UI)&&!a.isNodeSdk()},t.prototype.markConnectionHealthy=function(){},t.prototype.shutdown_=function(){this.isClosed_=!0,this.scriptTagHolder&&(this.scriptTagHolder.close(),this.scriptTagHolder=null),this.myDisconnFrame&&(document.body.removeChild(this.myDisconnFrame),this.myDisconnFrame=null),this.connectTimeoutTimer_&&(clearTimeout(this.connectTimeoutTimer_),this.connectTimeoutTimer_=null)},t.prototype.onClosed_=function(){this.isClosed_||(this.log_("Longpoll is closing itself"),this.shutdown_(),this.onDisconnect_&&(this.onDisconnect_(this.everConnected_),this.onDisconnect_=null))},t.prototype.close=function(){this.isClosed_||(this.log_("Longpoll is being closed."),this.shutdown_())},t.prototype.send=function(t){var e=a.stringify(t);this.bytesSent+=e.length,this.stats_.incrementCounter("bytes_sent",e.length);for(var n=a.base64Encode(e),r=x(n,1840),i=0;i<r.length;i++)this.scriptTagHolder.enqueueSegment(this.curSegmentNum,r.length,r[i]),this.curSegmentNum++},t.prototype.addDisconnectPingFrame=function(t,e){if(!a.isNodeSdk()){this.myDisconnFrame=document.createElement("iframe");var n={dframe:"t"};n.id=t,n.pw=e,this.myDisconnFrame.src=this.urlFn(n),this.myDisconnFrame.style.display="none",document.body.appendChild(this.myDisconnFrame)}},t.prototype.incrementIncomingBytes_=function(t){var e=a.stringify(t).length;this.bytesReceived+=e,this.stats_.incrementCounter("bytes_received",e)},t}(),Ke=function(){function t(e,n,r,i){if(this.onDisconnect=r,this.urlFn=i,this.outstandingRequests=new te,this.pendingSegs=[],this.currentSerial=Math.floor(1e8*Math.random()),this.sendNewPolls=!0,a.isNodeSdk())this.commandCB=e,this.onMessageCB=n;else{this.uniqueCallbackIdentifier=y(),window[$e+this.uniqueCallbackIdentifier]=e,window[qe+this.uniqueCallbackIdentifier]=n,this.myIFrame=t.createIFrame_();var o="";if(this.myIFrame.src&&"javascript:"===this.myIFrame.src.substr(0,"javascript:".length))o='<script>document.domain="'+document.domain+'";<\/script>';var s="<html><body>"+o+"</body></html>";try{this.myIFrame.doc.open(),this.myIFrame.doc.write(s),this.myIFrame.doc.close()}catch(t){E("frame writing exception"),t.stack&&E(t.stack),E(t)}}}return t.createIFrame_=function(){var t=document.createElement("iframe");if(t.style.display="none",!document.body)throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";document.body.appendChild(t);try{t.contentWindow.document||E("No IE domain setting required")}catch(n){var e=document.domain;t.src="javascript:void((function(){document.open();document.domain='"+e+"';document.close();})())"}return t.contentDocument?t.doc=t.contentDocument:t.contentWindow?t.doc=t.contentWindow.document:t.document&&(t.doc=t.document),t},t.prototype.close=function(){var e=this;if(this.alive=!1,this.myIFrame&&(this.myIFrame.doc.body.innerHTML="",setTimeout(function(){null!==e.myIFrame&&(document.body.removeChild(e.myIFrame),e.myIFrame=null)},Math.floor(0))),a.isNodeSdk()&&this.myID){var n={disconn:"t"};n.id=this.myID,n.pw=this.myPW;var r=this.urlFn(n);t.nodeRestRequest(r)}var i=this.onDisconnect;i&&(this.onDisconnect=null,i())},t.prototype.startLongPoll=function(t,e){for(this.myID=t,this.myPW=e,this.alive=!0;this.newRequest_(););},t.prototype.newRequest_=function(){if(this.alive&&this.sendNewPolls&&this.outstandingRequests.count()<(this.pendingSegs.length>0?2:1)){this.currentSerial++;var t={};t.id=this.myID,t.pw=this.myPW,t.ser=this.currentSerial;for(var e=this.urlFn(t),n="",r=0;this.pendingSegs.length>0;){if(!(this.pendingSegs[0].d.length+30+n.length<=1870))break;var i=this.pendingSegs.shift();n=n+"&seg"+r+"="+i.seg+"&ts"+r+"="+i.ts+"&d"+r+"="+i.d,r++}return e+=n,this.addLongPollTag_(e,this.currentSerial),!0}return!1},t.prototype.enqueueSegment=function(t,e,n){this.pendingSegs.push({seg:t,ts:e,d:n}),this.alive&&this.newRequest_()},t.prototype.addLongPollTag_=function(t,e){var n=this;this.outstandingRequests.add(e,1);var r=function(){n.outstandingRequests.remove(e),n.newRequest_()},i=setTimeout(r,Math.floor(25e3));this.addTag(t,function(){clearTimeout(i),r()})},t.prototype.addTag=function(t,e){var n=this;a.isNodeSdk()?this.doNodeLongPoll(t,e):setTimeout(function(){try{if(!n.sendNewPolls)return;var r=n.myIFrame.doc.createElement("script");r.type="text/javascript",r.async=!0,r.src=t,r.onload=r.onreadystatechange=function(){var t=r.readyState;t&&"loaded"!==t&&"complete"!==t||(r.onload=r.onreadystatechange=null,r.parentNode&&r.parentNode.removeChild(r),e())},r.onerror=function(){E("Long-poll script failed to load: "+t),n.sendNewPolls=!1,n.close()},n.myIFrame.doc.body.appendChild(r)}catch(t){}},Math.floor(1))},t}(),Ge=null;"undefined"!=typeof MozWebSocket?Ge=MozWebSocket:"undefined"!=typeof WebSocket&&(Ge=WebSocket);var Qe=function(){function t(e,n,r,i){this.connId=e,this.keepaliveTimer=null,this.frames=null,this.totalFrames=0,this.bytesSent=0,this.bytesReceived=0,this.log_=C(this.connId),this.stats_=Pe.getCollection(n),this.connURL=t.connectionURL_(n,r,i)}return t.connectionURL_=function(t,e,n){var r={v:"5"};return!a.isNodeSdk()&&"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(r.r="f"),e&&(r.s=e),n&&(r.ls=n),t.connectionURL("websocket",r)},t.prototype.open=function(t,e){var n=this;this.onDisconnect=e,this.onMessage=t,this.log_("Websocket connecting to "+this.connURL),this.everConnected_=!1,p.set("previous_websocket_failure",!0);try{if(a.isNodeSdk()){var i=a.CONSTANTS.NODE_ADMIN?"AdminNode":"Node",o={headers:{"User-Agent":"Firebase/5/"+c.SDK_VERSION+"/"+r.platform+"/"+i}},s=r.env,u=0==this.connURL.indexOf("wss://")?s.HTTPS_PROXY||s.https_proxy:s.HTTP_PROXY||s.http_proxy;u&&(o.proxy={origin:u}),this.mySock=new Ge(this.connURL,[],o)}else this.mySock=new Ge(this.connURL)}catch(t){this.log_("Error instantiating WebSocket.");var l=t.message||t.data;return l&&this.log_(l),void this.onClosed_()}this.mySock.onopen=function(){n.log_("Websocket connected."),n.everConnected_=!0},this.mySock.onclose=function(){n.log_("Websocket connection was disconnected."),n.mySock=null,n.onClosed_()},this.mySock.onmessage=function(t){n.handleIncomingFrame(t)},this.mySock.onerror=function(t){n.log_("WebSocket error.  Closing connection.");var e=t.message||t.data;e&&n.log_(e),n.onClosed_()}},t.prototype.start=function(){},t.forceDisallow=function(){t.forceDisallow_=!0},t.isAvailable=function(){var e=!1;if("undefined"!=typeof navigator&&navigator.userAgent){var n=navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);n&&n.length>1&&parseFloat(n[1])<4.4&&(e=!0)}return!e&&null!==Ge&&!t.forceDisallow_},t.previouslyFailed=function(){return p.isInMemoryStorage||!0===p.get("previous_websocket_failure")},t.prototype.markConnectionHealthy=function(){p.remove("previous_websocket_failure")},t.prototype.appendFrame_=function(t){if(this.frames.push(t),this.frames.length==this.totalFrames){var e=this.frames.join("");this.frames=null;var n=a.jsonEval(e);this.onMessage(n)}},t.prototype.handleNewFrameCount_=function(t){this.totalFrames=t,this.frames=[]},t.prototype.extractFrameCount_=function(t){if(a.assert(null===this.frames,"We already have a frame buffer"),t.length<=6){var e=Number(t);if(!isNaN(e))return this.handleNewFrameCount_(e),null}return this.handleNewFrameCount_(1),t},t.prototype.handleIncomingFrame=function(t){if(null!==this.mySock){var e=t.data;if(this.bytesReceived+=e.length,this.stats_.incrementCounter("bytes_received",e.length),this.resetKeepAlive(),null!==this.frames)this.appendFrame_(e);else{var n=this.extractFrameCount_(e);null!==n&&this.appendFrame_(n)}}},t.prototype.send=function(t){this.resetKeepAlive();var e=a.stringify(t);this.bytesSent+=e.length,this.stats_.incrementCounter("bytes_sent",e.length);var n=x(e,16384);n.length>1&&this.sendString_(String(n.length));for(var r=0;r<n.length;r++)this.sendString_(n[r])},t.prototype.shutdown_=function(){this.isClosed_=!0,this.keepaliveTimer&&(clearInterval(this.keepaliveTimer),this.keepaliveTimer=null),this.mySock&&(this.mySock.close(),this.mySock=null)},t.prototype.onClosed_=function(){this.isClosed_||(this.log_("WebSocket is closing itself"),this.shutdown_(),this.onDisconnect&&(this.onDisconnect(this.everConnected_),this.onDisconnect=null))},t.prototype.close=function(){this.isClosed_||(this.log_("WebSocket is being closed"),this.shutdown_())},t.prototype.resetKeepAlive=function(){var t=this;clearInterval(this.keepaliveTimer),this.keepaliveTimer=setInterval(function(){t.mySock&&t.sendString_("0"),t.resetKeepAlive()},Math.floor(45e3))},t.prototype.sendString_=function(t){try{this.mySock.send(t)}catch(t){this.log_("Exception thrown from WebSocket.send():",t.message||t.data,"Closing connection."),setTimeout(this.onClosed_.bind(this),0)}},t.responsesRequiredToBeHealthy=2,t.healthyTimeout=3e4,t}(),ze=function(){function t(t){this.initTransports_(t)}return Object.defineProperty(t,"ALL_TRANSPORTS",{get:function(){return[He,Qe]},enumerable:!0,configurable:!0}),t.prototype.initTransports_=function(e){var n=Qe&&Qe.isAvailable(),r=n&&!Qe.previouslyFailed();if(e.webSocketOnly&&(n||I("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),r=!0),r)this.transports_=[Qe];else{var i=this.transports_=[];L(t.ALL_TRANSPORTS,function(t,e){e&&e.isAvailable()&&i.push(e)})}},t.prototype.initialTransport=function(){if(this.transports_.length>0)return this.transports_[0];throw new Error("No transports available")},t.prototype.upgradeTransport=function(){return this.transports_.length>1?this.transports_[1]:null},t}(),Xe=function(){function t(t,e,n,r,i,o,a){this.id=t,this.repoInfo_=e,this.onMessage_=n,this.onReady_=r,this.onDisconnect_=i,this.onKill_=o,this.lastSessionId=a,this.connectionCount=0,this.pendingDataMessages=[],this.state_=0,this.log_=C("c:"+this.id+":"),this.transportManager_=new ze(e),this.log_("Connection created"),this.start_()}return t.prototype.start_=function(){var t=this,e=this.transportManager_.initialTransport();this.conn_=new e(this.nextTransportId_(),this.repoInfo_,void 0,this.lastSessionId),this.primaryResponsesRequired_=e.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.conn_),r=this.disconnReceiver_(this.conn_);this.tx_=this.conn_,this.rx_=this.conn_,this.secondaryConn_=null,this.isHealthy_=!1,setTimeout(function(){t.conn_&&t.conn_.open(n,r)},Math.floor(0));var i=e.healthyTimeout||0;i>0&&(this.healthyTimeout_=W(function(){t.healthyTimeout_=null,t.isHealthy_||(t.conn_&&t.conn_.bytesReceived>102400?(t.log_("Connection exceeded healthy timeout but has received "+t.conn_.bytesReceived+" bytes.  Marking connection healthy."),t.isHealthy_=!0,t.conn_.markConnectionHealthy()):t.conn_&&t.conn_.bytesSent>10240?t.log_("Connection exceeded healthy timeout but has sent "+t.conn_.bytesSent+" bytes.  Leaving connection alive."):(t.log_("Closing unhealthy connection after timeout."),t.close()))},Math.floor(i)))},t.prototype.nextTransportId_=function(){return"c:"+this.id+":"+this.connectionCount++},t.prototype.disconnReceiver_=function(t){var e=this;return function(n){t===e.conn_?e.onConnectionLost_(n):t===e.secondaryConn_?(e.log_("Secondary connection lost."),e.onSecondaryConnectionLost_()):e.log_("closing an old connection")}},t.prototype.connReceiver_=function(t){var e=this;return function(n){2!=e.state_&&(t===e.rx_?e.onPrimaryMessageReceived_(n):t===e.secondaryConn_?e.onSecondaryMessageReceived_(n):e.log_("message on old connection"))}},t.prototype.sendRequest=function(t){var e={t:"d",d:t};this.sendData_(e)},t.prototype.tryCleanupConnection=function(){this.tx_===this.secondaryConn_&&this.rx_===this.secondaryConn_&&(this.log_("cleaning up and promoting a connection: "+this.secondaryConn_.connId),this.conn_=this.secondaryConn_,this.secondaryConn_=null)},t.prototype.onSecondaryControl_=function(t){if("t"in t){var e=t.t;"a"===e?this.upgradeIfSecondaryHealthy_():"r"===e?(this.log_("Got a reset on secondary, closing it"),this.secondaryConn_.close(),this.tx_!==this.secondaryConn_&&this.rx_!==this.secondaryConn_||this.close()):"o"===e&&(this.log_("got pong on secondary."),this.secondaryResponsesRequired_--,this.upgradeIfSecondaryHealthy_())}},t.prototype.onSecondaryMessageReceived_=function(t){var e=P("t",t),n=P("d",t);if("c"==e)this.onSecondaryControl_(n);else{if("d"!=e)throw new Error("Unknown protocol layer: "+e);this.pendingDataMessages.push(n)}},t.prototype.upgradeIfSecondaryHealthy_=function(){this.secondaryResponsesRequired_<=0?(this.log_("Secondary connection is healthy."),this.isHealthy_=!0,this.secondaryConn_.markConnectionHealthy(),this.proceedWithUpgrade_()):(this.log_("sending ping on secondary."),this.secondaryConn_.send({t:"c",d:{t:"p",d:{}}}))},t.prototype.proceedWithUpgrade_=function(){this.secondaryConn_.start(),this.log_("sending client ack on secondary"),this.secondaryConn_.send({t:"c",d:{t:"a",d:{}}}),this.log_("Ending transmission on primary"),this.conn_.send({t:"c",d:{t:"n",d:{}}}),this.tx_=this.secondaryConn_,this.tryCleanupConnection()},t.prototype.onPrimaryMessageReceived_=function(t){var e=P("t",t),n=P("d",t);"c"==e?this.onControl_(n):"d"==e&&this.onDataMessage_(n)},t.prototype.onDataMessage_=function(t){this.onPrimaryResponse_(),this.onMessage_(t)},t.prototype.onPrimaryResponse_=function(){this.isHealthy_||(this.primaryResponsesRequired_--,this.primaryResponsesRequired_<=0&&(this.log_("Primary connection is healthy."),this.isHealthy_=!0,this.conn_.markConnectionHealthy()))},t.prototype.onControl_=function(t){var e=P("t",t);if("d"in t){var n=t.d;if("h"===e)this.onHandshake_(n);else if("n"===e){this.log_("recvd end transmission on primary"),this.rx_=this.secondaryConn_;for(var r=0;r<this.pendingDataMessages.length;++r)this.onDataMessage_(this.pendingDataMessages[r]);this.pendingDataMessages=[],this.tryCleanupConnection()}else"s"===e?this.onConnectionShutdown_(n):"r"===e?this.onReset_(n):"e"===e?T("Server Error: "+n):"o"===e?(this.log_("got pong on primary."),this.onPrimaryResponse_(),this.sendPingOnPrimaryIfNecessary_()):T("Unknown control packet command: "+e)}},t.prototype.onHandshake_=function(t){var e=t.ts,n=t.v,r=t.h;this.sessionId=t.s,this.repoInfo_.updateHost(r),0==this.state_&&(this.conn_.start(),this.onConnectionEstablished_(this.conn_,e),"5"!==n&&I("Protocol version mismatch detected"),this.tryStartUpgrade_())},t.prototype.tryStartUpgrade_=function(){var t=this.transportManager_.upgradeTransport();t&&this.startUpgrade_(t)},t.prototype.startUpgrade_=function(t){var e=this;this.secondaryConn_=new t(this.nextTransportId_(),this.repoInfo_,this.sessionId),this.secondaryResponsesRequired_=t.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.secondaryConn_),r=this.disconnReceiver_(this.secondaryConn_);this.secondaryConn_.open(n,r),W(function(){e.secondaryConn_&&(e.log_("Timed out trying to upgrade."),e.secondaryConn_.close())},Math.floor(6e4))},t.prototype.onReset_=function(t){this.log_("Reset packet received.  New host: "+t),this.repoInfo_.updateHost(t),1===this.state_?this.close():(this.closeConnections_(),this.start_())},t.prototype.onConnectionEstablished_=function(t,e){var n=this;this.log_("Realtime connection established."),this.conn_=t,this.state_=1,this.onReady_&&(this.onReady_(e,this.sessionId),this.onReady_=null),0===this.primaryResponsesRequired_?(this.log_("Primary connection is healthy."),this.isHealthy_=!0):W(function(){n.sendPingOnPrimaryIfNecessary_()},Math.floor(5e3))},t.prototype.sendPingOnPrimaryIfNecessary_=function(){this.isHealthy_||1!==this.state_||(this.log_("sending ping on primary."),this.sendData_({t:"c",d:{t:"p",d:{}}}))},t.prototype.onSecondaryConnectionLost_=function(){var t=this.secondaryConn_;this.secondaryConn_=null,this.tx_!==t&&this.rx_!==t||this.close()},t.prototype.onConnectionLost_=function(t){this.conn_=null,t||0!==this.state_?1===this.state_&&this.log_("Realtime connection lost."):(this.log_("Realtime connection failed."),this.repoInfo_.isCacheableHost()&&(p.remove("host:"+this.repoInfo_.host),this.repoInfo_.internalHost=this.repoInfo_.host)),this.close()},t.prototype.onConnectionShutdown_=function(t){this.log_("Connection shutdown command received. Shutting down..."),this.onKill_&&(this.onKill_(t),this.onKill_=null),this.onDisconnect_=null,this.close()},t.prototype.sendData_=function(t){if(1!==this.state_)throw"Connection is not connected";this.tx_.send(t)},t.prototype.close=function(){2!==this.state_&&(this.log_("Closing realtime connection."),this.state_=2,this.closeConnections_(),this.onDisconnect_&&(this.onDisconnect_(),this.onDisconnect_=null))},t.prototype.closeConnections_=function(){this.log_("Shutting down all connections"),this.conn_&&(this.conn_.close(),this.conn_=null),this.secondaryConn_&&(this.secondaryConn_.close(),this.secondaryConn_=null),this.healthyTimeout_&&(clearTimeout(this.healthyTimeout_),this.healthyTimeout_=null)},t}(),Ye=function(){function t(){}return t.prototype.put=function(t,e,n,r){},t.prototype.merge=function(t,e,n,r){},t.prototype.refreshAuthToken=function(t){},t.prototype.onDisconnectPut=function(t,e,n){},t.prototype.onDisconnectMerge=function(t,e,n){},t.prototype.onDisconnectCancel=function(t,e){},t.prototype.reportStats=function(t){},t}(),Je=1e3,Ze=3e5,tn=function(t){function e(n,r,i,o,s,u){var c=t.call(this)||this;if(c.repoInfo_=n,c.onDataUpdate_=r,c.onConnectStatus_=i,c.onServerInfoUpdate_=o,c.authTokenProvider_=s,c.authOverride_=u,c.id=e.nextPersistentConnectionId_++,c.log_=C("p:"+c.id+":"),c.interruptReasons_={},c.listens_={},c.outstandingPuts_=[],c.outstandingPutCount_=0,c.onDisconnectRequestQueue_=[],c.connected_=!1,c.reconnectDelay_=Je,c.maxReconnectDelay_=Ze,c.securityDebugCallback_=null,c.lastSessionId=null,c.establishConnectionTimer_=null,c.visible_=!1,c.requestCBHash_={},c.requestNumber_=0,c.realtime_=null,c.authToken_=null,c.forceTokenRefresh_=!1,c.invalidAuthTokenCount_=0,c.firstConnection_=!0,c.lastConnectionAttemptTime_=null,c.lastConnectionEstablishedTime_=null,u&&!a.isNodeSdk())throw new Error("Auth override specified in options, but not supported on non Node.js platforms");return c.scheduleConnect_(0),Be.getInstance().on("visible",c.onVisible_,c),-1===n.host.indexOf("fblocal")&&We.getInstance().on("online",c.onOnline_,c),c}return u.__extends(e,t),e.prototype.sendRequest=function(t,e,n){var r=++this.requestNumber_,i={r:r,a:t,b:e};this.log_(a.stringify(i)),a.assert(this.connected_,"sendRequest call when we're not connected not allowed."),this.realtime_.sendRequest(i),n&&(this.requestCBHash_[r]=n)},e.prototype.listen=function(t,e,n,r){var i=t.queryIdentifier(),o=t.path.toString();this.log_("Listen called for "+o+" "+i),this.listens_[o]=this.listens_[o]||{},a.assert(t.getQueryParams().isDefault()||!t.getQueryParams().loadsAllData(),"listen() called for non-default but complete query"),a.assert(!this.listens_[o][i],"listen() called twice for same path/queryId.");var s={onComplete:r,hashFn:e,query:t,tag:n};this.listens_[o][i]=s,this.connected_&&this.sendListen_(s)},e.prototype.sendListen_=function(t){var n=this,r=t.query,i=r.path.toString(),o=r.queryIdentifier();this.log_("Listen on "+i+" for "+o);var a={p:i};t.tag&&(a.q=r.queryObject(),a.t=t.tag),a.h=t.hashFn(),this.sendRequest("q",a,function(a){var s=a.d,u=a.s;e.warnOnListenWarnings_(s,r),(n.listens_[i]&&n.listens_[i][o])===t&&(n.log_("listen response",a),"ok"!==u&&n.removeListen_(i,o),t.onComplete&&t.onComplete(u,s))})},e.warnOnListenWarnings_=function(t,e){if(t&&"object"==typeof t&&a.contains(t,"w")){var n=a.safeGet(t,"w");if(Array.isArray(n)&&~n.indexOf("no_index")){var r='".indexOn": "'+e.getQueryParams().getIndex().toString()+'"',i=e.path.toString();I("Using an unspecified index. Your data will be downloaded and filtered on the client. Consider adding "+r+" at "+i+" to your security rules for better performance.")}}},e.prototype.refreshAuthToken=function(t){this.authToken_=t,this.log_("Auth token refreshed"),this.authToken_?this.tryAuth():this.connected_&&this.sendRequest("unauth",{},function(){}),this.reduceReconnectDelayIfAdminCredential_(t)},e.prototype.reduceReconnectDelayIfAdminCredential_=function(t){(t&&40===t.length||a.isAdmin(t))&&(this.log_("Admin auth credential detected.  Reducing max reconnect time."),this.maxReconnectDelay_=3e4)},e.prototype.tryAuth=function(){var t=this;if(this.connected_&&this.authToken_){var e=this.authToken_,n=a.isValidFormat(e)?"auth":"gauth",r={cred:e};null===this.authOverride_?r.noauth=!0:"object"==typeof this.authOverride_&&(r.authvar=this.authOverride_),this.sendRequest(n,r,function(n){var r=n.s,i=n.d||"error";t.authToken_===e&&("ok"===r?t.invalidAuthTokenCount_=0:t.onAuthRevoked_(r,i))})}},e.prototype.unlisten=function(t,e){var n=t.path.toString(),r=t.queryIdentifier();this.log_("Unlisten called for "+n+" "+r),a.assert(t.getQueryParams().isDefault()||!t.getQueryParams().loadsAllData(),"unlisten() called for non-default but complete query"),this.removeListen_(n,r)&&this.connected_&&this.sendUnlisten_(n,r,t.queryObject(),e)},e.prototype.sendUnlisten_=function(t,e,n,r){this.log_("Unlisten on "+t+" for "+e);var i={p:t};r&&(i.q=n,i.t=r),this.sendRequest("n",i)},e.prototype.onDisconnectPut=function(t,e,n){this.connected_?this.sendOnDisconnect_("o",t,e,n):this.onDisconnectRequestQueue_.push({pathString:t,action:"o",data:e,onComplete:n})},e.prototype.onDisconnectMerge=function(t,e,n){this.connected_?this.sendOnDisconnect_("om",t,e,n):this.onDisconnectRequestQueue_.push({pathString:t,action:"om",data:e,onComplete:n})},e.prototype.onDisconnectCancel=function(t,e){this.connected_?this.sendOnDisconnect_("oc",t,null,e):this.onDisconnectRequestQueue_.push({pathString:t,action:"oc",data:null,onComplete:e})},e.prototype.sendOnDisconnect_=function(t,e,n,r){var i={p:e,d:n};this.log_("onDisconnect "+t,i),this.sendRequest(t,i,function(t){r&&setTimeout(function(){r(t.s,t.d)},Math.floor(0))})},e.prototype.put=function(t,e,n,r){this.putInternal("p",t,e,n,r)},e.prototype.merge=function(t,e,n,r){this.putInternal("m",t,e,n,r)},e.prototype.putInternal=function(t,e,n,r,i){var o={p:e,d:n};void 0!==i&&(o.h=i),this.outstandingPuts_.push({action:t,request:o,onComplete:r}),this.outstandingPutCount_++;var a=this.outstandingPuts_.length-1;this.connected_?this.sendPut_(a):this.log_("Buffering put: "+e)},e.prototype.sendPut_=function(t){var e=this,n=this.outstandingPuts_[t].action,r=this.outstandingPuts_[t].request,i=this.outstandingPuts_[t].onComplete;this.outstandingPuts_[t].queued=this.connected_,this.sendRequest(n,r,function(r){e.log_(n+" response",r),delete e.outstandingPuts_[t],e.outstandingPutCount_--,0===e.outstandingPutCount_&&(e.outstandingPuts_=[]),i&&i(r.s,r.d)})},e.prototype.reportStats=function(t){var e=this;if(this.connected_){var n={c:t};this.log_("reportStats",n),this.sendRequest("s",n,function(t){if("ok"!==t.s){var n=t.d;e.log_("reportStats","Error sending stats: "+n)}})}},e.prototype.onDataMessage_=function(t){if("r"in t){this.log_("from server: "+a.stringify(t));var e=t.r,n=this.requestCBHash_[e];n&&(delete this.requestCBHash_[e],n(t.b))}else{if("error"in t)throw"A server-side error has occurred: "+t.error;"a"in t&&this.onDataPush_(t.a,t.b)}},e.prototype.onDataPush_=function(t,e){this.log_("handleServerMessage",t,e),"d"===t?this.onDataUpdate_(e.p,e.d,!1,e.t):"m"===t?this.onDataUpdate_(e.p,e.d,!0,e.t):"c"===t?this.onListenRevoked_(e.p,e.q):"ac"===t?this.onAuthRevoked_(e.s,e.d):"sd"===t?this.onSecurityDebugPacket_(e):T("Unrecognized action received from server: "+a.stringify(t)+"\nAre you using the latest client?")},e.prototype.onReady_=function(t,e){this.log_("connection ready"),this.connected_=!0,this.lastConnectionEstablishedTime_=(new Date).getTime(),this.handleTimestamp_(t),this.lastSessionId=e,this.firstConnection_&&this.sendConnectStats_(),this.restoreState_(),this.firstConnection_=!1,this.onConnectStatus_(!0)},e.prototype.scheduleConnect_=function(t){var e=this;a.assert(!this.realtime_,"Scheduling a connect when we're already connected/ing?"),this.establishConnectionTimer_&&clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=setTimeout(function(){e.establishConnectionTimer_=null,e.establishConnection_()},Math.floor(t))},e.prototype.onVisible_=function(t){t&&!this.visible_&&this.reconnectDelay_===this.maxReconnectDelay_&&(this.log_("Window became visible.  Reducing delay."),this.reconnectDelay_=Je,this.realtime_||this.scheduleConnect_(0)),this.visible_=t},e.prototype.onOnline_=function(t){t?(this.log_("Browser went online."),this.reconnectDelay_=Je,this.realtime_||this.scheduleConnect_(0)):(this.log_("Browser went offline.  Killing connection."),this.realtime_&&this.realtime_.close())},e.prototype.onRealtimeDisconnect_=function(){if(this.log_("data client disconnected"),this.connected_=!1,this.realtime_=null,this.cancelSentTransactions_(),this.requestCBHash_={},this.shouldReconnect_()){if(this.visible_){if(this.lastConnectionEstablishedTime_){(new Date).getTime()-this.lastConnectionEstablishedTime_>3e4&&(this.reconnectDelay_=Je),this.lastConnectionEstablishedTime_=null}}else this.log_("Window isn't visible.  Delaying reconnect."),this.reconnectDelay_=this.maxReconnectDelay_,this.lastConnectionAttemptTime_=(new Date).getTime();var t=(new Date).getTime()-this.lastConnectionAttemptTime_,e=Math.max(0,this.reconnectDelay_-t);e=Math.random()*e,this.log_("Trying to reconnect in "+e+"ms"),this.scheduleConnect_(e),this.reconnectDelay_=Math.min(this.maxReconnectDelay_,1.3*this.reconnectDelay_)}this.onConnectStatus_(!1)},e.prototype.establishConnection_=function(){if(this.shouldReconnect_()){this.log_("Making a connection attempt"),this.lastConnectionAttemptTime_=(new Date).getTime(),this.lastConnectionEstablishedTime_=null;var t=this.onDataMessage_.bind(this),n=this.onReady_.bind(this),r=this.onRealtimeDisconnect_.bind(this),i=this.id+":"+e.nextConnectionId_++,o=this,s=this.lastSessionId,u=!1,c=null,l=function(){c?c.close():(u=!0,r())};this.realtime_={close:l,sendRequest:function(t){a.assert(c,"sendRequest call when we're not connected not allowed."),c.sendRequest(t)}};var h=this.forceTokenRefresh_;this.forceTokenRefresh_=!1,this.authTokenProvider_.getToken(h).then(function(e){u?E("getToken() completed but was canceled"):(E("getToken() completed. Creating connection."),o.authToken_=e&&e.accessToken,c=new Xe(i,o.repoInfo_,t,n,r,function(t){I(t+" ("+o.repoInfo_.toString()+")"),o.interrupt("server_kill")},s))}).then(null,function(t){o.log_("Failed to get token: "+t),u||(a.CONSTANTS.NODE_ADMIN&&I(t),l())})}},e.prototype.interrupt=function(t){E("Interrupting connection for reason: "+t),this.interruptReasons_[t]=!0,this.realtime_?this.realtime_.close():(this.establishConnectionTimer_&&(clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=null),this.connected_&&this.onRealtimeDisconnect_())},e.prototype.resume=function(t){E("Resuming connection for reason: "+t),delete this.interruptReasons_[t],a.isEmpty(this.interruptReasons_)&&(this.reconnectDelay_=Je,this.realtime_||this.scheduleConnect_(0))},e.prototype.handleTimestamp_=function(t){var e=t-(new Date).getTime();this.onServerInfoUpdate_({serverTimeOffset:e})},e.prototype.cancelSentTransactions_=function(){for(var t=0;t<this.outstandingPuts_.length;t++){var e=this.outstandingPuts_[t];e&&"h"in e.request&&e.queued&&(e.onComplete&&e.onComplete("disconnect"),delete this.outstandingPuts_[t],this.outstandingPutCount_--)}0===this.outstandingPutCount_&&(this.outstandingPuts_=[])},e.prototype.onListenRevoked_=function(t,e){var n;n=e?e.map(function(t){return D(t)}).join("$"):"default";var r=this.removeListen_(t,n);r&&r.onComplete&&r.onComplete("permission_denied")},e.prototype.removeListen_=function(t,e){var n,r=new V(t).toString();return void 0!==this.listens_[r]?(n=this.listens_[r][e],delete this.listens_[r][e],0===a.getCount(this.listens_[r])&&delete this.listens_[r]):n=void 0,n},e.prototype.onAuthRevoked_=function(t,e){E("Auth token revoked: "+t+"/"+e),this.authToken_=null,this.forceTokenRefresh_=!0,this.realtime_.close(),"invalid_token"!==t&&"permission_denied"!==t||(this.invalidAuthTokenCount_++,this.invalidAuthTokenCount_>=3&&(this.reconnectDelay_=3e4,this.authTokenProvider_.notifyForInvalidToken()))},e.prototype.onSecurityDebugPacket_=function(t){this.securityDebugCallback_?this.securityDebugCallback_(t):"msg"in t&&console.log("FIREBASE: "+t.msg.replace("\n","\nFIREBASE: "))},e.prototype.restoreState_=function(){var t=this;this.tryAuth(),a.forEach(this.listens_,function(e,n){a.forEach(n,function(e,n){t.sendListen_(n)})});for(var e=0;e<this.outstandingPuts_.length;e++)this.outstandingPuts_[e]&&this.sendPut_(e);for(;this.onDisconnectRequestQueue_.length;){var n=this.onDisconnectRequestQueue_.shift();this.sendOnDisconnect_(n.action,n.pathString,n.data,n.onComplete)}},e.prototype.sendConnectStats_=function(){var t={},e="js";a.CONSTANTS.NODE_ADMIN?e="admin_node":a.CONSTANTS.NODE_CLIENT&&(e="node"),t["sdk."+e+"."+c.SDK_VERSION.replace(/\./g,"-")]=1,a.isMobileCordova()?t["framework.cordova"]=1:a.isReactNative()&&(t["framework.reactnative"]=1),this.reportStats(t)},e.prototype.shouldReconnect_=function(){var t=We.getInstance().currentlyOnline();return a.isEmpty(this.interruptReasons_)&&t},e.nextPersistentConnectionId_=0,e.nextConnectionId_=0,e}(Ye),en=function(t){function e(e,n,r){var i=t.call(this)||this;return i.repoInfo_=e,i.onDataUpdate_=n,i.authTokenProvider_=r,i.log_=C("p:rest:"),i.listens_={},i}return u.__extends(e,t),e.prototype.reportStats=function(t){throw new Error("Method not implemented.")},e.getListenId_=function(t,e){return void 0!==e?"tag$"+e:(a.assert(t.getQueryParams().isDefault(),"should have a tag if it's not a default query."),t.path.toString())},e.prototype.listen=function(t,n,r,i){var o=this,s=t.path.toString();this.log_("Listen called for "+s+" "+t.queryIdentifier());var u=e.getListenId_(t,r),c={};this.listens_[u]=c;var l=t.getQueryParams().toRestQueryStringParameters();this.restRequest_(s+".json",l,function(t,e){var n=e;(404===t&&(n=null,t=null),null===t&&o.onDataUpdate_(s,n,!1,r),a.safeGet(o.listens_,u)===c)&&i(t?401==t?"permission_denied":"rest_error:"+t:"ok",null)})},e.prototype.unlisten=function(t,n){var r=e.getListenId_(t,n);delete this.listens_[r]},e.prototype.refreshAuthToken=function(t){},e.prototype.restRequest_=function(t,e,n){var r=this;void 0===e&&(e={}),e.format="export",this.authTokenProvider_.getToken(!1).then(function(i){var o=i&&i.accessToken;o&&(e.auth=o);var s=(r.repoInfo_.secure?"https://":"http://")+r.repoInfo_.host+t+"?"+a.querystring(e);r.log_("Sending REST request for "+s);var u=new XMLHttpRequest;u.onreadystatechange=function(){if(n&&4===u.readyState){r.log_("REST Response for "+s+" received. status:",u.status,"response:",u.responseText);var t=null;if(u.status>=200&&u.status<300){try{t=a.jsonEval(u.responseText)}catch(t){I("Failed to parse JSON response for "+s+": "+u.responseText)}n(null,t)}else 401!==u.status&&404!==u.status&&I("Got unsuccessful REST response for "+s+" Status: "+u.status),n(u.status);n=null}},u.open("GET",s,!0),u.send()})},e}(Ye),nn=function(){function t(t,e,n){var r=this;this.repoInfo_=t,this.app=n,this.dataUpdateCount=0,this.statsListener_=null,this.eventQueue_=new Fe,this.nextWriteId_=1,this.interceptServerDataCallback_=null,this.onDisconnect_=new ee,this.persistentConnection_=null;var i=new ke(n);if(this.stats_=Pe.getCollection(t),e||B())this.server_=new en(this.repoInfo_,this.onDataUpdate_.bind(this),i),setTimeout(this.onConnectStatus_.bind(this,!0),0);else{var o=n.options.databaseAuthVariableOverride;if(void 0!==o&&null!==o){if("object"!=typeof o)throw new Error("Only objects are supported for option databaseAuthVariableOverride");try{a.stringify(o)}catch(t){throw new Error("Invalid authOverride provided: "+t)}}this.persistentConnection_=new tn(this.repoInfo_,this.onDataUpdate_.bind(this),this.onConnectStatus_.bind(this),this.onServerInfoUpdate_.bind(this),i,o),this.server_=this.persistentConnection_}i.addTokenChangeListener(function(t){r.server_.refreshAuthToken(t)}),this.statsReporter_=Pe.getOrCreateReporter(t,function(){return new Me(r.stats_,r.server_)}),this.transactions_init_(),this.infoData_=new Oe,this.infoSyncTree_=new Ae({startListening:function(t,e,n,i){var o=[],a=r.infoData_.getNode(t.path);return a.isEmpty()||(o=r.infoSyncTree_.applyServerOverwrite(t.path,a),setTimeout(function(){i("ok")},0)),o},stopListening:function(){}}),this.updateInfo_("connected",!1),this.serverSyncTree_=new Ae({startListening:function(t,e,n,i){return r.server_.listen(t,n,e,function(e,n){var o=i(e,n);r.eventQueue_.raiseEventsForChangedPath(t.path,o)}),[]},stopListening:function(t,e){r.server_.unlisten(t,e)}})}return t.prototype.toString=function(){return(this.repoInfo_.secure?"https://":"http://")+this.repoInfo_.host},t.prototype.name=function(){return this.repoInfo_.namespace},t.prototype.serverTime=function(){var t=this.infoData_.getNode(new V(".info/serverTimeOffset")).val()||0;return(new Date).getTime()+t},t.prototype.generateServerValues=function(){return(t=(t={timestamp:this.serverTime()})||{}).timestamp=t.timestamp||(new Date).getTime(),t;var t},t.prototype.onDataUpdate_=function(t,e,n,r){this.dataUpdateCount++;var i=new V(t);e=this.interceptServerDataCallback_?this.interceptServerDataCallback_(t,e):e;var o=[];if(r)if(n){var s=a.map(e,function(t){return $t(t)});o=this.serverSyncTree_.applyTaggedQueryMerge(i,s,r)}else{var u=$t(e);o=this.serverSyncTree_.applyTaggedQueryOverwrite(i,u,r)}else if(n){var c=a.map(e,function(t){return $t(t)});o=this.serverSyncTree_.applyServerMerge(i,c)}else{var l=$t(e);o=this.serverSyncTree_.applyServerOverwrite(i,l)}var h=i;o.length>0&&(h=this.rerunTransactions_(i)),this.eventQueue_.raiseEventsForChangedPath(h,o)},t.prototype.interceptServerData_=function(t){this.interceptServerDataCallback_=t},t.prototype.onConnectStatus_=function(t){this.updateInfo_("connected",t),!1===t&&this.runOnDisconnectEvents_()},t.prototype.onServerInfoUpdate_=function(t){var e=this;L(t,function(t,n){e.updateInfo_(n,t)})},t.prototype.updateInfo_=function(t,e){var n=new V("/.info/"+t),r=$t(e);this.infoData_.updateSnapshot(n,r);var i=this.infoSyncTree_.applyServerOverwrite(n,r);this.eventQueue_.raiseEventsForChangedPath(n,i)},t.prototype.getNextWriteId_=function(){return this.nextWriteId_++},t.prototype.setWithPriority=function(t,e,n,r){var i=this;this.log_("set",{path:t.toString(),value:e,priority:n});var o=this.generateServerValues(),a=$t(e,n),s=re(a,o),u=this.getNextWriteId_(),c=this.serverSyncTree_.applyUserOverwrite(t,s,u,!0);this.eventQueue_.queueEvents(c),this.server_.put(t.toString(),a.val(!0),function(e,n){var o="ok"===e;o||I("set at "+t+" failed: "+e);var a=i.serverSyncTree_.ackUserWrite(u,!o);i.eventQueue_.raiseEventsForChangedPath(t,a),i.callOnCompleteCallback(r,e,n)});var l=this.abortTransactions_(t);this.rerunTransactions_(l),this.eventQueue_.raiseEventsForChangedPath(l,[])},t.prototype.update=function(t,e,n){var r=this;this.log_("update",{path:t.toString(),value:e});var i=!0,o=this.generateServerValues(),s={};if(a.forEach(e,function(t,e){i=!1;var n=$t(e);s[t]=re(n,o)}),i)E("update() called with empty data.  Don't do anything."),this.callOnCompleteCallback(n,"ok");else{var u=this.getNextWriteId_(),c=this.serverSyncTree_.applyUserMerge(t,s,u);this.eventQueue_.queueEvents(c),this.server_.merge(t.toString(),e,function(e,i){var o="ok"===e;o||I("update at "+t+" failed: "+e);var a=r.serverSyncTree_.ackUserWrite(u,!o),s=a.length>0?r.rerunTransactions_(t):t;r.eventQueue_.raiseEventsForChangedPath(s,a),r.callOnCompleteCallback(n,e,i)}),a.forEach(e,function(e){var n=r.abortTransactions_(t.child(e));r.rerunTransactions_(n)}),this.eventQueue_.raiseEventsForChangedPath(t,[])}},t.prototype.runOnDisconnectEvents_=function(){var t=this;this.log_("onDisconnectEvents");var e=this.generateServerValues(),n=[];(function(t,e){var n=new ee;return t.forEachTree(new V(""),function(t,r){n.remember(t,re(r,e))}),n})(this.onDisconnect_,e).forEachTree(V.Empty,function(e,r){n=n.concat(t.serverSyncTree_.applyServerOverwrite(e,r));var i=t.abortTransactions_(e);t.rerunTransactions_(i)}),this.onDisconnect_=new ee,this.eventQueue_.raiseEventsForChangedPath(V.Empty,n)},t.prototype.onDisconnectCancel=function(t,e){var n=this;this.server_.onDisconnectCancel(t.toString(),function(r,i){"ok"===r&&n.onDisconnect_.forget(t),n.callOnCompleteCallback(e,r,i)})},t.prototype.onDisconnectSet=function(t,e,n){var r=this,i=$t(e);this.server_.onDisconnectPut(t.toString(),i.val(!0),function(e,o){"ok"===e&&r.onDisconnect_.remember(t,i),r.callOnCompleteCallback(n,e,o)})},t.prototype.onDisconnectSetWithPriority=function(t,e,n,r){var i=this,o=$t(e,n);this.server_.onDisconnectPut(t.toString(),o.val(!0),function(e,n){"ok"===e&&i.onDisconnect_.remember(t,o),i.callOnCompleteCallback(r,e,n)})},t.prototype.onDisconnectUpdate=function(t,e,n){var r=this;if(a.isEmpty(e))return E("onDisconnect().update() called with empty data.  Don't do anything."),void this.callOnCompleteCallback(n,"ok");this.server_.onDisconnectMerge(t.toString(),e,function(i,o){"ok"===i&&a.forEach(e,function(e,n){var i=$t(n);r.onDisconnect_.remember(t.child(e),i)}),r.callOnCompleteCallback(n,i,o)})},t.prototype.addEventCallbackForQuery=function(t,e){var n;n=".info"===t.path.getFront()?this.infoSyncTree_.addEventRegistration(t,e):this.serverSyncTree_.addEventRegistration(t,e),this.eventQueue_.raiseEventsAtPath(t.path,n)},t.prototype.removeEventCallbackForQuery=function(t,e){var n;n=".info"===t.path.getFront()?this.infoSyncTree_.removeEventRegistration(t,e):this.serverSyncTree_.removeEventRegistration(t,e),this.eventQueue_.raiseEventsAtPath(t.path,n)},t.prototype.interrupt=function(){this.persistentConnection_&&this.persistentConnection_.interrupt("repo_interrupt")},t.prototype.resume=function(){this.persistentConnection_&&this.persistentConnection_.resume("repo_interrupt")},t.prototype.stats=function(t){if(void 0===t&&(t=!1),"undefined"!=typeof console){var e;t?(this.statsListener_||(this.statsListener_=new De(this.stats_)),e=this.statsListener_.get()):e=this.stats_.get();var n=Object.keys(e).reduce(function(t,e){return Math.max(e.length,t)},0);a.forEach(e,function(t,e){for(var r=t.length;r<n+2;r++)t+=" ";console.log(t+e)})}},t.prototype.statsIncrementCounter=function(t){this.stats_.incrementCounter(t),this.statsReporter_.includeStat(t)},t.prototype.log_=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="";this.persistentConnection_&&(n=this.persistentConnection_.id+":"),E.apply(void 0,[n].concat(t))},t.prototype.callOnCompleteCallback=function(t,e,n){t&&j(function(){if("ok"==e)t(null);else{var r=(e||"error").toUpperCase(),i=r;n&&(i+=": "+n);var o=new Error(i);o.code=r,t(o)}})},Object.defineProperty(t.prototype,"database",{get:function(){return this.__database||(this.__database=new pn(this))},enumerable:!0,configurable:!0}),t}(),rn=function(){function t(e){this.indexedFilter_=new ye(e.getIndex()),this.index_=e.getIndex(),this.startPost_=t.getStartPost_(e),this.endPost_=t.getEndPost_(e)}return t.prototype.getStartPost=function(){return this.startPost_},t.prototype.getEndPost=function(){return this.endPost_},t.prototype.matches=function(t){return this.index_.compare(this.getStartPost(),t)<=0&&this.index_.compare(t,this.getEndPost())<=0},t.prototype.updateChild=function(t,e,n,r,i,o){return this.matches(new yt(e,n))||(n=Bt.EMPTY_NODE),this.indexedFilter_.updateChild(t,e,n,r,i,o)},t.prototype.updateFullNode=function(t,e,n){e.isLeafNode()&&(e=Bt.EMPTY_NODE);var r=e.withIndex(this.index_);r=r.updatePriority(Bt.EMPTY_NODE);var i=this;return e.forEachChild(At,function(t,e){i.matches(new yt(t,e))||(r=r.updateImmediateChild(t,Bt.EMPTY_NODE))}),this.indexedFilter_.updateFullNode(t,r,n)},t.prototype.updatePriority=function(t,e){return t},t.prototype.filtersNodes=function(){return!0},t.prototype.getIndexedFilter=function(){return this.indexedFilter_},t.prototype.getIndex=function(){return this.index_},t.getStartPost_=function(t){if(t.hasStart()){var e=t.getIndexStartName();return t.getIndex().makePost(t.getIndexStartValue(),e)}return t.getIndex().minPost()},t.getEndPost_=function(t){if(t.hasEnd()){var e=t.getIndexEndName();return t.getIndex().makePost(t.getIndexEndValue(),e)}return t.getIndex().maxPost()},t}(),on=function(){function t(t){this.rangedFilter_=new rn(t),this.index_=t.getIndex(),this.limit_=t.getLimit(),this.reverse_=!t.isViewFromLeft()}return t.prototype.updateChild=function(t,e,n,r,i,o){return this.rangedFilter_.matches(new yt(e,n))||(n=Bt.EMPTY_NODE),t.getImmediateChild(e).equals(n)?t:t.numChildren()<this.limit_?this.rangedFilter_.getIndexedFilter().updateChild(t,e,n,r,i,o):this.fullLimitUpdateChild_(t,e,n,i,o)},t.prototype.updateFullNode=function(t,e,n){var r;if(e.isLeafNode()||e.isEmpty())r=Bt.EMPTY_NODE.withIndex(this.index_);else if(2*this.limit_<e.numChildren()&&e.isIndexed(this.index_)){r=Bt.EMPTY_NODE.withIndex(this.index_);var i=void 0;i=this.reverse_?e.getReverseIteratorFrom(this.rangedFilter_.getEndPost(),this.index_):e.getIteratorFrom(this.rangedFilter_.getStartPost(),this.index_);for(var o=0;i.hasNext()&&o<this.limit_;){var a=i.getNext();if(!(this.reverse_?this.index_.compare(this.rangedFilter_.getStartPost(),a)<=0:this.index_.compare(a,this.rangedFilter_.getEndPost())<=0))break;r=r.updateImmediateChild(a.name,a.node),o++}}else{r=(r=e.withIndex(this.index_)).updatePriority(Bt.EMPTY_NODE);var s=void 0,u=void 0,c=void 0;i=void 0;if(this.reverse_){i=r.getReverseIterator(this.index_),s=this.rangedFilter_.getEndPost(),u=this.rangedFilter_.getStartPost();var l=this.index_.getCompare();c=function(t,e){return l(e,t)}}else i=r.getIterator(this.index_),s=this.rangedFilter_.getStartPost(),u=this.rangedFilter_.getEndPost(),c=this.index_.getCompare();o=0;for(var h=!1;i.hasNext();){a=i.getNext();!h&&c(s,a)<=0&&(h=!0),h&&o<this.limit_&&c(a,u)<=0?o++:r=r.updateImmediateChild(a.name,Bt.EMPTY_NODE)}}return this.rangedFilter_.getIndexedFilter().updateFullNode(t,r,n)},t.prototype.updatePriority=function(t,e){return t},t.prototype.filtersNodes=function(){return!0},t.prototype.getIndexedFilter=function(){return this.rangedFilter_.getIndexedFilter()},t.prototype.getIndex=function(){return this.index_},t.prototype.fullLimitUpdateChild_=function(t,e,n,r,i){var o;if(this.reverse_){var s=this.index_.getCompare();o=function(t,e){return s(e,t)}}else o=this.index_.getCompare();var u=t;a.assert(u.numChildren()==this.limit_,"");var c=new yt(e,n),l=this.reverse_?u.getFirstChild(this.index_):u.getLastChild(this.index_),h=this.rangedFilter_.matches(c);if(u.hasChild(e)){for(var f=u.getImmediateChild(e),p=r.getChildAfterChild(this.index_,l,this.reverse_);null!=p&&(p.name==e||u.hasChild(p.name));)p=r.getChildAfterChild(this.index_,p,this.reverse_);var d=null==p?1:o(p,c);if(h&&!n.isEmpty()&&d>=0)return null!=i&&i.trackChildChange(ve.childChangedChange(e,n,f)),u.updateImmediateChild(e,n);null!=i&&i.trackChildChange(ve.childRemovedChange(e,f));var v=u.updateImmediateChild(e,Bt.EMPTY_NODE);return null!=p&&this.rangedFilter_.matches(p)?(null!=i&&i.trackChildChange(ve.childAddedChange(p.name,p.node)),v.updateImmediateChild(p.name,p.node)):v}return n.isEmpty()?t:h&&o(l,c)>=0?(null!=i&&(i.trackChildChange(ve.childRemovedChange(l.name,l.node)),i.trackChildChange(ve.childAddedChange(e,n))),u.updateImmediateChild(e,n).updateImmediateChild(l.name,Bt.EMPTY_NODE)):t},t}(),an=function(){function t(){this.limitSet_=!1,this.startSet_=!1,this.startNameSet_=!1,this.endSet_=!1,this.endNameSet_=!1,this.limit_=0,this.viewFrom_="",this.indexStartValue_=null,this.indexStartName_="",this.indexEndValue_=null,this.indexEndName_="",this.index_=At}return t.prototype.hasStart=function(){return this.startSet_},t.prototype.isViewFromLeft=function(){return""===this.viewFrom_?this.startSet_:this.viewFrom_===t.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT},t.prototype.getIndexStartValue=function(){return a.assert(this.startSet_,"Only valid if start has been set"),this.indexStartValue_},t.prototype.getIndexStartName=function(){return a.assert(this.startSet_,"Only valid if start has been set"),this.startNameSet_?this.indexStartName_:A},t.prototype.hasEnd=function(){return this.endSet_},t.prototype.getIndexEndValue=function(){return a.assert(this.endSet_,"Only valid if end has been set"),this.indexEndValue_},t.prototype.getIndexEndName=function(){return a.assert(this.endSet_,"Only valid if end has been set"),this.endNameSet_?this.indexEndName_:O},t.prototype.hasLimit=function(){return this.limitSet_},t.prototype.hasAnchoredLimit=function(){return this.limitSet_&&""!==this.viewFrom_},t.prototype.getLimit=function(){return a.assert(this.limitSet_,"Only valid if limit has been set"),this.limit_},t.prototype.getIndex=function(){return this.index_},t.prototype.copy_=function(){var e=new t;return e.limitSet_=this.limitSet_,e.limit_=this.limit_,e.startSet_=this.startSet_,e.indexStartValue_=this.indexStartValue_,e.startNameSet_=this.startNameSet_,e.indexStartName_=this.indexStartName_,e.endSet_=this.endSet_,e.indexEndValue_=this.indexEndValue_,e.endNameSet_=this.endNameSet_,e.indexEndName_=this.indexEndName_,e.index_=this.index_,e.viewFrom_=this.viewFrom_,e},t.prototype.limit=function(t){var e=this.copy_();return e.limitSet_=!0,e.limit_=t,e.viewFrom_="",e},t.prototype.limitToFirst=function(e){var n=this.copy_();return n.limitSet_=!0,n.limit_=e,n.viewFrom_=t.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT,n},t.prototype.limitToLast=function(e){var n=this.copy_();return n.limitSet_=!0,n.limit_=e,n.viewFrom_=t.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT,n},t.prototype.startAt=function(t,e){var n=this.copy_();return n.startSet_=!0,void 0===t&&(t=null),n.indexStartValue_=t,null!=e?(n.startNameSet_=!0,n.indexStartName_=e):(n.startNameSet_=!1,n.indexStartName_=""),n},t.prototype.endAt=function(t,e){var n=this.copy_();return n.endSet_=!0,void 0===t&&(t=null),n.indexEndValue_=t,void 0!==e?(n.endNameSet_=!0,n.indexEndName_=e):(n.endNameSet_=!1,n.indexEndName_=""),n},t.prototype.orderBy=function(t){var e=this.copy_();return e.index_=t,e},t.prototype.getQueryObject=function(){var e=t.WIRE_PROTOCOL_CONSTANTS_,n={};if(this.startSet_&&(n[e.INDEX_START_VALUE]=this.indexStartValue_,this.startNameSet_&&(n[e.INDEX_START_NAME]=this.indexStartName_)),this.endSet_&&(n[e.INDEX_END_VALUE]=this.indexEndValue_,this.endNameSet_&&(n[e.INDEX_END_NAME]=this.indexEndName_)),this.limitSet_){n[e.LIMIT]=this.limit_;var r=this.viewFrom_;""===r&&(r=this.isViewFromLeft()?e.VIEW_FROM_LEFT:e.VIEW_FROM_RIGHT),n[e.VIEW_FROM]=r}return this.index_!==At&&(n[e.INDEX]=this.index_.toString()),n},t.prototype.loadsAllData=function(){return!(this.startSet_||this.endSet_||this.limitSet_)},t.prototype.isDefault=function(){return this.loadsAllData()&&this.index_==At},t.prototype.getNodeFilter=function(){return this.loadsAllData()?new ye(this.getIndex()):this.hasLimit()?new on(this):new rn(this)},t.prototype.toRestQueryStringParameters=function(){var e,n=t.REST_QUERY_CONSTANTS_,r={};return this.isDefault()?r:(this.index_===At?e=n.PRIORITY_INDEX:this.index_===Kt?e=n.VALUE_INDEX:this.index_===mt?e=n.KEY_INDEX:(a.assert(this.index_ instanceof Gt,"Unrecognized index type!"),e=this.index_.toString()),r[n.ORDER_BY]=a.stringify(e),this.startSet_&&(r[n.START_AT]=a.stringify(this.indexStartValue_),this.startNameSet_&&(r[n.START_AT]+=","+a.stringify(this.indexStartName_))),this.endSet_&&(r[n.END_AT]=a.stringify(this.indexEndValue_),this.endNameSet_&&(r[n.END_AT]+=","+a.stringify(this.indexEndName_))),this.limitSet_&&(this.isViewFromLeft()?r[n.LIMIT_TO_FIRST]=this.limit_:r[n.LIMIT_TO_LAST]=this.limit_),r)},t.WIRE_PROTOCOL_CONSTANTS_={INDEX_START_VALUE:"sp",INDEX_START_NAME:"sn",INDEX_END_VALUE:"ep",INDEX_END_NAME:"en",LIMIT:"l",VIEW_FROM:"vf",VIEW_FROM_LEFT:"l",VIEW_FROM_RIGHT:"r",INDEX:"i"},t.REST_QUERY_CONSTANTS_={ORDER_BY:"orderBy",PRIORITY_INDEX:"$priority",VALUE_INDEX:"$value",KEY_INDEX:"$key",START_AT:"startAt",END_AT:"endAt",LIMIT_TO_FIRST:"limitToFirst",LIMIT_TO_LAST:"limitToLast"},t.DEFAULT=new t,t}(),sn=function(t){function e(e,n){if(!(e instanceof nn))throw new Error("new Reference() no longer supported - use app.database().");return t.call(this,e,n,an.DEFAULT,!1)||this}return u.__extends(e,t),e.prototype.getKey=function(){return a.validateArgCount("Reference.key",0,0,arguments.length),this.path.isEmpty()?null:this.path.getBack()},e.prototype.child=function(t){return a.validateArgCount("Reference.child",1,1,arguments.length),"number"==typeof t?t=String(t):t instanceof V||(null===this.path.getFront()?function(t,e,n,r){n&&(n=n.replace(/^\/*\.info(\/|$)/,"/")),lt(t,e,n,r)}("Reference.child",1,t,!1):lt("Reference.child",1,t,!1)),new e(this.repo,this.path.child(t))},e.prototype.getParent=function(){a.validateArgCount("Reference.parent",0,0,arguments.length);var t=this.path.parent();return null===t?null:new e(this.repo,t)},e.prototype.getRoot=function(){a.validateArgCount("Reference.root",0,0,arguments.length);for(var t=this;null!==t.getParent();)t=t.getParent();return t},e.prototype.databaseProp=function(){return this.repo.database},e.prototype.set=function(t,e){a.validateArgCount("Reference.set",1,2,arguments.length),ht("Reference.set",this.path),it("Reference.set",1,t,this.path,!1),a.validateCallback("Reference.set",2,e,!0);var n=new a.Deferred;return this.repo.setWithPriority(this.path,t,null,n.wrapCallback(e)),n.promise},e.prototype.update=function(t,e){if(a.validateArgCount("Reference.update",1,2,arguments.length),ht("Reference.update",this.path),Array.isArray(t)){for(var n={},r=0;r<t.length;++r)n[""+r]=t[r];t=n,I("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}at("Reference.update",1,t,this.path,!1),a.validateCallback("Reference.update",2,e,!0);var i=new a.Deferred;return this.repo.update(this.path,t,i.wrapCallback(e)),i.promise},e.prototype.setWithPriority=function(t,e,n){if(a.validateArgCount("Reference.setWithPriority",2,3,arguments.length),ht("Reference.setWithPriority",this.path),it("Reference.setWithPriority",1,t,this.path,!1),st("Reference.setWithPriority",2,e,!1),a.validateCallback("Reference.setWithPriority",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Reference.setWithPriority failed: "+this.getKey()+" is a read-only object.";var r=new a.Deferred;return this.repo.setWithPriority(this.path,t,e,r.wrapCallback(n)),r.promise},e.prototype.remove=function(t){return a.validateArgCount("Reference.remove",0,1,arguments.length),ht("Reference.remove",this.path),a.validateCallback("Reference.remove",1,t,!0),this.set(null,t)},e.prototype.transaction=function(t,e,n){if(a.validateArgCount("Reference.transaction",1,3,arguments.length),ht("Reference.transaction",this.path),a.validateCallback("Reference.transaction",1,t,!1),a.validateCallback("Reference.transaction",2,e,!0),function(t,e,n,r){if((!r||void 0!==n)&&"boolean"!=typeof n)throw new Error(a.errorPrefix(t,e,r)+"must be a boolean.")}("Reference.transaction",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Reference.transaction failed: "+this.getKey()+" is a read-only object.";void 0===n&&(n=!0);var r=new a.Deferred;"function"==typeof e&&r.promise.catch(function(){});return this.repo.startTransaction(this.path,t,function(t,n,i){t?r.reject(t):r.resolve(new dt(n,i)),"function"==typeof e&&e(t,n,i)},n),r.promise},e.prototype.setPriority=function(t,e){a.validateArgCount("Reference.setPriority",1,2,arguments.length),ht("Reference.setPriority",this.path),st("Reference.setPriority",1,t,!1),a.validateCallback("Reference.setPriority",2,e,!0);var n=new a.Deferred;return this.repo.setWithPriority(this.path.child(".priority"),t,null,n.wrapCallback(e)),n.promise},e.prototype.push=function(t,e){a.validateArgCount("Reference.push",0,2,arguments.length),ht("Reference.push",this.path),it("Reference.push",1,t,this.path,!0),a.validateCallback("Reference.push",2,e,!0);var n,r=this.repo.serverTime(),i=vt(r),o=this.child(i),s=this.child(i);return n=null!=t?o.set(t,e).then(function(){return s}):Promise.resolve(s),o.then=n.then.bind(n),o.catch=n.then.bind(n,void 0),"function"==typeof e&&n.catch(function(){}),o},e.prototype.onDisconnect=function(){return ht("Reference.onDisconnect",this.path),new pt(this.repo,this.path)},Object.defineProperty(e.prototype,"database",{get:function(){return this.databaseProp()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"key",{get:function(){return this.getKey()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"parent",{get:function(){return this.getParent()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"root",{get:function(){return this.getRoot()},enumerable:!0,configurable:!0}),e}(Zt);Zt.__referenceConstructor=sn,Te.__referenceConstructor=sn;var un,cn=function(){return function(){this.children={},this.childCount=0,this.value=null}}(),ln=function(){function t(t,e,n){void 0===t&&(t=""),void 0===e&&(e=null),void 0===n&&(n=new cn),this.name_=t,this.parent_=e,this.node_=n}return t.prototype.subTree=function(e){for(var n,r=e instanceof V?e:new V(e),i=this;null!==(n=r.getFront());){i=new t(n,i,a.safeGet(i.node_.children,n)||new cn),r=r.popFront()}return i},t.prototype.getValue=function(){return this.node_.value},t.prototype.setValue=function(t){a.assert(void 0!==t,"Cannot set value to undefined"),this.node_.value=t,this.updateParents_()},t.prototype.clear=function(){this.node_.value=null,this.node_.children={},this.node_.childCount=0,this.updateParents_()},t.prototype.hasChildren=function(){return this.node_.childCount>0},t.prototype.isEmpty=function(){return null===this.getValue()&&!this.hasChildren()},t.prototype.forEachChild=function(e){var n=this;a.forEach(this.node_.children,function(r,i){e(new t(r,n,i))})},t.prototype.forEachDescendant=function(t,e,n){e&&!n&&t(this),this.forEachChild(function(e){e.forEachDescendant(t,!0,n)}),e&&n&&t(this)},t.prototype.forEachAncestor=function(t,e){for(var n=e?this:this.parent();null!==n;){if(t(n))return!0;n=n.parent()}return!1},t.prototype.forEachImmediateDescendantWithValue=function(t){this.forEachChild(function(e){null!==e.getValue()?t(e):e.forEachImmediateDescendantWithValue(t)})},t.prototype.path=function(){return new V(null===this.parent_?this.name_:this.parent_.path()+"/"+this.name_)},t.prototype.name=function(){return this.name_},t.prototype.parent=function(){return this.parent_},t.prototype.updateParents_=function(){null!==this.parent_&&this.parent_.updateChild_(this.name_,this)},t.prototype.updateChild_=function(t,e){var n=e.isEmpty(),r=a.contains(this.node_.children,t);n&&r?(delete this.node_.children[t],this.node_.childCount--,this.updateParents_()):n||r||(this.node_.children[t]=e.node_,this.node_.childCount++,this.updateParents_())},t}();!function(t){t[t.RUN=0]="RUN",t[t.SENT=1]="SENT",t[t.COMPLETED=2]="COMPLETED",t[t.SENT_NEEDS_ABORT=3]="SENT_NEEDS_ABORT",t[t.NEEDS_ABORT=4]="NEEDS_ABORT"}(un||(un={})),nn.MAX_TRANSACTION_RETRIES_=25,nn.prototype.transactions_init_=function(){this.transactionQueueTree_=new ln},nn.prototype.startTransaction=function(t,e,n,r){this.log_("transaction on "+t);var i=function(){},o=new sn(this,t);o.on("value",i);var s={path:t,update:e,onComplete:n,status:null,order:y(),applyLocally:r,retryCount:0,unwatcher:function(){o.off("value",i)},abortReason:null,currentWriteId:null,currentInputSnapshot:null,currentOutputSnapshotRaw:null,currentOutputSnapshotResolved:null},u=this.getLatestState_(t);s.currentInputSnapshot=u;var c=s.update(u.val());if(void 0===c){if(s.unwatcher(),s.currentOutputSnapshotRaw=null,s.currentOutputSnapshotResolved=null,s.onComplete){var l=new Qt(s.currentInputSnapshot,new sn(this,s.path),At);s.onComplete(null,!1,l)}}else{ot("transaction failed: Data returned ",c,s.path),s.status=un.RUN;var h=this.transactionQueueTree_.subTree(t),f=h.getValue()||[];f.push(s),h.setValue(f);var p=void 0;if("object"==typeof c&&null!==c&&a.contains(c,".priority"))p=a.safeGet(c,".priority"),a.assert(rt(p),"Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.");else p=(this.serverSyncTree_.calcCompleteEventCache(t)||Bt.EMPTY_NODE).getPriority().val();p=p;var d=this.generateServerValues(),v=$t(c,p),_=re(v,d);s.currentOutputSnapshotRaw=v,s.currentOutputSnapshotResolved=_,s.currentWriteId=this.getNextWriteId_();var g=this.serverSyncTree_.applyUserOverwrite(t,_,s.currentWriteId,s.applyLocally);this.eventQueue_.raiseEventsForChangedPath(t,g),this.sendReadyTransactions_()}},nn.prototype.getLatestState_=function(t,e){return this.serverSyncTree_.calcCompleteEventCache(t,e)||Bt.EMPTY_NODE},nn.prototype.sendReadyTransactions_=function(t){var e=this;if(void 0===t&&(t=this.transactionQueueTree_),t||this.pruneCompletedTransactionsBelowNode_(t),null!==t.getValue()){var n=this.buildTransactionQueue_(t);a.assert(n.length>0,"Sending zero length transaction queue"),n.every(function(t){return t.status===un.RUN})&&this.sendTransactionQueue_(t.path(),n)}else t.hasChildren()&&t.forEachChild(function(t){e.sendReadyTransactions_(t)})},nn.prototype.sendTransactionQueue_=function(t,e){for(var n=this,r=e.map(function(t){return t.currentWriteId}),i=this.getLatestState_(t,r),o=i,s=i.hash(),u=0;u<e.length;u++){var c=e[u];a.assert(c.status===un.RUN,"tryToSendTransactionQueue_: items in queue should all be run."),c.status=un.SENT,c.retryCount++;var l=V.relativePath(t,c.path);o=o.updateChild(l,c.currentOutputSnapshotRaw)}var h=o.val(!0),f=t;this.server_.put(f.toString(),h,function(r){n.log_("transaction put response",{path:f.toString(),status:r});var i=[];if("ok"===r){for(var o=[],a=0;a<e.length;a++){if(e[a].status=un.COMPLETED,i=i.concat(n.serverSyncTree_.ackUserWrite(e[a].currentWriteId)),e[a].onComplete){var s=e[a].currentOutputSnapshotResolved,u=new sn(n,e[a].path),c=new Qt(s,u,At);o.push(e[a].onComplete.bind(null,null,!0,c))}e[a].unwatcher()}n.pruneCompletedTransactionsBelowNode_(n.transactionQueueTree_.subTree(t)),n.sendReadyTransactions_(),n.eventQueue_.raiseEventsForChangedPath(t,i);for(a=0;a<o.length;a++)j(o[a])}else{if("datastale"===r)for(a=0;a<e.length;a++)e[a].status===un.SENT_NEEDS_ABORT?e[a].status=un.NEEDS_ABORT:e[a].status=un.RUN;else{I("transaction at "+f.toString()+" failed: "+r);for(a=0;a<e.length;a++)e[a].status=un.NEEDS_ABORT,e[a].abortReason=r}n.rerunTransactions_(t)}},s)},nn.prototype.rerunTransactions_=function(t){var e=this.getAncestorTransactionNode_(t),n=e.path(),r=this.buildTransactionQueue_(e);return this.rerunTransactionQueue_(r,n),n},nn.prototype.rerunTransactionQueue_=function(t,e){if(0!==t.length){for(var n,r=[],i=[],o=t.filter(function(t){return t.status===un.RUN}).map(function(t){return t.currentWriteId}),s=0;s<t.length;s++){var u=t[s],c=V.relativePath(e,u.path),l=!1,h=void 0;if(a.assert(null!==c,"rerunTransactionsUnderNode_: relativePath should not be null."),u.status===un.NEEDS_ABORT)l=!0,h=u.abortReason,i=i.concat(this.serverSyncTree_.ackUserWrite(u.currentWriteId,!0));else if(u.status===un.RUN)if(u.retryCount>=nn.MAX_TRANSACTION_RETRIES_)l=!0,h="maxretry",i=i.concat(this.serverSyncTree_.ackUserWrite(u.currentWriteId,!0));else{var f=this.getLatestState_(u.path,o);u.currentInputSnapshot=f;var p=t[s].update(f.val());if(void 0!==p){ot("transaction failed: Data returned ",p,u.path);var d=$t(p);"object"==typeof p&&null!=p&&a.contains(p,".priority")||(d=d.updatePriority(f.getPriority()));var v=u.currentWriteId,y=this.generateServerValues(),_=re(d,y);u.currentOutputSnapshotRaw=d,u.currentOutputSnapshotResolved=_,u.currentWriteId=this.getNextWriteId_(),o.splice(o.indexOf(v),1),i=(i=i.concat(this.serverSyncTree_.applyUserOverwrite(u.path,_,u.currentWriteId,u.applyLocally))).concat(this.serverSyncTree_.ackUserWrite(v,!0))}else l=!0,h="nodata",i=i.concat(this.serverSyncTree_.ackUserWrite(u.currentWriteId,!0))}if(this.eventQueue_.raiseEventsForChangedPath(e,i),i=[],l&&(t[s].status=un.COMPLETED,n=t[s].unwatcher,setTimeout(n,Math.floor(0)),t[s].onComplete))if("nodata"===h){var g=new sn(this,t[s].path),m=t[s].currentInputSnapshot,b=new Qt(m,g,At);r.push(t[s].onComplete.bind(null,null,!1,b))}else r.push(t[s].onComplete.bind(null,new Error(h),!1,null))}this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);for(s=0;s<r.length;s++)j(r[s]);this.sendReadyTransactions_()}},nn.prototype.getAncestorTransactionNode_=function(t){for(var e,n=this.transactionQueueTree_;null!==(e=t.getFront())&&null===n.getValue();)n=n.subTree(e),t=t.popFront();return n},nn.prototype.buildTransactionQueue_=function(t){var e=[];return this.aggregateTransactionQueuesForNode_(t,e),e.sort(function(t,e){return t.order-e.order}),e},nn.prototype.aggregateTransactionQueuesForNode_=function(t,e){var n=this,r=t.getValue();if(null!==r)for(var i=0;i<r.length;i++)e.push(r[i]);t.forEachChild(function(t){n.aggregateTransactionQueuesForNode_(t,e)})},nn.prototype.pruneCompletedTransactionsBelowNode_=function(t){var e=this,n=t.getValue();if(n){for(var r=0,i=0;i<n.length;i++)n[i].status!==un.COMPLETED&&(n[r]=n[i],r++);n.length=r,t.setValue(n.length>0?n:null)}t.forEachChild(function(t){e.pruneCompletedTransactionsBelowNode_(t)})},nn.prototype.abortTransactions_=function(t){var e=this,n=this.getAncestorTransactionNode_(t).path(),r=this.transactionQueueTree_.subTree(t);return r.forEachAncestor(function(t){e.abortTransactionsOnNode_(t)}),this.abortTransactionsOnNode_(r),r.forEachDescendant(function(t){e.abortTransactionsOnNode_(t)}),n},nn.prototype.abortTransactionsOnNode_=function(t){var e=t.getValue();if(null!==e){for(var n=[],r=[],i=-1,o=0;o<e.length;o++)if(e[o].status===un.SENT_NEEDS_ABORT);else if(e[o].status===un.SENT)a.assert(i===o-1,"All SENT items should be at beginning of queue."),i=o,e[o].status=un.SENT_NEEDS_ABORT,e[o].abortReason="set";else if(a.assert(e[o].status===un.RUN,"Unexpected transaction status in abort"),e[o].unwatcher(),r=r.concat(this.serverSyncTree_.ackUserWrite(e[o].currentWriteId,!0)),e[o].onComplete){n.push(e[o].onComplete.bind(null,new Error("set"),!1,null))}-1===i?t.setValue(null):e.length=i+1,this.eventQueue_.raiseEventsForChangedPath(t.path(),r);for(o=0;o<n.length;o++)j(n[o])}};var hn,fn=function(){function t(){this.repos_={},this.useRestClient_=!1}return t.getInstance=function(){return hn||(hn=new t),hn},t.prototype.interrupt=function(){for(var t in this.repos_)for(var e in this.repos_[t])this.repos_[t][e].interrupt()},t.prototype.resume=function(){for(var t in this.repos_)for(var e in this.repos_[t])this.repos_[t][e].resume()},t.prototype.databaseFromApp=function(t,e){var n=e||t.options.databaseURL;void 0===n&&S("Can't determine Firebase Database URL.  Be sure to include databaseURL option when calling firebase.initializeApp().");var r=Y(n),i=r.repoInfo;return ft("Invalid Firebase Database URL",1,r),r.path.isEmpty()||S("Database URL must point to the root of a Firebase Database (not including a child path)."),this.createRepo(i,t).database},t.prototype.deleteRepo=function(t){var e=a.safeGet(this.repos_,t.app.name);e&&a.safeGet(e,t.repoInfo_.toURLString())===t||S("Database "+t.app.name+"("+t.repoInfo_+") has already been deleted."),t.interrupt(),delete e[t.repoInfo_.toURLString()]},t.prototype.createRepo=function(t,e){var n=a.safeGet(this.repos_,e.name);n||(n={},this.repos_[e.name]=n);var r=a.safeGet(n,t.toURLString());return r&&S("Database initialized multiple times. Please make sure the format of the database URL matches with each database() call."),r=new nn(t,this.useRestClient_,e),n[t.toURLString()]=r,r},t.prototype.forceRestClient=function(t){this.useRestClient_=t},t}(),pn=function(){function t(t){this.repo_=t,t instanceof nn||S("Don't call new Database() directly - please use firebase.database()."),this.root_=new sn(t,V.Empty),this.INTERNAL=new dn(this)}return Object.defineProperty(t.prototype,"app",{get:function(){return this.repo_.app},enumerable:!0,configurable:!0}),t.prototype.ref=function(t){return this.checkDeleted_("ref"),a.validateArgCount("database.ref",0,1,arguments.length),t instanceof sn?this.refFromURL(t.toString()):void 0!==t?this.root_.child(t):this.root_},t.prototype.refFromURL=function(t){var e="database.refFromURL";this.checkDeleted_(e),a.validateArgCount(e,1,1,arguments.length);var n=Y(t);ft(e,1,n);var r=n.repoInfo;return r.host!==this.repo_.repoInfo_.host&&S(e+": Host name does not match the current database: (found "+r.host+" but expected "+this.repo_.repoInfo_.host+")"),this.ref(n.path.toString())},t.prototype.checkDeleted_=function(t){null===this.repo_&&S("Cannot call "+t+" on a deleted database.")},t.prototype.goOffline=function(){a.validateArgCount("database.goOffline",0,0,arguments.length),this.checkDeleted_("goOffline"),this.repo_.interrupt()},t.prototype.goOnline=function(){a.validateArgCount("database.goOnline",0,0,arguments.length),this.checkDeleted_("goOnline"),this.repo_.resume()},t.ServerValue={TIMESTAMP:{".sv":"timestamp"}},t}(),dn=function(){function t(t){this.database=t}return t.prototype.delete=function(){return u.__awaiter(this,void 0,void 0,function(){return u.__generator(this,function(t){return this.database.checkDeleted_("delete"),fn.getInstance().deleteRepo(this.database.repo_),this.database.repo_=null,this.database.root_=null,this.database.INTERNAL=null,this.database=null,[2]})})},t}(),vn=Object.freeze({forceLongPolling:function(){Qe.forceDisallow(),He.forceAllow()},forceWebSockets:function(){He.forceDisallow()},isWebSocketsAvailable:function(){return Qe.isAvailable()},setSecurityDebugCallback:function(t,e){t.repo.persistentConnection_.securityDebugCallback_=e},stats:function(t,e){t.repo.stats(e)},statsIncrementCounter:function(t,e){t.repo.statsIncrementCounter(e)},dataUpdateCount:function(t){return t.repo.dataUpdateCount},interceptServerData:function(t,e){return t.repo.interceptServerData_(e)}}),yn=tn;tn.prototype.simpleListen=function(t,e){this.sendRequest("q",{p:t},e)},tn.prototype.echo=function(t,e){this.sendRequest("echo",{d:t},e)};var _n=Xe,gn=H,mn=Object.freeze({DataConnection:yn,RealTimeConnection:_n,hijackHash:function(t){var e=tn.prototype.put;return tn.prototype.put=function(n,r,i,o){void 0!==o&&(o=t()),e.call(this,n,r,i,o)},function(){tn.prototype.put=e}},ConnectionTarget:gn,queryIdentifier:function(t){return t.queryIdentifier()},listens:function(t){return t.repo.persistentConnection_.listens_},forceRestClient:function(t){fn.getInstance().forceRestClient(t)}}),bn=pn.ServerValue;function wn(e){var n=e.INTERNAL.registerService("database",function(t,e,n){return fn.getInstance().databaseFromApp(t,n)},{Reference:sn,Query:Zt,Database:pn,enableLogging:w,INTERNAL:vn,ServerValue:bn,TEST_ACCESS:mn},null,!0);a.isNodeSdk()&&(t.exports=n)}wn(c),e.registerDatabase=wn,e.Database=pn,e.Query=Zt,e.Reference=sn,e.enableLogging=w,e.ServerValue=bn,e.DataSnapshot=Qt,e.OnDisconnect=pt}).call(this,n(7))},function(t,e,n){t.exports=n(15)},function(t,e,n){(function(t){(function(){var t,e=n(2).default,r=r||{},i=this;function o(t){return"string"==typeof t}function a(t){return"boolean"==typeof t}function s(){}function u(t){var e=typeof t;if("object"==e){if(!t)return"null";if(t instanceof Array)return"array";if(t instanceof Object)return e;var n=Object.prototype.toString.call(t);if("[object Window]"==n)return"object";if("[object Array]"==n||"number"==typeof t.length&&void 0!==t.splice&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("splice"))return"array";if("[object Function]"==n||void 0!==t.call&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("call"))return"function"}else if("function"==e&&void 0===t.call)return"object";return e}function c(t){return null===t}function l(t){return"array"==u(t)}function h(t){var e=u(t);return"array"==e||"object"==e&&"number"==typeof t.length}function f(t){return"function"==u(t)}function p(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}var d="closure_uid_"+(1e9*Math.random()>>>0),v=0;function y(t,e,n){return t.call.apply(t.bind,arguments)}function _(t,e,n){if(!t)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function g(t,e,n){return(g=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?y:_).apply(null,arguments)}function m(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}var b=Date.now||function(){return+new Date};function w(t,e){function n(){}n.prototype=e.prototype,t.lb=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.ad=function(t,n,r){for(var i=Array(arguments.length-2),o=2;o<arguments.length;o++)i[o-2]=arguments[o];return e.prototype[n].apply(t,i)}}function E(t){t.prototype.then=t.prototype.then,t.prototype.$goog_Thenable=!0}function C(t){if(!t)return!1;try{return!!t.$goog_Thenable}catch(t){return!1}}function T(t){if(Error.captureStackTrace)Error.captureStackTrace(this,T);else{var e=Error().stack;e&&(this.stack=e)}t&&(this.message=String(t))}function S(t,e){for(var n="",r=(t=t.split("%s")).length-1,i=0;i<r;i++)n+=t[i]+(i<e.length?e[i]:"%s");T.call(this,n+t[r])}function I(t,e){throw new S("Failure"+(t?": "+t:""),Array.prototype.slice.call(arguments,1))}function N(t,e){this.c=t,this.f=e,this.b=0,this.a=null}function A(t,e){t.f(e),100>t.b&&(t.b++,e.next=t.a,t.a=e)}function O(){this.b=this.a=null}w(T,Error),T.prototype.name="CustomError",w(S,T),S.prototype.name="AssertionError",N.prototype.get=function(){if(0<this.b){this.b--;var t=this.a;this.a=t.next,t.next=null}else t=this.c();return t};var k=new N(function(){return new P},function(t){t.reset()});function R(){var t=dt,e=null;return t.a&&(e=t.a,t.a=t.a.next,t.a||(t.b=null),e.next=null),e}function P(){this.next=this.b=this.a=null}O.prototype.add=function(t,e){var n=k.get();n.set(t,e),this.b?this.b.next=n:this.a=n,this.b=n},P.prototype.set=function(t,e){this.a=t,this.b=e,this.next=null},P.prototype.reset=function(){this.next=this.b=this.a=null};var D=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if(o(t))return o(e)&&1==e.length?t.indexOf(e,0):-1;for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},x=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var r=t.length,i=o(t)?t.split(""):t,a=0;a<r;a++)a in i&&e.call(n,i[a],a,t)};var L=Array.prototype.map?function(t,e){return Array.prototype.map.call(t,e,void 0)}:function(t,e){for(var n=t.length,r=Array(n),i=o(t)?t.split(""):t,a=0;a<n;a++)a in i&&(r[a]=e.call(void 0,i[a],a,t));return r},M=Array.prototype.some?function(t,e){return Array.prototype.some.call(t,e,void 0)}:function(t,e){for(var n=t.length,r=o(t)?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t))return!0;return!1};function F(t,e){return 0<=D(t,e)}function U(t,e){var n;return(n=0<=(e=D(t,e)))&&Array.prototype.splice.call(t,e,1),n}function j(t,e){!function(t,e){var n=t.length,r=o(t)?t.split(""):t;for(--n;0<=n;--n)n in r&&e.call(void 0,r[n],n,t)}(t,function(n,r){e.call(void 0,n,r,t)&&1==Array.prototype.splice.call(t,r,1).length&&0})}function B(t){return Array.prototype.concat.apply([],arguments)}function W(t){var e=t.length;if(0<e){for(var n=Array(e),r=0;r<e;r++)n[r]=t[r];return n}return[]}function V(t,e){for(var n=t.split("%s"),r="",i=Array.prototype.slice.call(arguments,1);i.length&&1<n.length;)r+=n.shift()+i.shift();return r+n.join("%s")}var $=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]};function q(t){return J.test(t)?(-1!=t.indexOf("&")&&(t=t.replace(K,"&amp;")),-1!=t.indexOf("<")&&(t=t.replace(G,"&lt;")),-1!=t.indexOf(">")&&(t=t.replace(Q,"&gt;")),-1!=t.indexOf('"')&&(t=t.replace(z,"&quot;")),-1!=t.indexOf("'")&&(t=t.replace(X,"&#39;")),-1!=t.indexOf("\0")&&(t=t.replace(Y,"&#0;")),t):t}var H,K=/&/g,G=/</g,Q=/>/g,z=/"/g,X=/'/g,Y=/\x00/g,J=/[\x00&<>"']/;function Z(t,e){return-1!=t.indexOf(e)}function tt(t,e){return t<e?-1:t>e?1:0}t:{var et=i.navigator;if(et){var nt=et.userAgent;if(nt){H=nt;break t}}H=""}function rt(t){return Z(H,t)}function it(t,e){for(var n in t)e.call(void 0,t[n],n,t)}function ot(t){for(var e in t)return!1;return!0}function at(t){var e,n={};for(e in t)n[e]=t[e];return n}var st,ut,ct="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function lt(t,e){for(var n,r,i=1;i<arguments.length;i++){for(n in r=arguments[i])t[n]=r[n];for(var o=0;o<ct.length;o++)n=ct[o],Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}}function ht(t){i.setTimeout(function(){throw t},0)}function ft(t,e){ut||function(){if(i.Promise&&i.Promise.resolve){var t=i.Promise.resolve(void 0);ut=function(){t.then(vt)}}else ut=function(){var t=vt;!f(i.setImmediate)||i.Window&&i.Window.prototype&&!rt("Edge")&&i.Window.prototype.setImmediate==i.setImmediate?(st||(st=function(){var t=i.MessageChannel;if(void 0===t&&"undefined"!=typeof window&&window.postMessage&&window.addEventListener&&!rt("Presto")&&(t=function(){var t=document.createElement("IFRAME");t.style.display="none",t.src="",document.documentElement.appendChild(t);var e=t.contentWindow;(t=e.document).open(),t.write(""),t.close();var n="callImmediate"+Math.random(),r="file:"==e.location.protocol?"*":e.location.protocol+"//"+e.location.host;t=g(function(t){"*"!=r&&t.origin!=r||t.data!=n||this.port1.onmessage()},this),e.addEventListener("message",t,!1),this.port1={},this.port2={postMessage:function(){e.postMessage(n,r)}}}),void 0!==t&&!rt("Trident")&&!rt("MSIE")){var e=new t,n={},r=n;return e.port1.onmessage=function(){if(void 0!==n.next){var t=(n=n.next).rb;n.rb=null,t()}},function(t){r.next={rb:t},r=r.next,e.port2.postMessage(0)}}return"undefined"!=typeof document&&"onreadystatechange"in document.createElement("SCRIPT")?function(t){var e=document.createElement("SCRIPT");e.onreadystatechange=function(){e.onreadystatechange=null,e.parentNode.removeChild(e),e=null,t(),t=null},document.documentElement.appendChild(e)}:function(t){i.setTimeout(t,0)}}()),st(t)):i.setImmediate(t)}}(),pt||(ut(),pt=!0),dt.add(t,e)}var pt=!1,dt=new O;function vt(){for(var t;t=R();){try{t.a.call(t.b)}catch(t){ht(t)}A(k,t)}pt=!1}function yt(t,e){if(this.a=_t,this.j=void 0,this.f=this.b=this.c=null,this.g=this.h=!1,t!=s)try{var n=this;t.call(e,function(t){At(n,gt,t)},function(t){if(!(t instanceof Lt))try{if(t instanceof Error)throw t;throw Error("Promise rejected.")}catch(t){}At(n,mt,t)})}catch(t){At(this,mt,t)}}var _t=0,gt=2,mt=3;function bt(){this.next=this.f=this.b=this.g=this.a=null,this.c=!1}bt.prototype.reset=function(){this.f=this.b=this.g=this.a=null,this.c=!1};var wt=new N(function(){return new bt},function(t){t.reset()});function Et(t,e,n){var r=wt.get();return r.g=t,r.b=e,r.f=n,r}function Ct(t){if(t instanceof yt)return t;var e=new yt(s);return At(e,gt,t),e}function Tt(t){return new yt(function(e,n){n(t)})}function St(t,e,n){Ot(t,e,n,null)||ft(m(e,t))}function It(t,e){t.b||t.a!=gt&&t.a!=mt||kt(t),t.f?t.f.next=e:t.b=e,t.f=e}function Nt(t,e,n,r){var i=Et(null,null,null);return i.a=new yt(function(t,o){i.g=e?function(n){try{var i=e.call(r,n);t(i)}catch(t){o(t)}}:t,i.b=n?function(e){try{var i=n.call(r,e);void 0===i&&e instanceof Lt?o(e):t(i)}catch(t){o(t)}}:o}),i.a.c=t,It(t,i),i.a}function At(t,e,n){t.a==_t&&(t===n&&(e=mt,n=new TypeError("Promise cannot resolve to itself")),t.a=1,Ot(n,t.Kc,t.Lc,t)||(t.j=n,t.a=e,t.c=null,kt(t),e!=mt||n instanceof Lt||function(t,e){t.g=!0,ft(function(){t.g&&xt.call(null,e)})}(t,n)))}function Ot(t,e,n,r){if(t instanceof yt)return It(t,Et(e||s,n||null,r)),!0;if(C(t))return t.then(e,n,r),!0;if(p(t))try{var i=t.then;if(f(i))return function(t,e,n,r,i){function o(t){a||(a=!0,r.call(i,t))}var a=!1;try{e.call(t,function(t){a||(a=!0,n.call(i,t))},o)}catch(t){o(t)}}(t,i,e,n,r),!0}catch(t){return n.call(r,t),!0}return!1}function kt(t){t.h||(t.h=!0,ft(t.Ub,t))}function Rt(t){var e=null;return t.b&&(e=t.b,t.b=e.next,e.next=null),t.b||(t.f=null),e}function Pt(t,e,n,r){if(n==mt&&e.b&&!e.c)for(;t&&t.g;t=t.c)t.g=!1;if(e.a)e.a.c=null,Dt(e,n,r);else try{e.c?e.g.call(e.f):Dt(e,n,r)}catch(t){xt.call(null,t)}A(wt,e)}function Dt(t,e,n){e==gt?t.g.call(t.f,n):t.b&&t.b.call(t.f,n)}yt.prototype.then=function(t,e,n){return Nt(this,f(t)?t:null,f(e)?e:null,n)},E(yt),(t=yt.prototype).ha=function(t,e){return(t=Et(t,t,e)).c=!0,It(this,t),this},t.m=function(t,e){return Nt(this,null,t,e)},t.cancel=function(t){this.a==_t&&ft(function(){!function t(e,n){if(e.a==_t)if(e.c){var r=e.c;if(r.b){for(var i=0,o=null,a=null,s=r.b;s&&(s.c||(i++,s.a==e&&(o=s),!(o&&1<i)));s=s.next)o||(a=s);o&&(r.a==_t&&1==i?t(r,n):(a?((i=a).next==r.f&&(r.f=i),i.next=i.next.next):Rt(r),Pt(r,o,mt,n)))}e.c=null}else At(e,mt,n)}(this,new Lt(t))},this)},t.Kc=function(t){this.a=_t,At(this,gt,t)},t.Lc=function(t){this.a=_t,At(this,mt,t)},t.Ub=function(){for(var t;t=Rt(this);)Pt(this,t,this.a,this.j);this.h=!1};var xt=ht;function Lt(t){T.call(this,t)}function Mt(){0!=Ft&&(Ut[this[d]||(this[d]=++v)]=this),this.pa=this.pa,this.oa=this.oa}w(Lt,T),Lt.prototype.name="cancel";var Ft=0,Ut={};function jt(t){if(!t.pa&&(t.pa=!0,t.ua(),0!=Ft)){var e=t[d]||(t[d]=++v);if(0!=Ft&&t.oa&&0<t.oa.length)throw Error(t+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete Ut[e]}}function Bt(t){return Bt[" "](t),t}Mt.prototype.pa=!1,Mt.prototype.ua=function(){if(this.oa)for(;this.oa.length;)this.oa.shift()()},Bt[" "]=s;var Wt,Vt,$t=rt("Opera"),qt=rt("Trident")||rt("MSIE"),Ht=rt("Edge"),Kt=Ht||qt,Gt=rt("Gecko")&&!(Z(H.toLowerCase(),"webkit")&&!rt("Edge"))&&!(rt("Trident")||rt("MSIE"))&&!rt("Edge"),Qt=Z(H.toLowerCase(),"webkit")&&!rt("Edge");function zt(){var t=i.document;return t?t.documentMode:void 0}t:{var Xt="",Yt=(Vt=H,Gt?/rv:([^\);]+)(\)|;)/.exec(Vt):Ht?/Edge\/([\d\.]+)/.exec(Vt):qt?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(Vt):Qt?/WebKit\/(\S+)/.exec(Vt):$t?/(?:Version)[ \/]?(\S+)/.exec(Vt):void 0);if(Yt&&(Xt=Yt?Yt[1]:""),qt){var Jt=zt();if(null!=Jt&&Jt>parseFloat(Xt)){Wt=String(Jt);break t}}Wt=Xt}var Zt,te={};function ee(t){return function(t,e){var n=te;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=e(t)}(t,function(){for(var e=0,n=$(String(Wt)).split("."),r=$(String(t)).split("."),i=Math.max(n.length,r.length),o=0;0==e&&o<i;o++){var a=n[o]||"",s=r[o]||"";do{if(a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==a[0].length&&0==s[0].length)break;e=tt(0==a[1].length?0:parseInt(a[1],10),0==s[1].length?0:parseInt(s[1],10))||tt(0==a[2].length,0==s[2].length)||tt(a[2],s[2]),a=a[3],s=s[3]}while(0==e)}return 0<=e})}var ne=i.document;Zt=ne&&qt?zt()||("CSS1Compat"==ne.compatMode?parseInt(Wt,10):5):void 0;var re=Object.freeze||function(t){return t},ie=!qt||9<=Number(Zt),oe=qt&&!ee("9"),ae=function(){if(!i.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});return i.addEventListener("test",s,e),i.removeEventListener("test",s,e),t}();function se(t,e){this.type=t,this.b=this.target=e,this.Eb=!0}function ue(t,e){if(se.call(this,t?t.type:""),this.relatedTarget=this.b=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.a=null,t){var n=this.type=t.type,r=t.changedTouches?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.b=e,e=t.relatedTarget){if(Gt){t:{try{Bt(e.nodeName);var i=!0;break t}catch(t){}i=!1}i||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,null===r?(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0):(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType=o(t.pointerType)?t.pointerType:ce[t.pointerType]||"",this.a=t,t.defaultPrevented&&this.preventDefault()}}se.prototype.preventDefault=function(){this.Eb=!1},w(ue,se);var ce=re({2:"touch",3:"pen",4:"mouse"});ue.prototype.preventDefault=function(){ue.lb.preventDefault.call(this);var t=this.a;if(t.preventDefault)t.preventDefault();else if(t.returnValue=!1,oe)try{(t.ctrlKey||112<=t.keyCode&&123>=t.keyCode)&&(t.keyCode=-1)}catch(t){}},ue.prototype.f=function(){return this.a};var le="closure_listenable_"+(1e6*Math.random()|0),he=0;function fe(t){t.ma=!0,t.listener=null,t.proxy=null,t.src=null,t.La=null}function pe(t){this.src=t,this.a={},this.b=0}function de(t,e){var n=e.type;n in t.a&&U(t.a[n],e)&&(fe(e),0==t.a[n].length&&(delete t.a[n],t.b--))}function ve(t,e,n,r){for(var i=0;i<t.length;++i){var o=t[i];if(!o.ma&&o.listener==e&&o.capture==!!n&&o.La==r)return i}return-1}pe.prototype.add=function(t,e,n,r,i){var o=t.toString();(t=this.a[o])||(t=this.a[o]=[],this.b++);var a=ve(t,e,r,i);return-1<a?(e=t[a],n||(e.Ha=!1)):((e=new function(t,e,n,r,i){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!r,this.La=i,this.key=++he,this.ma=this.Ha=!1}(e,this.src,o,!!r,i)).Ha=n,t.push(e)),e};var ye="closure_lm_"+(1e6*Math.random()|0),_e={};function ge(t,e,n,r,i){if(r&&r.once)be(t,e,n,r,i);else if(l(e))for(var o=0;o<e.length;o++)ge(t,e[o],n,r,i);else n=Oe(n),t&&t[le]?Re(t,e,n,p(r)?!!r.capture:!!r,i):me(t,e,n,!1,r,i)}function me(t,e,n,r,i,o){if(!e)throw Error("Invalid event type");var a=p(i)?!!i.capture:!!i,s=Ne(t);if(s||(t[ye]=s=new pe(t)),!(n=s.add(e,n,r,a,o)).proxy){if(r=function(){var t=Ie,e=ie?function(n){return t.call(e.src,e.listener,n)}:function(n){if(!(n=t.call(e.src,e.listener,n)))return n};return e}(),n.proxy=r,r.src=t,r.listener=n,t.addEventListener)ae||(i=a),void 0===i&&(i=!1),t.addEventListener(e.toString(),r,i);else if(t.attachEvent)t.attachEvent(Ce(e.toString()),r);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(r)}0}}function be(t,e,n,r,i){if(l(e))for(var o=0;o<e.length;o++)be(t,e[o],n,r,i);else n=Oe(n),t&&t[le]?Pe(t,e,n,p(r)?!!r.capture:!!r,i):me(t,e,n,!0,r,i)}function we(t,e,n,r,i){if(l(e))for(var o=0;o<e.length;o++)we(t,e[o],n,r,i);else r=p(r)?!!r.capture:!!r,n=Oe(n),t&&t[le]?(t=t.u,(e=String(e).toString())in t.a&&(-1<(n=ve(o=t.a[e],n,r,i))&&(fe(o[n]),Array.prototype.splice.call(o,n,1),0==o.length&&(delete t.a[e],t.b--)))):t&&(t=Ne(t))&&(e=t.a[e.toString()],t=-1,e&&(t=ve(e,n,r,i)),(n=-1<t?e[t]:null)&&Ee(n))}function Ee(t){if("number"!=typeof t&&t&&!t.ma){var e=t.src;if(e&&e[le])de(e.u,t);else{var n=t.type,r=t.proxy;e.removeEventListener?e.removeEventListener(n,r,t.capture):e.detachEvent?e.detachEvent(Ce(n),r):e.addListener&&e.removeListener&&e.removeListener(r),0,(n=Ne(e))?(de(n,t),0==n.b&&(n.src=null,e[ye]=null)):fe(t)}}}function Ce(t){return t in _e?_e[t]:_e[t]="on"+t}function Te(t,e,n,r){var i=!0;if((t=Ne(t))&&(e=t.a[e.toString()]))for(e=e.concat(),t=0;t<e.length;t++){var o=e[t];o&&o.capture==n&&!o.ma&&(o=Se(o,r),i=i&&!1!==o)}return i}function Se(t,e){var n=t.listener,r=t.La||t.src;return t.Ha&&Ee(t),n.call(r,e)}function Ie(t,e){if(t.ma)return!0;if(!ie){if(!e)t:{e=["window","event"];for(var n=i,r=0;r<e.length;r++)if(null==(n=n[e[r]])){e=null;break t}e=n}if(e=new ue(r=e,this),n=!0,!(0>r.keyCode||void 0!=r.returnValue)){t:{var o=!1;if(0==r.keyCode)try{r.keyCode=-1;break t}catch(t){o=!0}(o||void 0==r.returnValue)&&(r.returnValue=!0)}for(r=[],o=e.b;o;o=o.parentNode)r.push(o);for(t=t.type,o=r.length-1;0<=o;o--){e.b=r[o];var a=Te(r[o],t,!0,e);n=n&&a}for(o=0;o<r.length;o++)e.b=r[o],a=Te(r[o],t,!1,e),n=n&&a}return n}return Se(t,new ue(e,this))}function Ne(t){return(t=t[ye])instanceof pe?t:null}var Ae="__closure_events_fn_"+(1e9*Math.random()>>>0);function Oe(t){return f(t)?t:(t[Ae]||(t[Ae]=function(e){return t.handleEvent(e)}),t[Ae])}function ke(){Mt.call(this),this.u=new pe(this),this.Mb=this,this.Ta=null}function Re(t,e,n,r,i){t.u.add(String(e),n,!1,r,i)}function Pe(t,e,n,r,i){t.u.add(String(e),n,!0,r,i)}function De(t,e,n,r){if(!(e=t.u.a[String(e)]))return!0;e=e.concat();for(var i=!0,o=0;o<e.length;++o){var a=e[o];if(a&&!a.ma&&a.capture==n){var s=a.listener,u=a.La||a.src;a.Ha&&de(t.u,a),i=!1!==s.call(u,r)&&i}}return i&&0!=r.Eb}function xe(t,e,n){if(f(t))n&&(t=g(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=g(t.handleEvent,t)}return 2147483647<Number(e)?-1:i.setTimeout(t,e||0)}function Le(t){var e=null;return new yt(function(n,r){-1==(e=xe(function(){n(void 0)},t))&&r(Error("Failed to schedule timer."))}).m(function(t){throw i.clearTimeout(e),t})}function Me(t){if(t.S&&"function"==typeof t.S)return t.S();if(o(t))return t.split("");if(h(t)){for(var e=[],n=t.length,r=0;r<n;r++)e.push(t[r]);return e}for(r in e=[],n=0,t)e[n++]=t[r];return e}function Fe(t){if(t.U&&"function"==typeof t.U)return t.U();if(!t.S||"function"!=typeof t.S){if(h(t)||o(t)){var e=[];t=t.length;for(var n=0;n<t;n++)e.push(n);return e}for(var r in e=[],n=0,t)e[n++]=r;return e}}function Ue(t,e){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(t)if(t instanceof Ue)for(n=t.U(),r=0;r<n.length;r++)this.set(n[r],t.get(n[r]));else for(r in t)this.set(r,t[r])}function je(t){if(t.c!=t.a.length){for(var e=0,n=0;e<t.a.length;){var r=t.a[e];Be(t.b,r)&&(t.a[n++]=r),e++}t.a.length=n}if(t.c!=t.a.length){var i={};for(n=e=0;e<t.a.length;)Be(i,r=t.a[e])||(t.a[n++]=r,i[r]=1),e++;t.a.length=n}}function Be(t,e){return Object.prototype.hasOwnProperty.call(t,e)}w(ke,Mt),ke.prototype[le]=!0,ke.prototype.addEventListener=function(t,e,n,r){ge(this,t,e,n,r)},ke.prototype.removeEventListener=function(t,e,n,r){we(this,t,e,n,r)},ke.prototype.dispatchEvent=function(t){var e,n=this.Ta;if(n)for(e=[];n;n=n.Ta)e.push(n);n=this.Mb;var r=t.type||t;if(o(t))t=new se(t,n);else if(t instanceof se)t.target=t.target||n;else{var i=t;lt(t=new se(r,n),i)}if(i=!0,e)for(var a=e.length-1;0<=a;a--){var s=t.b=e[a];i=De(s,r,!0,t)&&i}if(i=De(s=t.b=n,r,!0,t)&&i,i=De(s,r,!1,t)&&i,e)for(a=0;a<e.length;a++)i=De(s=t.b=e[a],r,!1,t)&&i;return i},ke.prototype.ua=function(){if(ke.lb.ua.call(this),this.u){var t,e=this.u;for(t in e.a){for(var n=e.a[t],r=0;r<n.length;r++)0,fe(n[r]);delete e.a[t],e.b--}}this.Ta=null},(t=Ue.prototype).S=function(){je(this);for(var t=[],e=0;e<this.a.length;e++)t.push(this.b[this.a[e]]);return t},t.U=function(){return je(this),this.a.concat()},t.clear=function(){this.b={},this.c=this.a.length=0},t.get=function(t,e){return Be(this.b,t)?this.b[t]:e},t.set=function(t,e){Be(this.b,t)||(this.c++,this.a.push(t)),this.b[t]=e},t.forEach=function(t,e){for(var n=this.U(),r=0;r<n.length;r++){var i=n[r],o=this.get(i);t.call(e,o,i,this)}};var We=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Ve(t,e){if(this.b=this.l=this.c="",this.j=null,this.h=this.g="",this.f=!1,t instanceof Ve){this.f=void 0!==e?e:t.f,$e(this,t.c),this.l=t.l,this.b=t.b,qe(this,t.j),this.g=t.g,e=t.a;var n=new on;n.c=e.c,e.a&&(n.a=new Ue(e.a),n.b=e.b),He(this,n),this.h=t.h}else t&&(n=String(t).match(We))?(this.f=!!e,$e(this,n[1]||"",!0),this.l=Xe(n[2]||""),this.b=Xe(n[3]||"",!0),qe(this,n[4]),this.g=Xe(n[5]||"",!0),He(this,n[6]||"",!0),this.h=Xe(n[7]||"")):(this.f=!!e,this.a=new on(null,this.f))}function $e(t,e,n){t.c=n?Xe(e,!0):e,t.c&&(t.c=t.c.replace(/:$/,""))}function qe(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.j=e}else t.j=null}function He(t,e,n){e instanceof on?(t.a=e,function(t,e){e&&!t.f&&(an(t),t.c=null,t.a.forEach(function(t,e){var n=e.toLowerCase();e!=n&&(un(this,e),ln(this,n,t))},t)),t.f=e}(t.a,t.f)):(n||(e=Ye(e,nn)),t.a=new on(e,t.f))}function Ke(t,e,n){t.a.set(e,n)}function Ge(t,e){return t.a.get(e)}function Qe(t){return t instanceof Ve?new Ve(t):new Ve(t,void 0)}function ze(t,e){var n=new Ve(null,void 0);return $e(n,"https"),t&&(n.b=t),e&&(n.g=e),n}function Xe(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function Ye(t,e,n){return o(t)?(t=encodeURI(t).replace(e,Je),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function Je(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}Ve.prototype.toString=function(){var t=[],e=this.c;e&&t.push(Ye(e,Ze,!0),":");var n=this.b;return(n||"file"==e)&&(t.push("//"),(e=this.l)&&t.push(Ye(e,Ze,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.j)&&t.push(":",String(n))),(n=this.g)&&(this.b&&"/"!=n.charAt(0)&&t.push("/"),t.push(Ye(n,"/"==n.charAt(0)?en:tn,!0))),(n=this.a.toString())&&t.push("?",n),(n=this.h)&&t.push("#",Ye(n,rn)),t.join("")};var Ze=/[#\/\?@]/g,tn=/[#\?:]/g,en=/[#\?]/g,nn=/[#\?@]/g,rn=/#/g;function on(t,e){this.b=this.a=null,this.c=t||null,this.f=!!e}function an(t){t.a||(t.a=new Ue,t.b=0,t.c&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var r=t[n].indexOf("="),i=null;if(0<=r){var o=t[n].substring(0,r);i=t[n].substring(r+1)}else o=t[n];e(o,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(t.c,function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)}))}function sn(t){var e=Fe(t);if(void 0===e)throw Error("Keys are undefined");var n=new on(null,void 0);t=Me(t);for(var r=0;r<e.length;r++){var i=e[r],o=t[r];l(o)?ln(n,i,o):n.add(i,o)}return n}function un(t,e){an(t),e=hn(t,e),Be(t.a.b,e)&&(t.c=null,t.b-=t.a.get(e).length,Be((t=t.a).b,e)&&(delete t.b[e],t.c--,t.a.length>2*t.c&&je(t)))}function cn(t,e){return an(t),e=hn(t,e),Be(t.a.b,e)}function ln(t,e,n){un(t,e),0<n.length&&(t.c=null,t.a.set(hn(t,e),W(n)),t.b+=n.length)}function hn(t,e){return e=String(e),t.f&&(e=e.toLowerCase()),e}(t=on.prototype).add=function(t,e){an(this),this.c=null,t=hn(this,t);var n=this.a.get(t);return n||this.a.set(t,n=[]),n.push(e),this.b+=1,this},t.clear=function(){this.a=this.c=null,this.b=0},t.forEach=function(t,e){an(this),this.a.forEach(function(n,r){x(n,function(n){t.call(e,n,r,this)},this)},this)},t.U=function(){an(this);for(var t=this.a.S(),e=this.a.U(),n=[],r=0;r<e.length;r++)for(var i=t[r],o=0;o<i.length;o++)n.push(e[r]);return n},t.S=function(t){an(this);var e=[];if(o(t))cn(this,t)&&(e=B(e,this.a.get(hn(this,t))));else{t=this.a.S();for(var n=0;n<t.length;n++)e=B(e,t[n])}return e},t.set=function(t,e){return an(this),this.c=null,cn(this,t=hn(this,t))&&(this.b-=this.a.get(t).length),this.a.set(t,[e]),this.b+=1,this},t.get=function(t,e){return 0<(t=t?this.S(t):[]).length?String(t[0]):e},t.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var t=[],e=this.a.U(),n=0;n<e.length;n++){var r=e[n],i=encodeURIComponent(String(r));r=this.S(r);for(var o=0;o<r.length;o++){var a=i;""!==r[o]&&(a+="="+encodeURIComponent(String(r[o]))),t.push(a)}}return this.c=t.join("&")};var fn=!qt||9<=Number(Zt);function pn(){this.a="",this.b=vn}function dn(t){return t instanceof pn&&t.constructor===pn&&t.b===vn?t.a:(I("expected object of type Const, got '"+t+"'"),"type_error:Const")}pn.prototype.la=!0,pn.prototype.ja=function(){return this.a},pn.prototype.toString=function(){return"Const{"+this.a+"}"};var vn={};function yn(t){var e=new pn;return e.a=t,e}function _n(){this.a="",this.b=En}function gn(t){return t instanceof _n&&t.constructor===_n&&t.b===En?t.a:(I("expected object of type TrustedResourceUrl, got '"+t+"' of type "+u(t)),"type_error:TrustedResourceUrl")}function mn(t,e){var n=dn(t);if(!wn.test(n))throw Error("Invalid TrustedResourceUrl format: "+n);return function(t){var e=new _n;return e.a=t,e}(t=n.replace(bn,function(t,r){if(!Object.prototype.hasOwnProperty.call(e,r))throw Error('Found marker, "'+r+'", in format string, "'+n+'", but no valid label mapping found in args: '+JSON.stringify(e));return(t=e[r])instanceof pn?dn(t):encodeURIComponent(String(t))}))}yn(""),_n.prototype.la=!0,_n.prototype.ja=function(){return this.a},_n.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};var bn=/%{(\w+)}/g,wn=/^(?:https:)?\/\/[0-9a-z.:[\]-]+\/|^\/[^\/\\]|^about:blank#/i,En={};function Cn(){this.a="",this.b=Nn}function Tn(t){return t instanceof Cn&&t.constructor===Cn&&t.b===Nn?t.a:(I("expected object of type SafeUrl, got '"+t+"' of type "+u(t)),"type_error:SafeUrl")}Cn.prototype.la=!0,Cn.prototype.ja=function(){return this.a},Cn.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};var Sn=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;function In(t){return t instanceof Cn?t:(t=t.la?t.ja():String(t),Sn.test(t)||(t="about:invalid#zClosurez"),An(t))}var Nn={};function An(t){var e=new Cn;return e.a=t,e}function On(){this.a="",this.b=kn}An("about:blank"),On.prototype.la=!0,On.prototype.ja=function(){return this.a},On.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};var kn={};function Rn(t){var e=new On;return e.a=t,e}function Pn(t){var e=document;return o(t)?e.getElementById(t):t}function Dn(t,e){it(e,function(e,n){e&&e.la&&(e=e.ja()),"style"==n?t.style.cssText=e:"class"==n?t.className=e:"for"==n?t.htmlFor=e:xn.hasOwnProperty(n)?t.setAttribute(xn[n],e):0==n.lastIndexOf("aria-",0)||0==n.lastIndexOf("data-",0)?t.setAttribute(n,e):t[n]=e})}Rn("<!DOCTYPE html>"),Rn(""),Rn("<br>");var xn={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};function Ln(t,e,n){var r=arguments,i=document,a=String(r[0]),s=r[1];if(!fn&&s&&(s.name||s.type)){if(a=["<",a],s.name&&a.push(' name="',q(s.name),'"'),s.type){a.push(' type="',q(s.type),'"');var u={};lt(u,s),delete u.type,s=u}a.push(">"),a=a.join("")}return a=i.createElement(a),s&&(o(s)?a.className=s:l(s)?a.className=s.join(" "):Dn(a,s)),2<r.length&&function(t,e,n){function r(n){n&&e.appendChild(o(n)?t.createTextNode(n):n)}for(var i=2;i<n.length;i++){var a=n[i];!h(a)||p(a)&&0<a.nodeType?r(a):x(Mn(a)?W(a):a,r)}}(i,a,r),a}function Mn(t){if(t&&"number"==typeof t.length){if(p(t))return"function"==typeof t.item||"string"==typeof t.item;if(f(t))return"function"==typeof t.item}return!1}function Fn(t){var e=[];return function t(e,n,r){if(null==n)r.push("null");else{if("object"==typeof n){if(l(n)){var i=n;n=i.length,r.push("[");for(var o="",a=0;a<n;a++)r.push(o),t(e,i[a],r),o=",";return void r.push("]")}if(!(n instanceof String||n instanceof Number||n instanceof Boolean)){for(i in r.push("{"),o="",n)Object.prototype.hasOwnProperty.call(n,i)&&("function"!=typeof(a=n[i])&&(r.push(o),Bn(i,r),r.push(":"),t(e,a,r),o=","));return void r.push("}")}n=n.valueOf()}switch(typeof n){case"string":Bn(n,r);break;case"number":r.push(isFinite(n)&&!isNaN(n)?String(n):"null");break;case"boolean":r.push(String(n));break;case"function":r.push("null");break;default:throw Error("Unknown type: "+typeof n)}}}(new function(){},t,e),e.join("")}var Un={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},jn=/\uffff/.test("￿")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;function Bn(t,e){e.push('"',t.replace(jn,function(t){var e=Un[t];return e||(e="\\u"+(65536|t.charCodeAt(0)).toString(16).substr(1),Un[t]=e),e}),'"')}function Wn(){var t=or();return qt&&!!Zt&&11==Zt||/Edge\/\d+/.test(t)}function Vn(){return i.window&&i.window.location.href||self&&self.location&&self.location.href||""}function $n(t,e){e=e||i.window;var n="about:blank";t&&(n=Tn(In(t))),e.location.href=n}function qn(t){return!!((t=(t||or()).toLowerCase()).match(/android/)||t.match(/webos/)||t.match(/iphone|ipad|ipod/)||t.match(/blackberry/)||t.match(/windows phone/)||t.match(/iemobile/))}function Hn(t){t=t||i.window;try{t.close()}catch(t){}}function Kn(t,e,n){var r=Math.floor(1e9*Math.random()).toString();e=e||500,n=n||600;var i=(window.screen.availHeight-n)/2,o=(window.screen.availWidth-e)/2;for(a in e={width:e,height:n,top:0<i?i:0,left:0<o?o:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1},n=or().toLowerCase(),r&&(e.target=r,Z(n,"crios/")&&(e.target="_blank")),nr(or())==tr&&(t=t||"http://localhost",e.scrollbars=!0),n=t||"",(t=e)||(t={}),r=window,e=n instanceof Cn?n:In(void 0!==n.href?n.href:String(n)),n=t.target||n.target,i=[],t)switch(a){case"width":case"height":case"top":case"left":i.push(a+"="+t[a]);break;case"target":case"noopener":case"noreferrer":break;default:i.push(a+"="+(t[a]?1:0))}var a=i.join(",");if((rt("iPhone")&&!rt("iPod")&&!rt("iPad")||rt("iPad")||rt("iPod"))&&r.navigator&&r.navigator.standalone&&n&&"_self"!=n?(a=r.document.createElement("A"),e instanceof Cn||e instanceof Cn||(e=e.la?e.ja():String(e),Sn.test(e)||(e="about:invalid#zClosurez"),e=An(e)),a.href=Tn(e),a.setAttribute("target",n),t.noreferrer&&a.setAttribute("rel","noreferrer"),(t=document.createEvent("MouseEvent")).initMouseEvent("click",!0,!0,r,1),a.dispatchEvent(t),a={}):t.noreferrer?(a=r.open("",n,a),t=Tn(e),a&&(Kt&&Z(t,";")&&(t="'"+t.replace(/'/g,"%27")+"'"),a.opener=null,yn("b/12014412, meta tag with sanitized URL"),t=Rn(t='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+q(t)+'">'),a.document.write(function(t){return t instanceof On&&t.constructor===On&&t.b===kn?t.a:(I("expected object of type SafeHtml, got '"+t+"' of type "+u(t)),"type_error:SafeHtml")}(t)),a.document.close())):(a=r.open(Tn(e),n,a))&&t.noopener&&(a.opener=null),a)try{a.focus()}catch(t){}return a}var Gn=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;function Qn(){var t=null;return new yt(function(e){"complete"==i.document.readyState?e():(t=function(){e()},be(window,"load",t))}).m(function(e){throw we(window,"load",t),e})}function zn(t){return t=t||or(),!("file:"!==lr()||!t.toLowerCase().match(/iphone|ipad|ipod|android/))}function Xn(){var t=i.window;try{return!(!t||t==t.top)}catch(t){return!1}}function Yn(){return"object"!=typeof i.window&&"function"==typeof i.importScripts}function Jn(){return e.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":e.INTERNAL.hasOwnProperty("node")?"Node":Yn()?"Worker":"Browser"}function Zn(){var t=Jn();return"ReactNative"===t||"Node"===t}var tr="Firefox",er="Chrome";function nr(t){var e=t.toLowerCase();return Z(e,"opera/")||Z(e,"opr/")||Z(e,"opios/")?"Opera":Z(e,"iemobile")?"IEMobile":Z(e,"msie")||Z(e,"trident/")?"IE":Z(e,"edge/")?"Edge":Z(e,"firefox/")?tr:Z(e,"silk/")?"Silk":Z(e,"blackberry")?"Blackberry":Z(e,"webos")?"Webos":!Z(e,"safari/")||Z(e,"chrome/")||Z(e,"crios/")||Z(e,"android")?!Z(e,"chrome/")&&!Z(e,"crios/")||Z(e,"edge/")?Z(e,"android")?"Android":(t=t.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&2==t.length?t[1]:"Other":er:"Safari"}var rr={Qc:"FirebaseCore-web",Sc:"FirebaseUI-web"};function ir(t,e){e=e||[];var n,r=[],i={};for(n in rr)i[rr[n]]=!0;for(n=0;n<e.length;n++)void 0!==i[e[n]]&&(delete i[e[n]],r.push(e[n]));return r.sort(),(e=r).length||(e=["FirebaseCore-web"]),"Browser"===(r=Jn())?r=nr(i=or()):"Worker"===r&&(r=nr(i=or())+"-"+r),r+"/JsCore/"+t+"/"+e.join(",")}function or(){return i.navigator&&i.navigator.userAgent||""}function ar(t,e){t=t.split("."),e=e||i;for(var n=0;n<t.length&&"object"==typeof e&&null!=e;n++)e=e[t[n]];return n!=t.length&&(e=void 0),e}function sr(){try{var t=i.localStorage,e=vr();if(t)return t.setItem(e,"1"),t.removeItem(e),!Wn()||!!i.indexedDB}catch(t){return Yn()&&!!i.indexedDB}return!1}function ur(){return(cr()||"chrome-extension:"===lr()||zn())&&!Zn()&&sr()&&!Yn()}function cr(){return"http:"===lr()||"https:"===lr()}function lr(){return i.location&&i.location.protocol||null}function hr(t){return!qn(t=t||or())&&nr(t)!=tr}function fr(t){return void 0===t?null:Fn(t)}function pr(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&null!==t[e]&&void 0!==t[e]&&(n[e]=t[e]);return n}function dr(t){if(null!==t)return JSON.parse(t)}function vr(t){return t||Math.floor(1e9*Math.random()).toString()}function yr(t){return"Safari"!=nr(t=t||or())&&!t.toLowerCase().match(/iphone|ipad|ipod/)}function _r(){var t=i.___jsl;if(t&&t.H)for(var e in t.H)if(t.H[e].r=t.H[e].r||[],t.H[e].L=t.H[e].L||[],t.H[e].r=t.H[e].L.concat(),t.CP)for(var n=0;n<t.CP.length;n++)t.CP[n]=null}function gr(t,e){if(t>e)throw Error("Short delay should be less than long delay!");this.a=t,this.c=e,t=or(),e=Jn(),this.b=qn(t)||"ReactNative"===e}function mr(){var t=i.document;return!t||void 0===t.visibilityState||"visible"==t.visibilityState}function br(t){try{var e=new Date(parseInt(t,10));if(!isNaN(e.getTime())&&!/[^0-9]/.test(t))return e.toUTCString()}catch(t){}return null}function wr(){return!(!ar("fireauth.oauthhelper",i)&&!ar("fireauth.iframe",i))}gr.prototype.get=function(){var t=i.navigator;return!t||"boolean"!=typeof t.onLine||!cr()&&"chrome-extension:"!==lr()&&void 0===t.connection||t.onLine?this.b?this.c:this.a:Math.min(5e3,this.a)};var Er,Cr={};try{var Tr={};Object.defineProperty(Tr,"abcd",{configurable:!0,enumerable:!0,value:1}),Object.defineProperty(Tr,"abcd",{configurable:!0,enumerable:!0,value:2}),Er=2==Tr.abcd}catch(Vt){Er=!1}function Sr(t,e,n){Er?Object.defineProperty(t,e,{configurable:!0,enumerable:!0,value:n}):t[e]=n}function Ir(t,e){if(e)for(var n in e)e.hasOwnProperty(n)&&Sr(t,n,e[n])}function Nr(t){var e={};return Ir(e,t),e}function Ar(t){var e=t;if("object"==typeof t&&null!=t)for(var n in e="length"in t?[]:{},t)Sr(e,n,Ar(t[n]));return e}var Or="EMAIL_SIGNIN",kr="email",Rr="newEmail",Pr="requestType",Dr="email",xr="fromEmail",Lr="data",Mr="operation";function Fr(t,e){this.code=jr+t,this.message=e||Br[t]||""}function Ur(t){var e=t&&t.code;return e?new Fr(e.substring(jr.length),t.message):null}w(Fr,Error),Fr.prototype.C=function(){return{code:this.code,message:this.message}},Fr.prototype.toJSON=function(){return this.C()};var jr="auth/",Br={"argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","user-cancelled":"User did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."};function Wr(t){var e=t[Hr];if(void 0===e)throw new Fr("missing-continue-uri");if("string"!=typeof e||"string"==typeof e&&!e.length)throw new Fr("invalid-continue-uri");this.h=e,this.b=this.a=null,this.g=!1;var n=t[Vr];if(n&&"object"==typeof n){e=n[Qr];var r=n[Kr];if(n=n[Gr],"string"==typeof e&&e.length){if(this.a=e,void 0!==r&&"boolean"!=typeof r)throw new Fr("argument-error",Kr+" property must be a boolean when specified.");if(this.g=!!r,void 0!==n&&("string"!=typeof n||"string"==typeof n&&!n.length))throw new Fr("argument-error",Gr+" property must be a non empty string when specified.");this.b=n||null}else{if(void 0!==e)throw new Fr("argument-error",Qr+" property must be a non empty string when specified.");if(void 0!==r||void 0!==n)throw new Fr("missing-android-pkg-name")}}else if(void 0!==n)throw new Fr("argument-error",Vr+" property must be a non null object when specified.");if(this.f=null,(e=t[qr])&&"object"==typeof e){if("string"==typeof(e=e[zr])&&e.length)this.f=e;else if(void 0!==e)throw new Fr("argument-error",zr+" property must be a non empty string when specified.")}else if(void 0!==e)throw new Fr("argument-error",qr+" property must be a non null object when specified.");if(void 0!==(t=t[$r])&&"boolean"!=typeof t)throw new Fr("argument-error",$r+" property must be a boolean when specified.");this.c=!!t}var Vr="android",$r="handleCodeInApp",qr="iOS",Hr="url",Kr="installApp",Gr="minimumVersion",Qr="packageName",zr="bundleId";function Xr(t){var e={};for(var n in e.continueUrl=t.h,e.canHandleCodeInApp=t.c,(e.androidPackageName=t.a)&&(e.androidMinimumVersion=t.b,e.androidInstallApp=t.g),e.iOSBundleId=t.f,e)null===e[n]&&delete e[n];return e}var Yr=null,Jr=null;function Zr(t){var e="";return function(t,e){function n(e){for(;r<t.length;){var n=t.charAt(r++),i=Jr[n];if(null!=i)return i;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return e}!function(){if(!Yr){Yr={},Jr={};for(var t=0;65>t;t++)Yr[t]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(t),Jr[Yr[t]]=t,62<=t&&(Jr["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(t)]=t)}}();for(var r=0;;){var i=n(-1),o=n(0),a=n(64),s=n(64);if(64===s&&-1===i)break;e(i<<2|o>>4),64!=a&&(e(o<<4&240|a>>2),64!=s&&e(a<<6&192|s))}}(t,function(t){e+=String.fromCharCode(t)}),e}function ti(t){this.c=t.sub,b(),this.a=t.provider_id||t.firebase&&t.firebase.sign_in_provider||null,this.b=!!t.is_anonymous||"anonymous"==this.a}function ei(t){return(t=ni(t))&&t.sub&&t.iss&&t.aud&&t.exp?new ti(t):null}function ni(t){if(!t)return null;if(3!=(t=t.split(".")).length)return null;for(var e=(4-(t=t[1]).length%4)%4,n=0;n<e;n++)t+=".";try{return JSON.parse(Zr(t))}catch(t){}return null}ti.prototype.f=function(){return this.b};var ri="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),ii=["client_id","response_type","scope","redirect_uri","state"],oi={Rc:{Ma:"locale",Aa:500,za:600,Na:"facebook.com",cb:ii},Tc:{Ma:null,Aa:500,za:620,Na:"github.com",cb:ii},Uc:{Ma:"hl",Aa:515,za:680,Na:"google.com",cb:ii},$c:{Ma:"lang",Aa:485,za:705,Na:"twitter.com",cb:ri}};function ai(t){for(var e in oi)if(oi[e].Na==t)return oi[e];return null}function si(t){var e={};e["facebook.com"]=fi,e["google.com"]=di,e["github.com"]=pi,e["twitter.com"]=vi;var n=t&&t[ci];try{if(n)return e[n]?new e[n](t):new hi(t);if(void 0!==t[ui])return new li(t)}catch(t){}return null}var ui="idToken",ci="providerId";function li(t){var e=t[ci];if(!e&&t[ui]){var n=ei(t[ui]);n&&n.a&&(e=n.a)}if(!e)throw Error("Invalid additional user info!");"anonymous"!=e&&"custom"!=e||(e=null),n=!1,void 0!==t.isNewUser?n=!!t.isNewUser:"identitytoolkit#SignupNewUserResponse"===t.kind&&(n=!0),Sr(this,"providerId",e),Sr(this,"isNewUser",n)}function hi(t){li.call(this,t),Sr(this,"profile",Ar((t=dr(t.rawUserInfo||"{}"))||{}))}function fi(t){if(hi.call(this,t),"facebook.com"!=this.providerId)throw Error("Invalid provider ID!")}function pi(t){if(hi.call(this,t),"github.com"!=this.providerId)throw Error("Invalid provider ID!");Sr(this,"username",this.profile&&this.profile.login||null)}function di(t){if(hi.call(this,t),"google.com"!=this.providerId)throw Error("Invalid provider ID!")}function vi(t){if(hi.call(this,t),"twitter.com"!=this.providerId)throw Error("Invalid provider ID!");Sr(this,"username",t.screenName||null)}function yi(t){var e=Qe(t),n=Ge(e,"link"),r=Ge(Qe(n),"link");return Ge(Qe(e=Ge(e,"deep_link_id")),"link")||e||r||n||t}function _i(t,e){return t.then(function(t){if(t[Yo]){var n=ei(t[Yo]);if(!n||e!=n.c)throw new Fr("user-mismatch");return t}throw new Fr("user-mismatch")}).m(function(t){throw t&&t.code&&t.code==jr+"user-not-found"?new Fr("user-mismatch"):t})}function gi(t,e,n){if(e.idToken||e.accessToken)e.idToken&&Sr(this,"idToken",e.idToken),e.accessToken&&Sr(this,"accessToken",e.accessToken);else{if(!e.oauthToken||!e.oauthTokenSecret)throw new Fr("internal-error","failed to construct a credential");Sr(this,"accessToken",e.oauthToken),Sr(this,"secret",e.oauthTokenSecret)}Sr(this,"providerId",t),Sr(this,"signInMethod",n)}function mi(t){var e={};return t.idToken&&(e.id_token=t.idToken),t.accessToken&&(e.access_token=t.accessToken),t.secret&&(e.oauth_token_secret=t.secret),e.providerId=t.providerId,{postBody:sn(e).toString(),requestUri:"http://localhost"}}function bi(t,e){this.Ac=e||[],Ir(this,{providerId:t,isOAuthProvider:!0}),this.tb={},this.Za=(ai(t)||{}).Ma||null,this.Xa=null}function wi(t){bi.call(this,t,ii),this.a=[]}function Ei(){wi.call(this,"facebook.com")}function Ci(t){if(!t)throw new Fr("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return p(t)&&(e=t.accessToken),(new Ei).credential(null,e)}function Ti(){wi.call(this,"github.com")}function Si(t){if(!t)throw new Fr("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return p(t)&&(e=t.accessToken),(new Ti).credential(null,e)}function Ii(){wi.call(this,"google.com"),this.ta("profile")}function Ni(t,e){var n=t;return p(t)&&(n=t.idToken,e=t.accessToken),(new Ii).credential(n,e)}function Ai(){bi.call(this,"twitter.com",ri)}function Oi(t,e){var n=t;if(p(n)||(n={oauthToken:t,oauthTokenSecret:e}),!n.oauthToken||!n.oauthTokenSecret)throw new Fr("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new gi("twitter.com",n,"twitter.com")}function ki(t,e,n){this.a=t,this.b=e,Sr(this,"providerId","password"),Sr(this,"signInMethod",n===Ri.EMAIL_LINK_SIGN_IN_METHOD?Ri.EMAIL_LINK_SIGN_IN_METHOD:Ri.EMAIL_PASSWORD_SIGN_IN_METHOD)}function Ri(){Ir(this,{providerId:"password",isOAuthProvider:!1})}function Pi(t,e){if(!(e=Di(e)))throw new Fr("argument-error","Invalid email link!");return new ki(t,e,Ri.EMAIL_LINK_SIGN_IN_METHOD)}function Di(t){var e=Ge((t=new function(t){this.a=Qe(t)}(t=yi(t))).a,"oobCode")||null;return"signIn"===(Ge(t.a,"mode")||null)&&e?e:null}function xi(t){if(!(t.Ra&&t.Qa||t.Ea&&t.Z))throw new Fr("internal-error");this.a=t,Sr(this,"providerId","phone"),Sr(this,"signInMethod","phone")}function Li(t){return t.a.Ea&&t.a.Z?{temporaryProof:t.a.Ea,phoneNumber:t.a.Z}:{sessionInfo:t.a.Ra,code:t.a.Qa}}function Mi(t){try{this.a=t||e.auth()}catch(t){throw new Fr("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().")}Ir(this,{providerId:"phone",isOAuthProvider:!1})}function Fi(t,e){if(!t)throw new Fr("missing-verification-id");if(!e)throw new Fr("missing-verification-code");return new xi({Ra:t,Qa:e})}function Ui(t){if(t.temporaryProof&&t.phoneNumber)return new xi({Ea:t.temporaryProof,Z:t.phoneNumber});var e=t&&t.providerId;if(!e||"password"===e)return null;var n=t&&t.oauthAccessToken,r=t&&t.oauthTokenSecret;t=t&&t.oauthIdToken;try{switch(e){case"google.com":return Ni(t,n);case"facebook.com":return Ci(n);case"github.com":return Si(n);case"twitter.com":return Oi(n,r);default:return new wi(e).credential(t,n)}}catch(t){return null}}function ji(t){if(!t.isOAuthProvider)throw new Fr("invalid-oauth-provider")}function Bi(t,e,n,r,i){if(this.b=t,this.c=e||null,this.f=n||null,this.g=r||null,this.a=i||null,!this.f&&!this.a)throw new Fr("invalid-auth-event");if(this.f&&this.a)throw new Fr("invalid-auth-event");if(this.f&&!this.g)throw new Fr("invalid-auth-event")}function Wi(t){return(t=t||{}).type?new Bi(t.type,t.eventId,t.urlResponse,t.sessionId,t.error&&Ur(t.error)):null}function Vi(){this.b=null,this.a=[]}w(hi,li),w(fi,hi),w(pi,hi),w(di,hi),w(vi,hi),gi.prototype.xa=function(t){return da(t,mi(this))},gi.prototype.c=function(t,e){var n=mi(this);return n.idToken=e,va(t,n)},gi.prototype.f=function(t,e){return _i(ya(t,mi(this)),e)},gi.prototype.C=function(){var t={providerId:this.providerId,signInMethod:this.signInMethod};return this.idToken&&(t.oauthIdToken=this.idToken),this.accessToken&&(t.oauthAccessToken=this.accessToken),this.secret&&(t.oauthTokenSecret=this.secret),t},bi.prototype.Ca=function(t){return this.tb=at(t),this},w(wi,bi),wi.prototype.ta=function(t){return F(this.a,t)||this.a.push(t),this},wi.prototype.yb=function(){return W(this.a)},wi.prototype.credential=function(t,e){if(!t&&!e)throw new Fr("argument-error","credential failed: must provide the ID token and/or the access token.");return new gi(this.providerId,{idToken:t||null,accessToken:e||null},this.providerId)},w(Ei,wi),Sr(Ei,"PROVIDER_ID","facebook.com"),Sr(Ei,"FACEBOOK_SIGN_IN_METHOD","facebook.com"),w(Ti,wi),Sr(Ti,"PROVIDER_ID","github.com"),Sr(Ti,"GITHUB_SIGN_IN_METHOD","github.com"),w(Ii,wi),Sr(Ii,"PROVIDER_ID","google.com"),Sr(Ii,"GOOGLE_SIGN_IN_METHOD","google.com"),w(Ai,bi),Sr(Ai,"PROVIDER_ID","twitter.com"),Sr(Ai,"TWITTER_SIGN_IN_METHOD","twitter.com"),ki.prototype.xa=function(t){return this.signInMethod==Ri.EMAIL_LINK_SIGN_IN_METHOD?Ha(t,Ta,{email:this.a,oobCode:this.b}):Ha(t,Wa,{email:this.a,password:this.b})},ki.prototype.c=function(t,e){return this.signInMethod==Ri.EMAIL_LINK_SIGN_IN_METHOD?Ha(t,Sa,{idToken:e,email:this.a,oobCode:this.b}):Ha(t,La,{idToken:e,email:this.a,password:this.b})},ki.prototype.f=function(t,e){return _i(this.xa(t),e)},ki.prototype.C=function(){return{email:this.a,password:this.b,signInMethod:this.signInMethod}},Ir(Ri,{PROVIDER_ID:"password"}),Ir(Ri,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"}),Ir(Ri,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"}),xi.prototype.xa=function(t){return t.Sa(Li(this))},xi.prototype.c=function(t,e){var n=Li(this);return n.idToken=e,Ha(t,$a,n)},xi.prototype.f=function(t,e){var n=Li(this);return n.operation="REAUTH",_i(t=Ha(t,qa,n),e)},xi.prototype.C=function(){var t={providerId:"phone"};return this.a.Ra&&(t.verificationId=this.a.Ra),this.a.Qa&&(t.verificationCode=this.a.Qa),this.a.Ea&&(t.temporaryProof=this.a.Ea),this.a.Z&&(t.phoneNumber=this.a.Z),t},Mi.prototype.Sa=function(t,e){var n=this.a.b;return Ct(e.verify()).then(function(r){if(!o(r))throw new Fr("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(e.type){case"recaptcha":return function(t,e){return Ha(t,Da,e)}(n,{phoneNumber:t,recaptchaToken:r}).then(function(t){return"function"==typeof e.reset&&e.reset(),t},function(t){throw"function"==typeof e.reset&&e.reset(),t});default:throw new Fr("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.')}})},Ir(Mi,{PROVIDER_ID:"phone"}),Ir(Mi,{PHONE_SIGN_IN_METHOD:"phone"}),Bi.prototype.C=function(){return{type:this.b,eventId:this.c,urlResponse:this.f,sessionId:this.g,error:this.a&&this.a.C()}};var $i=null;function qi(t){var e="unauthorized-domain",n=void 0,r=Qe(t);t=r.b,"chrome-extension"==(r=r.c)?n=V("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):"http"==r||"https"==r?n=V("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):e="operation-not-supported-in-this-environment",Fr.call(this,e,n)}function Hi(t,e,n){Fr.call(this,t,n),(t=e||{}).ub&&Sr(this,"email",t.ub),t.Z&&Sr(this,"phoneNumber",t.Z),t.credential&&Sr(this,"credential",t.credential)}function Ki(t){if(t.code){var e=t.code||"";0==e.indexOf(jr)&&(e=e.substring(jr.length));var n={credential:Ui(t)};if(t.email)n.ub=t.email;else{if(!t.phoneNumber)return new Fr(e,t.message||void 0);n.Z=t.phoneNumber}return new Hi(e,n,t.message)}return null}Vi.prototype.subscribe=function(t){var e=this;this.a.push(t),this.b||(this.b=function(t){for(var n=0;n<e.a.length;n++)e.a[n](t)},"function"==typeof(t=ar("universalLinks.subscribe",i))&&t(null,this.b))},Vi.prototype.unsubscribe=function(t){j(this.a,function(e){return e==t})},w(qi,Fr),w(Hi,Fr),Hi.prototype.C=function(){var t={code:this.code,message:this.message};this.email&&(t.email=this.email),this.phoneNumber&&(t.phoneNumber=this.phoneNumber);var e=this.credential&&this.credential.C();return e&&lt(t,e),t},Hi.prototype.toJSON=function(){return this.C()};var Gi,Qi=/^[+a-zA-Z0-9_.!#$%&'*\/=?^`{|}~-]+@([a-zA-Z0-9-]+\.)+[a-zA-Z0-9]{2,63}$/;function zi(){}function Xi(t){return t.c||(t.c=t.b())}function Yi(){}function Ji(t){if(!t.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var e=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],n=0;n<e.length;n++){var r=e[n];try{return new ActiveXObject(r),t.f=r}catch(t){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed")}return t.f}function Zi(){}function to(){this.a=new XDomainRequest,this.readyState=0,this.onreadystatechange=null,this.responseText="",this.status=-1,this.statusText="",this.a.onload=g(this.bc,this),this.a.onerror=g(this.zb,this),this.a.onprogress=g(this.cc,this),this.a.ontimeout=g(this.fc,this)}function eo(t,e){t.readyState=e,t.onreadystatechange&&t.onreadystatechange()}function no(t,e,n){this.reset(t,e,n,void 0,void 0)}zi.prototype.c=null,w(Yi,zi),Yi.prototype.a=function(){var t=Ji(this);return t?new ActiveXObject(t):new XMLHttpRequest},Yi.prototype.b=function(){var t={};return Ji(this)&&(t[0]=!0,t[1]=!0),t},Gi=new Yi,w(Zi,zi),Zi.prototype.a=function(){var t=new XMLHttpRequest;if("withCredentials"in t)return t;if("undefined"!=typeof XDomainRequest)return new to;throw Error("Unsupported browser")},Zi.prototype.b=function(){return{}},(t=to.prototype).open=function(t,e,n){if(null!=n&&!n)throw Error("Only async requests are supported.");this.a.open(t,e)},t.send=function(t){if(t){if("string"!=typeof t)throw Error("Only string data is supported");this.a.send(t)}else this.a.send()},t.abort=function(){this.a.abort()},t.setRequestHeader=function(){},t.getResponseHeader=function(t){return"content-type"==t.toLowerCase()?this.a.contentType:""},t.bc=function(){this.status=200,this.responseText=this.a.responseText,eo(this,4)},t.zb=function(){this.status=500,this.responseText="",eo(this,4)},t.fc=function(){this.zb()},t.cc=function(){this.status=200,eo(this,1)},t.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType},no.prototype.a=null;function ro(t){this.f=t,this.b=this.c=this.a=null}function io(t,e){this.name=t,this.value=e}no.prototype.reset=function(t,e,n,r,i){"number"==typeof i||0,r||b(),delete this.a},io.prototype.toString=function(){return this.name};var oo=new io("SEVERE",1e3),ao=new io("WARNING",900),so=new io("CONFIG",700),uo=new io("FINE",500);ro.prototype.log=function(t,e,n){if(t.value>=function t(e){return e.c?e.c:e.a?t(e.a):(I("Root logger has no level set."),null)}(this).value)for(f(e)&&(e=e()),t=new no(t,String(e),this.f),n&&(t.a=n),n=this;n;)n=n.a};var co={},lo=null;function ho(t){var e;if(lo||(lo=new ro(""),co[""]=lo,lo.c=so),!(e=co[t])){e=new ro(t);var n=t.lastIndexOf("."),r=t.substr(n+1);(n=ho(t.substr(0,n))).b||(n.b={}),n.b[r]=e,e.a=n,co[t]=e}return e}function fo(t,e){t&&t.log(uo,e,void 0)}function po(t){this.f=t}function vo(t){ke.call(this),this.j=t,this.readyState=yo,this.status=0,this.responseText=this.statusText="",this.onreadystatechange=null,this.g=new Headers,this.b=null,this.h="GET",this.c="",this.a=!1,this.f=ho("goog.net.FetchXmlHttp")}w(po,zi),po.prototype.a=function(){return new vo(this.f)},po.prototype.b=function(t){return function(){return t}}({}),w(vo,ke);var yo=0;function _o(t){t.onreadystatechange&&t.onreadystatechange.call(t)}function go(t){ke.call(this),this.headers=new Ue,this.D=t||null,this.c=!1,this.B=this.a=null,this.h=this.N=this.l="",this.f=this.I=this.j=this.G=!1,this.g=0,this.s=null,this.o=mo,this.v=this.O=!1}(t=vo.prototype).open=function(t,e){if(this.readyState!=yo)throw this.abort(),Error("Error reopening a connection");this.h=t,this.c=e,this.readyState=1,_o(this)},t.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var e={headers:this.g,method:this.h,credentials:void 0,cache:void 0};t&&(e.body=t),this.j.fetch(new Request(this.c,e)).then(this.ec.bind(this),this.Ab.bind(this))},t.abort=function(){this.responseText="",this.g=new Headers,this.status=0,1<=this.readyState&&this.a&&4!=this.readyState&&(this.readyState=4,this.a=!1,_o(this)),this.readyState=yo},t.ec=function(t){this.a&&(this.b||(this.b=t.headers,this.readyState=2,_o(this)),this.a&&(this.readyState=3,_o(this),this.a&&t.text().then(this.dc.bind(this,t),this.Ab.bind(this))))},t.dc=function(t,e){this.a&&(this.status=t.status,this.statusText=t.statusText,this.responseText=e,this.readyState=4,_o(this))},t.Ab=function(t){var e=this.f;e&&e.log(ao,"Failed to fetch url "+this.c,t instanceof Error?t:Error(t)),this.a&&(this.readyState=4,_o(this))},t.setRequestHeader=function(t,e){this.g.append(t,e)},t.getResponseHeader=function(t){return this.b?this.b.get(t.toLowerCase())||"":((t=this.f)&&t.log(ao,"Attempting to get response header but no headers have been received for url: "+this.c,void 0),"")},t.getAllResponseHeaders=function(){if(!this.b){var t=this.f;return t&&t.log(ao,"Attempting to get all response headers but no headers have been received for url: "+this.c,void 0),""}t=[];for(var e=this.b.entries(),n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},w(go,ke);var mo="";go.prototype.b=ho("goog.net.XhrIo");var bo=/^https?$/i,wo=["POST","PUT"];function Eo(t,e,n,r,a){if(t.a)throw Error("[goog.net.XhrIo] Object is active with another request="+t.l+"; newUri="+e);n=n?n.toUpperCase():"GET",t.l=e,t.h="",t.N=n,t.G=!1,t.c=!0,t.a=t.D?t.D.a():Gi.a(),t.B=t.D?Xi(t.D):Xi(Gi),t.a.onreadystatechange=g(t.Db,t);try{fo(t.b,Ro(t,"Opening Xhr")),t.I=!0,t.a.open(n,String(e),!0),t.I=!1}catch(e){return fo(t.b,Ro(t,"Error opening Xhr: "+e.message)),void To(t,e)}e=r||"";var s=new Ue(t.headers);a&&function(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(h(t)||o(t))x(t,e,void 0);else for(var n=Fe(t),r=Me(t),i=r.length,a=0;a<i;a++)e.call(void 0,r[a],n&&n[a],t)}(a,function(t,e){s.set(e,t)}),a=function(t){t:{for(var e=Co,n=t.length,r=o(t)?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t)){e=i;break t}e=-1}return 0>e?null:o(t)?t.charAt(e):t[e]}(s.U()),r=i.FormData&&e instanceof i.FormData,!F(wo,n)||a||r||s.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),s.forEach(function(t,e){this.a.setRequestHeader(e,t)},t),t.o&&(t.a.responseType=t.o),"withCredentials"in t.a&&t.a.withCredentials!==t.O&&(t.a.withCredentials=t.O);try{Ao(t),0<t.g&&(t.v=function(t){return qt&&ee(9)&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(t.a),fo(t.b,Ro(t,"Will abort after "+t.g+"ms if incomplete, xhr2 "+t.v)),t.v?(t.a.timeout=t.g,t.a.ontimeout=g(t.Fa,t)):t.s=xe(t.Fa,t.g,t)),fo(t.b,Ro(t,"Sending request")),t.j=!0,t.a.send(e),t.j=!1}catch(e){fo(t.b,Ro(t,"Send error: "+e.message)),To(t,e)}}function Co(t){return"content-type"==t.toLowerCase()}function To(t,e){t.c=!1,t.a&&(t.f=!0,t.a.abort(),t.f=!1),t.h=e,So(t),No(t)}function So(t){t.G||(t.G=!0,t.dispatchEvent("complete"),t.dispatchEvent("error"))}function Io(t){if(t.c&&void 0!==r)if(t.B[1]&&4==Oo(t)&&2==ko(t))fo(t.b,Ro(t,"Local request error detected and ignored"));else if(t.j&&4==Oo(t))xe(t.Db,0,t);else if(t.dispatchEvent("readystatechange"),4==Oo(t)){fo(t.b,Ro(t,"Request complete")),t.c=!1;try{var e,n=ko(t);t:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var o=!0;break t;default:o=!1}if(!(e=o)){var a;if(a=0===n){var s=String(t.l).match(We)[1]||null;if(!s&&i.self&&i.self.location){var u=i.self.location.protocol;s=u.substr(0,u.length-1)}a=!bo.test(s?s.toLowerCase():"")}e=a}if(e)t.dispatchEvent("complete"),t.dispatchEvent("success");else{try{var c=2<Oo(t)?t.a.statusText:""}catch(e){fo(t.b,"Can not get status: "+e.message),c=""}t.h=c+" ["+ko(t)+"]",So(t)}}finally{No(t)}}}function No(t,e){if(t.a){Ao(t);var n=t.a,r=t.B[0]?s:null;t.a=null,t.B=null,e||t.dispatchEvent("ready");try{n.onreadystatechange=r}catch(e){(t=t.b)&&t.log(oo,"Problem encountered resetting onreadystatechange: "+e.message,void 0)}}}function Ao(t){t.a&&t.v&&(t.a.ontimeout=null),t.s&&(i.clearTimeout(t.s),t.s=null)}function Oo(t){return t.a?t.a.readyState:0}function ko(t){try{return 2<Oo(t)?t.a.status:-1}catch(t){return-1}}function Ro(t,e){return e+" ["+t.N+" "+t.l+" "+ko(t)+"]"}function Po(t,e){this.g=[],this.v=t,this.s=e||null,this.f=this.a=!1,this.c=void 0,this.u=this.B=this.j=!1,this.h=0,this.b=null,this.l=0}function Do(t,e,n){t.a=!0,t.c=n,t.f=!e,Fo(t)}function xo(t){if(t.a){if(!t.u)throw new Uo(t);t.u=!1}}function Lo(t,e,n,r){t.g.push([e,n,r]),t.a&&Fo(t)}function Mo(t){return M(t.g,function(t){return f(t[1])})}function Fo(t){if(t.h&&t.a&&Mo(t)){var e=t.h,n=Wo[e];n&&(i.clearTimeout(n.a),delete Wo[e]),t.h=0}t.b&&(t.b.l--,delete t.b),e=t.c;for(var r=n=!1;t.g.length&&!t.j;){var o=t.g.shift(),a=o[0],s=o[1];if(o=o[2],a=t.f?s:a)try{var u=a.call(o||t.s,e);void 0!==u&&(t.f=t.f&&(u==e||u instanceof Error),t.c=e=u),(C(e)||"function"==typeof i.Promise&&e instanceof i.Promise)&&(r=!0,t.j=!0)}catch(r){e=r,t.f=!0,Mo(t)||(n=!0)}}t.c=e,r&&(u=g(t.o,t,!0),r=g(t.o,t,!1),e instanceof Po?(Lo(e,u,r),e.B=!0):e.then(u,r)),n&&(e=new Bo(e),Wo[e.a]=e,t.h=e.a)}function Uo(){T.call(this)}function jo(){T.call(this)}function Bo(t){this.a=i.setTimeout(g(this.c,this),0),this.b=t}(t=go.prototype).Fa=function(){void 0!==r&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",fo(this.b,Ro(this,this.h)),this.dispatchEvent("timeout"),this.abort(8))},t.abort=function(){this.a&&this.c&&(fo(this.b,Ro(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),No(this))},t.ua=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),No(this,!0)),go.lb.ua.call(this)},t.Db=function(){this.pa||(this.I||this.j||this.f?Io(this):this.tc())},t.tc=function(){Io(this)},t.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.o){case mo:case"text":return this.a.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var t=this.b;return t&&t.log(oo,"Response type "+this.o+" is not supported on this browser",void 0),null}catch(t){return fo(this.b,"Can not get response: "+t.message),null}},Po.prototype.cancel=function(t){if(this.a)this.c instanceof Po&&this.c.cancel();else{if(this.b){var e=this.b;delete this.b,t?e.cancel(t):(e.l--,0>=e.l&&e.cancel())}this.v?this.v.call(this.s,this):this.u=!0,this.a||(t=new jo(this),xo(this),Do(this,!1,t))}},Po.prototype.o=function(t,e){this.j=!1,Do(this,t,e)},Po.prototype.D=function(){xo(this),Do(this,!0,null)},Po.prototype.then=function(t,e,n){var r,i,o=new yt(function(t,e){r=t,i=e});return Lo(this,r,function(t){t instanceof jo?o.cancel():i(t)}),o.then(t,e,n)},E(Po),w(Uo,T),Uo.prototype.message="Deferred has already fired",Uo.prototype.name="AlreadyCalledError",w(jo,T),jo.prototype.message="Deferred was canceled",jo.prototype.name="CanceledError",Bo.prototype.c=function(){throw delete Wo[this.a],this.b};var Wo={};function Vo(t){var e={},n=e.document||document,r=gn(t),i=document.createElement("SCRIPT"),o={Fb:i,Fa:void 0},a=new Po($o,o),s=null,u=null!=e.timeout?e.timeout:5e3;return 0<u&&(s=window.setTimeout(function(){qo(i,!0);var t=new Go(Ko,"Timeout reached for loading script "+r);xo(a),Do(a,!1,t)},u),o.Fa=s),i.onload=i.onreadystatechange=function(){i.readyState&&"loaded"!=i.readyState&&"complete"!=i.readyState||(qo(i,e.bd||!1,s),a.D())},i.onerror=function(){qo(i,!0,s);var t=new Go(Ho,"Error while loading script "+r);xo(a),Do(a,!1,t)},lt(o=e.attributes||{},{type:"text/javascript",charset:"UTF-8"}),Dn(i,o),i.src=gn(t),function(t){var e;return(e=(t||document).getElementsByTagName("HEAD"))&&0!=e.length?e[0]:t.documentElement}(n).appendChild(i),a}function $o(){if(this&&this.Fb){var t=this.Fb;t&&"SCRIPT"==t.tagName&&qo(t,!0,this.Fa)}}function qo(t,e,n){null!=n&&i.clearTimeout(n),t.onload=s,t.onerror=s,t.onreadystatechange=s,e&&window.setTimeout(function(){t&&t.parentNode&&t.parentNode.removeChild(t)},0)}var Ho=0,Ko=1;function Go(t,e){var n="Jsloader error (code #"+t+")";e&&(n+=": "+e),T.call(this,n),this.code=t}function Qo(t){this.f=t}function zo(t,n,r){if(this.b=t,t=n||{},this.j=t.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token",this.l=t.secureTokenTimeout||Jo,this.f=at(t.secureTokenHeaders||Zo),this.g=t.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",this.h=t.firebaseTimeout||ta,this.a=at(t.firebaseHeaders||ea),r&&(this.a["X-Client-Version"]=r,this.f["X-Client-Version"]=r),r="Node"==Jn(),!(r=i.XMLHttpRequest||r&&e.INTERNAL.node&&e.INTERNAL.node.XMLHttpRequest)&&!Yn())throw new Fr("internal-error","The XMLHttpRequest compatibility library was not found.");this.c=void 0,Yn()?this.c=new po(self):Zn()?this.c=new Qo(r):this.c=new Zi}w(Go,T),w(Qo,zi),Qo.prototype.a=function(){return new this.f},Qo.prototype.b=function(){return{}};var Xo,Yo="idToken",Jo=new gr(3e4,6e4),Zo={"Content-Type":"application/x-www-form-urlencoded"},ta=new gr(3e4,6e4),ea={"Content-Type":"application/json"};function na(t,e){e?t.a["X-Firebase-Locale"]=e:delete t.a["X-Firebase-Locale"]}function ra(t,e){e?(t.a["X-Client-Version"]=e,t.f["X-Client-Version"]=e):(delete t.a["X-Client-Version"],delete t.f["X-Client-Version"])}function ia(t,e,n,r,o,a,s){(function(){var t=or();return!((t=nr(t)!=er?null:(t=t.match(/\sChrome\/(\d+)/i))&&2==t.length?parseInt(t[1],10):null)&&30>t||qt&&Zt&&!(9<Zt))})()||Yn()?t=g(t.o,t):(Xo||(Xo=new yt(function(t,e){!function(t,e){if(((window.gapi||{}).client||{}).request)t();else{i[aa]=function(){((window.gapi||{}).client||{}).request?t():e(Error("CORS_UNSUPPORTED"))};var n=mn(oa,{onload:aa});!function(t,e){Lo(t,null,e,void 0)}(Vo(n),function(){e(Error("CORS_UNSUPPORTED"))})}}(t,e)})),t=g(t.u,t)),t(e,n,r,o,a,s)}zo.prototype.o=function(t,e,n,r,o,a){if(Yn()&&(void 0===i.fetch||void 0===i.Headers||void 0===i.Request))throw new Fr("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var s=new go(this.c);if(a){s.g=Math.max(0,a);var u=setTimeout(function(){s.dispatchEvent("timeout")},a)}Re(s,"complete",function(){u&&clearTimeout(u);var t=null;try{t=JSON.parse(function(t){try{return t.a?t.a.responseText:""}catch(e){return fo(t.b,"Can not get responseText: "+e.message),""}}(this))||null}catch(e){t=null}e&&e(t)}),Pe(s,"ready",function(){u&&clearTimeout(u),jt(this)}),Pe(s,"timeout",function(){u&&clearTimeout(u),jt(this),e&&e(null)}),Eo(s,t,n,r,o)};var oa=yn("https://apis.google.com/js/client.js?onload=%{onload}"),aa="__fcb"+Math.floor(1e6*Math.random()).toString();function sa(t){if(!Qi.test(t.email))throw new Fr("invalid-email")}function ua(t){"email"in t&&sa(t)}function ca(t){if(!t[Yo])throw new Fr("internal-error")}function la(t){if(t.phoneNumber||t.temporaryProof){if(!t.phoneNumber||!t.temporaryProof)throw new Fr("internal-error")}else{if(!t.sessionInfo)throw new Fr("missing-verification-id");if(!t.code)throw new Fr("missing-verification-code")}}zo.prototype.u=function(t,e,n,r,i){var o=this;Xo.then(function(){window.gapi.client.setApiKey(o.b);var a=window.gapi.auth.getToken();window.gapi.auth.setToken(null),window.gapi.client.request({path:t,method:n,body:r,headers:i,authType:"none",callback:function(t){window.gapi.auth.setToken(a),e&&e(t)}})}).m(function(t){e&&e({error:{message:t&&t.message||"CORS_UNSUPPORTED"}})})},zo.prototype.jb=function(){return Ha(this,Ma,{})},zo.prototype.mb=function(t,e){return Ha(this,xa,{idToken:t,email:e})},zo.prototype.nb=function(t,e){return Ha(this,La,{idToken:t,password:e})};var ha={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};function fa(t){if(!t.requestUri||!t.sessionId&&!t.postBody)throw new Fr("internal-error")}function pa(t){var e=null;if(t.needConfirmation?(t.code="account-exists-with-different-credential",e=Ki(t)):"FEDERATED_USER_ID_ALREADY_LINKED"==t.errorMessage?(t.code="credential-already-in-use",e=Ki(t)):"EMAIL_EXISTS"==t.errorMessage?(t.code="email-already-in-use",e=Ki(t)):t.errorMessage&&(e=Ka(t.errorMessage)),e)throw e;if(!t[Yo])throw new Fr("internal-error")}function da(t,e){return e.returnIdpCredential=!0,Ha(t,Fa,e)}function va(t,e){return e.returnIdpCredential=!0,Ha(t,ja,e)}function ya(t,e){return e.returnIdpCredential=!0,e.autoCreate=!1,Ha(t,Ua,e)}function _a(t){if(!t.oobCode)throw new Fr("invalid-action-code")}(t=zo.prototype).ob=function(t,e){var n={idToken:t},r=[];return it(ha,function(t,i){var o=e[i];null===o?r.push(t):i in e&&(n[i]=o)}),r.length&&(n.deleteAttribute=r),Ha(this,xa,n)},t.gb=function(t,e){return lt(t={requestType:"PASSWORD_RESET",email:t},e),Ha(this,Oa,t)},t.hb=function(t,e){return lt(t={requestType:"EMAIL_SIGNIN",email:t},e),Ha(this,Na,t)},t.fb=function(t,e){return lt(t={requestType:"VERIFY_EMAIL",idToken:t},e),Ha(this,Aa,t)},t.Sa=function(t){return Ha(this,Va,t)},t.Wa=function(t,e){return Ha(this,Pa,{oobCode:t,newPassword:e})},t.Ia=function(t){return Ha(this,ma,{oobCode:t})},t.Ua=function(t){return Ha(this,ga,{oobCode:t})};var ga={endpoint:"setAccountInfo",A:_a,ba:"email"},ma={endpoint:"resetPassword",A:_a,J:function(t){var e=t.requestType;if(!e||!t.email&&"EMAIL_SIGNIN"!=e)throw new Fr("internal-error")}},ba={endpoint:"signupNewUser",A:function(t){if(sa(t),!t.password)throw new Fr("weak-password")},J:ca,R:!0},wa={endpoint:"createAuthUri"},Ea={endpoint:"deleteAccount",T:["idToken"]},Ca={endpoint:"setAccountInfo",T:["idToken","deleteProvider"],A:function(t){if(!l(t.deleteProvider))throw new Fr("internal-error")}},Ta={endpoint:"emailLinkSignin",T:["email","oobCode"],A:sa,J:ca,R:!0},Sa={endpoint:"emailLinkSignin",T:["idToken","email","oobCode"],A:sa,J:ca,R:!0},Ia={endpoint:"getAccountInfo"},Na={endpoint:"getOobConfirmationCode",T:["requestType"],A:function(t){if("EMAIL_SIGNIN"!=t.requestType)throw new Fr("internal-error");sa(t)},ba:"email"},Aa={endpoint:"getOobConfirmationCode",T:["idToken","requestType"],A:function(t){if("VERIFY_EMAIL"!=t.requestType)throw new Fr("internal-error")},ba:"email"},Oa={endpoint:"getOobConfirmationCode",T:["requestType"],A:function(t){if("PASSWORD_RESET"!=t.requestType)throw new Fr("internal-error");sa(t)},ba:"email"},ka={pb:!0,endpoint:"getProjectConfig",Cb:"GET"},Ra={pb:!0,endpoint:"getRecaptchaParam",Cb:"GET",J:function(t){if(!t.recaptchaSiteKey)throw new Fr("internal-error")}},Pa={endpoint:"resetPassword",A:_a,ba:"email"},Da={endpoint:"sendVerificationCode",T:["phoneNumber","recaptchaToken"],ba:"sessionInfo"},xa={endpoint:"setAccountInfo",T:["idToken"],A:ua,R:!0},La={endpoint:"setAccountInfo",T:["idToken"],A:function(t){if(ua(t),!t.password)throw new Fr("weak-password")},J:ca,R:!0},Ma={endpoint:"signupNewUser",J:ca,R:!0},Fa={endpoint:"verifyAssertion",A:fa,J:pa,R:!0},Ua={endpoint:"verifyAssertion",A:fa,J:function(t){if(t.errorMessage&&"USER_NOT_FOUND"==t.errorMessage)throw new Fr("user-not-found");if(t.errorMessage)throw Ka(t.errorMessage);if(!t[Yo])throw new Fr("internal-error")},R:!0},ja={endpoint:"verifyAssertion",A:function(t){if(fa(t),!t.idToken)throw new Fr("internal-error")},J:pa,R:!0},Ba={endpoint:"verifyCustomToken",A:function(t){if(!t.token)throw new Fr("invalid-custom-token")},J:ca,R:!0},Wa={endpoint:"verifyPassword",A:function(t){if(sa(t),!t.password)throw new Fr("wrong-password")},J:ca,R:!0},Va={endpoint:"verifyPhoneNumber",A:la,J:ca},$a={endpoint:"verifyPhoneNumber",A:function(t){if(!t.idToken)throw new Fr("internal-error");la(t)},J:function(t){if(t.temporaryProof)throw t.code="credential-already-in-use",Ki(t);ca(t)}},qa={Tb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",A:la,J:ca};function Ha(t,e,n){if(!function(t,e){if(!e||!e.length)return!0;if(!t)return!1;for(var n=0;n<e.length;n++){var r=t[e[n]];if(void 0===r||null===r||""===r)return!1}return!0}(n,e.T))return Tt(new Fr("internal-error"));var r,i=e.Cb||"POST";return Ct(n).then(e.A).then(function(){return e.R&&(n.returnSecureToken=!0),function(t,e,n,r,i,o){var a=Qe(t.g+e);Ke(a,"key",t.b),o&&Ke(a,"cb",b().toString());var s="GET"==n;if(s)for(var u in r)r.hasOwnProperty(u)&&Ke(a,u,r[u]);return new yt(function(e,o){ia(t,a.toString(),function(t){t?t.error?o(Ga(t,i||{})):e(t):o(new Fr("network-request-failed"))},n,s?void 0:Fn(pr(r)),t.a,t.h.get())})}(t,e.endpoint,i,n,e.Tb,e.pb||!1)}).then(function(t){return r=t}).then(e.J).then(function(){if(!e.ba)return r;if(!(e.ba in r))throw new Fr("internal-error");return r[e.ba]})}function Ka(t){return Ga({error:{errors:[{message:t}],code:400,message:t}})}function Ga(t,e){var n=(t.error&&t.error.errors&&t.error.errors[0]||{}).reason||"",r={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(n=r[n]?new Fr(r[n]):null)return n;for(var i in n=t.error&&t.error.message||"",lt(r={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash"},e||{}),e=(e=n.match(/^[^\s]+\s*:\s*(.*)$/))&&1<e.length?e[1]:void 0,r)if(0===n.indexOf(i))return new Fr(r[i],e);return!e&&t&&(e=fr(t)),new Fr("internal-error",e)}var Qa,za={Wc:{Ya:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",eb:"https://securetoken.googleapis.com/v1/token",id:"p"},Yc:{Ya:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",eb:"https://staging-securetoken.sandbox.googleapis.com/v1/token",id:"s"},Zc:{Ya:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",eb:"https://test-securetoken.sandbox.googleapis.com/v1/token",id:"t"}};function Xa(t){for(var e in za)if(za[e].id===t)return{firebaseEndpoint:(t=za[e]).Ya,secureTokenEndpoint:t.eb};return null}function Ya(t){this.b=t,this.a=null,this.ab=function(t){return(ns||(ns=new yt(function(t,e){function n(){_r(),ar("gapi.load")("gapi.iframes",{callback:t,ontimeout:function(){_r(),e(Error("Network Error"))},timeout:ts.get()})}if(ar("gapi.iframes.Iframe"))t();else if(ar("gapi.load"))n();else{var r="__iframefcb"+Math.floor(1e6*Math.random()).toString();i[r]=function(){ar("gapi.load")?n():e(Error("Network Error"))},Ct(Vo(r=mn(Za,{onload:r}))).m(function(){e(Error("Network Error"))})}}).m(function(t){throw ns=null,t}))).then(function(){return new yt(function(e,n){ar("gapi.iframes.getContext")().open({where:document.body,url:t.b,messageHandlersFilter:ar("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},function(r){function i(){clearTimeout(o),e()}t.a=r,t.a.restyle({setHideOnLeave:!1});var o=setTimeout(function(){n(Error("Network Error"))},es.get());r.ping(i).then(i,function(){n(Error("Network Error"))})})})})}(this)}Qa=Xa("__EID__")?"__EID__":void 0;var Ja,Za=yn("https://apis.google.com/js/api.js?onload=%{onload}"),ts=new gr(3e4,6e4),es=new gr(5e3,15e3),ns=null;function rs(t,e,n){this.j=t,this.g=e,this.h=n,this.f=null,this.a=ze(this.j,"/__/auth/iframe"),Ke(this.a,"apiKey",this.g),Ke(this.a,"appName",this.h),this.b=null,this.c=[]}function is(t,e,n,r,i){this.o=t,this.u=e,this.c=n,this.l=r,this.h=this.g=this.j=null,this.a=i,this.f=null}function os(t){try{return e.app(t).auth().Ka()}catch(t){return[]}}function as(t,e,n,r,i){this.u=t,this.f=e,this.b=n,this.c=r||null,this.h=i||null,this.o=this.s=this.v=null,this.g=[],this.l=this.a=null}function ss(t){var e=Vn();return function(t){return Ha(t,ka,{}).then(function(t){return t.authorizedDomains||[]})}(t).then(function(t){t:{var n=Qe(e),r=n.c;n=n.b;for(var i=0;i<t.length;i++){var o=t[i],a=n,s=r;if(0==o.indexOf("chrome-extension://")?a=Qe(o).b==a&&"chrome-extension"==s:"http"!=s&&"https"!=s?a=!1:Gn.test(o)?a=a==o:(o=o.split(".").join("\\."),a=new RegExp("^(.+\\."+o+"|"+o+")$","i").test(a)),a){t=!0;break t}}t=!1}if(!t)throw new qi(Vn())})}function us(t){return t.l?t.l:(t.l=Qn().then(function(){if(!t.s){var e=t.c,n=t.h,r=os(t.b),i=new rs(t.u,t.f,t.b);i.f=e,i.b=n,i.c=W(r||[]),t.s=i.toString()}t.j=new Ya(t.s),function(t){if(!t.j)throw Error("IfcHandler must be initialized!");!function(t,e){t.ab.then(function(){t.a.register("authEvent",e,ar("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))})}(t.j,function(e){var n={};if(e&&e.authEvent){var r=!1;for(e=Wi(e.authEvent),n=0;n<t.g.length;n++)r=t.g[n](e)||r;return(n={}).status=r?"ACK":"ERROR",Ct(n)}return n.status="ERROR",Ct(n)})}(t)}),t.l)}function cs(t){return t.o||(t.v=t.c?ir(t.c,os(t.b)):null,t.o=new zo(t.f,Xa(t.h),t.v)),t.o}function ls(t,e,n,r,i,o,a,s,u,c){return(t=new is(t,e,n,r,i)).j=o,t.g=a,t.h=s,t.b=at(u||null),t.f=c,t.toString()}function hs(t){if(this.a=t||e.INTERNAL.reactNative&&e.INTERNAL.reactNative.AsyncStorage,!this.a)throw new Fr("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage"}function fs(){if(!vs())throw new Fr("web-storage-unsupported");this.f={},this.a=[],this.b=0,this.g=i.indexedDB,this.type="indexedDB"}function ps(t){return new yt(function(e,n){var r=t.g.open("firebaseLocalStorageDb",1);r.onerror=function(t){try{t.preventDefault()}catch(t){}n(Error(t.target.error))},r.onupgradeneeded=function(t){t=t.target.result;try{t.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"})}catch(t){n(t)}},r.onsuccess=function(r){(r=r.target.result).objectStoreNames.contains("firebaseLocalStorage")?e(r):function(t){return new yt(function(e,n){var r=t.g.deleteDatabase("firebaseLocalStorageDb");r.onsuccess=function(){e()},r.onerror=function(t){n(Error(t.target.error))}})}(t).then(function(){return ps(t)}).then(function(t){e(t)}).m(function(t){n(t)})}})}function ds(t){return t.h||(t.h=ps(t)),t.h}function vs(){try{return!!i.indexedDB}catch(t){return!1}}function ys(t){return t.objectStore("firebaseLocalStorage")}function _s(t,e){return t.transaction(["firebaseLocalStorage"],e?"readwrite":"readonly")}function gs(t){return new yt(function(e,n){t.onsuccess=function(t){t&&t.target?e(t.target.result):e()},t.onerror=function(t){n(Error(t.target.errorCode))}})}function ms(t){var e=this,n=null;this.a=[],this.type="indexedDB",this.c=t,this.b=Ct().then(function(){return vs()?(Ja||(Ja=new fs),(n=Ja).set("__sak","!").then(function(){return n.get("__sak")}).then(function(t){if("!"!==t)throw Error("indexedDB not supported!");return n.P("__sak")}).then(function(){return n}).m(function(){return e.c})):e.c}).then(function(t){return e.type=t.type,t.Y(function(t){x(e.a,function(e){e(t)})}),t})}function bs(){this.a={},this.type="inMemory"}function ws(){if(!function(){var t="Node"==Jn();if(!(t=Es()||t&&e.INTERNAL.node&&e.INTERNAL.node.localStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==Jn())throw new Fr("internal-error","The LocalStorage compatibility library was not found.");throw new Fr("web-storage-unsupported")}this.a=Es()||e.INTERNAL.node.localStorage,this.type="localStorage"}function Es(){try{var t=i.localStorage,e=vr();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function Cs(){this.type="nullStorage"}function Ts(){if(!function(){var t="Node"==Jn();if(!(t=Ss()||t&&e.INTERNAL.node&&e.INTERNAL.node.sessionStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==Jn())throw new Fr("internal-error","The SessionStorage compatibility library was not found.");throw new Fr("web-storage-unsupported")}this.a=Ss()||e.INTERNAL.node.sessionStorage,this.type="sessionStorage"}function Ss(){try{var t=i.sessionStorage,e=vr();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}rs.prototype.toString=function(){return this.f?Ke(this.a,"v",this.f):un(this.a.a,"v"),this.b?Ke(this.a,"eid",this.b):un(this.a.a,"eid"),this.c.length?Ke(this.a,"fw",this.c.join(",")):un(this.a.a,"fw"),this.a.toString()},is.prototype.toString=function(){var t=ze(this.o,"/__/auth/handler");if(Ke(t,"apiKey",this.u),Ke(t,"appName",this.c),Ke(t,"authType",this.l),this.a.isOAuthProvider){var n=this.a;try{var r=e.app(this.c).auth().ca()}catch(t){r=null}for(var i in n.Xa=r,Ke(t,"providerId",this.a.providerId),r=pr((n=this.a).tb))r[i]=r[i].toString();i=n.Ac,r=at(r);for(var o=0;o<i.length;o++){var a=i[o];a in r&&delete r[a]}n.Za&&n.Xa&&!r[n.Za]&&(r[n.Za]=n.Xa),ot(r)||Ke(t,"customParameters",fr(r))}if("function"==typeof this.a.yb&&((n=this.a.yb()).length&&Ke(t,"scopes",n.join(","))),this.j?Ke(t,"redirectUrl",this.j):un(t.a,"redirectUrl"),this.g?Ke(t,"eventId",this.g):un(t.a,"eventId"),this.h?Ke(t,"v",this.h):un(t.a,"v"),this.b)for(var s in this.b)this.b.hasOwnProperty(s)&&!Ge(t,s)&&Ke(t,s,this.b[s]);return this.f?Ke(t,"eid",this.f):un(t.a,"eid"),(s=os(this.c)).length&&Ke(t,"fw",s.join(",")),t.toString()},(t=as.prototype).Da=function(t,e,n){var r=new Fr("popup-closed-by-user"),i=new Fr("web-storage-unsupported"),o=this,a=!1;return this.ea().then(function(){(function(t){var e={type:"webStorageSupport"};return us(t).then(function(){return function(t,e){return t.ab.then(function(){return new yt(function(n){t.a.send(e.type,e,n,ar("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))})})}(t.j,e)}).then(function(t){if(t&&t.length&&void 0!==t[0].webStorageSupport)return t[0].webStorageSupport;throw Error()})})(o).then(function(n){n||(t&&Hn(t),e(i),a=!0)})}).m(function(){}).then(function(){if(!a)return function(t){return new yt(function(e){return function n(){Le(2e3).then(function(){if(t&&!t.closed)return n();e()})}()})}(t)}).then(function(){if(!a)return Le(n).then(function(){e(r)})})},t.Gb=function(){var t=or();return!hr(t)&&!yr(t)},t.Bb=function(){return!1},t.xb=function(t,e,n,r,i,o,a){if(!t)return Tt(new Fr("popup-blocked"));if(a&&!hr())return this.ea().m(function(e){Hn(t),i(e)}),r(),Ct();this.a||(this.a=ss(cs(this)));var s=this;return this.a.then(function(){var e=s.ea().m(function(e){throw Hn(t),i(e),e});return r(),e}).then(function(){(ji(n),a)||$n(ls(s.u,s.f,s.b,e,n,null,o,s.c,void 0,s.h),t)}).m(function(t){throw"auth/network-request-failed"==t.code&&(s.a=null),t})},t.Ba=function(t,e,n){this.a||(this.a=ss(cs(this)));var r=this;return this.a.then(function(){ji(e),$n(ls(r.u,r.f,r.b,t,e,Vn(),n,r.c,void 0,r.h))}).m(function(t){throw"auth/network-request-failed"==t.code&&(r.a=null),t})},t.ea=function(){var t=this;return us(this).then(function(){return t.j.ab}).m(function(){throw t.a=null,new Fr("network-request-failed")})},t.Lb=function(){return!0},t.va=function(t){this.g.push(t)},t.Ja=function(t){j(this.g,function(e){return e==t})},(t=hs.prototype).get=function(t){return Ct(this.a.getItem(t)).then(function(t){return t&&dr(t)})},t.set=function(t,e){return Ct(this.a.setItem(t,fr(e)))},t.P=function(t){return Ct(this.a.removeItem(t))},t.Y=function(){},t.aa=function(){},(t=fs.prototype).set=function(t,e){var n,r=!1,i=this;return ds(this).then(function(e){return gs((e=ys(_s(n=e,!0))).get(t))}).then(function(o){var a=ys(_s(n,!0));return o?(o.value=e,gs(a.put(o))):(i.b++,r=!0,(o={}).fbase_key=t,o.value=e,gs(a.add(o)))}).then(function(){i.f[t]=e}).ha(function(){r&&i.b--})},t.get=function(t){return ds(this).then(function(e){return gs(ys(_s(e,!1)).get(t))}).then(function(t){return t&&t.value})},t.P=function(t){var e=!1,n=this;return ds(this).then(function(r){return e=!0,n.b++,gs(ys(_s(r,!0)).delete(t))}).then(function(){delete n.f[t]}).ha(function(){e&&n.b--})},t.Jc=function(){var t=this;return ds(this).then(function(t){var e=ys(_s(t,!1));return e.getAll?gs(e.getAll()):new yt(function(t,n){var r=[],i=e.openCursor();i.onsuccess=function(e){(e=e.target.result)?(r.push(e.value),e.continue()):t(r)},i.onerror=function(t){n(Error(t.target.errorCode))}})}).then(function(e){var n={},r=[];if(0==t.b){for(r=0;r<e.length;r++)n[e[r].fbase_key]=e[r].value;r=function t(e,n){var r,i=[];for(r in e)if(r in n)if(typeof e[r]!=typeof n[r])i.push(r);else if(l(e[r])){t:{var o=void 0,a=e[r],s=n[r];for(o in a)if(!(o in s)||a[o]!==s[o]){o=!1;break t}for(o in s)if(!(o in a)){o=!1;break t}o=!0}o||i.push(r)}else"object"==typeof e[r]&&null!=e[r]&&null!=n[r]?0<t(e[r],n[r]).length&&i.push(r):e[r]!==n[r]&&i.push(r);else i.push(r);for(r in n)r in e||i.push(r);return i}(t.f,n),t.f=n}return r})},t.Y=function(t){0==this.a.length&&function(t){t.c&&t.c.cancel("STOP_EVENT"),function e(){t.c=Le(800).then(g(t.Jc,t)).then(function(e){0<e.length&&x(t.a,function(t){t(e)})}).then(e).m(function(t){"STOP_EVENT"!=t.message&&e()});return t.c}()}(this),this.a.push(t)},t.aa=function(t){j(this.a,function(e){return e==t}),0==this.a.length&&this.c&&this.c.cancel("STOP_EVENT")},(t=ms.prototype).get=function(t){return this.b.then(function(e){return e.get(t)})},t.set=function(t,e){return this.b.then(function(n){return n.set(t,e)})},t.P=function(t){return this.b.then(function(e){return e.P(t)})},t.Y=function(t){this.a.push(t)},t.aa=function(t){j(this.a,function(e){return e==t})},(t=bs.prototype).get=function(t){return Ct(this.a[t])},t.set=function(t,e){return this.a[t]=e,Ct()},t.P=function(t){return delete this.a[t],Ct()},t.Y=function(){},t.aa=function(){},(t=ws.prototype).get=function(t){var e=this;return Ct().then(function(){return dr(e.a.getItem(t))})},t.set=function(t,e){var n=this;return Ct().then(function(){var r=fr(e);null===r?n.P(t):n.a.setItem(t,r)})},t.P=function(t){var e=this;return Ct().then(function(){e.a.removeItem(t)})},t.Y=function(t){i.window&&ge(i.window,"storage",t)},t.aa=function(t){i.window&&we(i.window,"storage",t)},(t=Cs.prototype).get=function(){return Ct(null)},t.set=function(){return Ct()},t.P=function(){return Ct()},t.Y=function(){},t.aa=function(){},(t=Ts.prototype).get=function(t){var e=this;return Ct().then(function(){return dr(e.a.getItem(t))})},t.set=function(t,e){var n=this;return Ct().then(function(){var r=fr(e);null===r?n.P(t):n.a.setItem(t,r)})},t.P=function(t){var e=this;return Ct().then(function(){e.a.removeItem(t)})},t.Y=function(){},t.aa=function(){};var Is,Ns,As={w:ws,Pa:Ts},Os={w:ws,Pa:Ts},ks={w:hs,Pa:Cs},Rs={w:ws,Pa:Cs},Ps={Vc:"local",NONE:"none",Xc:"session"};function Ds(){var t=!(yr(or())||!Xn()),e=hr(),n=sr();this.o=t,this.h=e,this.l=n,this.a={},Is||(Is=new function(){var t={};t.Browser=As,t.Node=Os,t.ReactNative=ks,t.Worker=Rs,this.a=t[Jn()]}),t=Is;try{this.g=!Wn()&&wr()||!i.indexedDB?new t.a.w:new ms(Yn()?new bs:new t.a.w)}catch(t){this.g=new bs,this.h=!0}try{this.j=new t.a.Pa}catch(t){this.j=new bs}this.u=new bs,this.f=g(this.Kb,this),this.b={}}function xs(){return Ns||(Ns=new Ds),Ns}function Ls(t,e){switch(e){case"session":return t.j;case"none":return t.u;default:return t.g}}function Ms(t,e){return"firebase:"+t.name+(e?":"+e:"")}function Fs(t,e,n){return n=Ms(e,n),"local"==e.w&&(t.b[n]=null),Ls(t,e.w).P(n)}function Us(t){t.c&&(clearInterval(t.c),t.c=null)}(t=Ds.prototype).get=function(t,e){return Ls(this,t.w).get(Ms(t,e))},t.set=function(t,e,n){var r=Ms(t,n),i=this,o=Ls(this,t.w);return o.set(r,e).then(function(){return o.get(r)}).then(function(e){"local"==t.w&&(i.b[r]=e)})},t.addListener=function(t,e,n){t=Ms(t,e),this.l&&(this.b[t]=i.localStorage.getItem(t)),ot(this.a)&&(Ls(this,"local").Y(this.f),this.h||(Wn()||!wr())&&i.indexedDB||!this.l||function(t){Us(t),t.c=setInterval(function(){for(var e in t.a){var n=i.localStorage.getItem(e),r=t.b[e];n!=r&&(t.b[e]=n,n=new ue({type:"storage",key:e,target:window,oldValue:r,newValue:n,a:!0}),t.Kb(n))}},1e3)}(this)),this.a[t]||(this.a[t]=[]),this.a[t].push(n)},t.removeListener=function(t,e,n){t=Ms(t,e),this.a[t]&&(j(this.a[t],function(t){return t==n}),0==this.a[t].length&&delete this.a[t]),ot(this.a)&&(Ls(this,"local").aa(this.f),Us(this))},t.Kb=function(t){if(t&&t.f){var e=t.a.key;if(null==e)for(var n in this.a){var r=this.b[n];void 0===r&&(r=null);var o=i.localStorage.getItem(n);o!==r&&(this.b[n]=o,this.Va(n))}else if(0==e.indexOf("firebase:")&&this.a[e]){if(void 0!==t.a.a?Ls(this,"local").aa(this.f):Us(this),this.o)if(n=i.localStorage.getItem(e),(r=t.a.newValue)!==n)null!==r?i.localStorage.setItem(e,r):i.localStorage.removeItem(e);else if(this.b[e]===r&&void 0===t.a.a)return;var a=this;n=function(){void 0===t.a.a&&a.b[e]===i.localStorage.getItem(e)||(a.b[e]=i.localStorage.getItem(e),a.Va(e))},qt&&Zt&&10==Zt&&i.localStorage.getItem(e)!==t.a.newValue&&t.a.newValue!==t.a.oldValue?setTimeout(n,10):n()}}else x(t,g(this.Va,this))},t.Va=function(t){this.a[t]&&x(this.a[t],function(t){t()})};var js,Bs={name:"authEvent",w:"local"};function Ws(t,e){this.b=-1,this.b=Vs,this.f=i.Uint8Array?new Uint8Array(this.b):Array(this.b),this.g=this.c=0,this.a=[],this.j=t,this.h=e,this.l=i.Int32Array?new Int32Array(64):Array(64),void 0!==js||(js=i.Int32Array?new Int32Array(zs):zs),this.reset()}w(Ws,function(){this.b=-1});for(var Vs=64,$s=Vs-1,qs=[],Hs=0;Hs<$s;Hs++)qs[Hs]=0;var Ks=B(128,qs);function Gs(t){for(var e=t.f,n=t.l,r=0,i=0;i<e.length;)n[r++]=e[i]<<24|e[i+1]<<16|e[i+2]<<8|e[i+3],i=4*r;for(e=16;64>e;e++){i=0|n[e-15],r=0|n[e-2];var o=(0|n[e-16])+((i>>>7|i<<25)^(i>>>18|i<<14)^i>>>3)|0,a=(0|n[e-7])+((r>>>17|r<<15)^(r>>>19|r<<13)^r>>>10)|0;n[e]=o+a|0}r=0|t.a[0],i=0|t.a[1];var s=0|t.a[2],u=0|t.a[3],c=0|t.a[4],l=0|t.a[5],h=0|t.a[6];for(o=0|t.a[7],e=0;64>e;e++){var f=((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+(r&i^r&s^i&s)|0;a=(o=o+((c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7))|0)+((a=(a=c&l^~c&h)+(0|js[e])|0)+(0|n[e])|0)|0,o=h,h=l,l=c,c=u+a|0,u=s,s=i,i=r,r=a+f|0}t.a[0]=t.a[0]+r|0,t.a[1]=t.a[1]+i|0,t.a[2]=t.a[2]+s|0,t.a[3]=t.a[3]+u|0,t.a[4]=t.a[4]+c|0,t.a[5]=t.a[5]+l|0,t.a[6]=t.a[6]+h|0,t.a[7]=t.a[7]+o|0}function Qs(t,e,n){void 0===n&&(n=e.length);var r=0,i=t.c;if(o(e))for(;r<n;)t.f[i++]=e.charCodeAt(r++),i==t.b&&(Gs(t),i=0);else{if(!h(e))throw Error("message must be string or array");for(;r<n;){var a=e[r++];if(!("number"==typeof a&&0<=a&&255>=a&&a==(0|a)))throw Error("message must be a byte array");t.f[i++]=a,i==t.b&&(Gs(t),i=0)}}t.c=i,t.g+=n}Ws.prototype.reset=function(){this.g=this.c=0,this.a=i.Int32Array?new Int32Array(this.h):W(this.h)};var zs=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function Xs(){Ws.call(this,8,Ys)}w(Xs,Ws);var Ys=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function Js(t,e,n,r,i){this.u=t,this.j=e,this.l=n,this.o=r||null,this.s=i||null,this.h=e+":"+n,this.v=new function(){this.a=xs()},this.g=new function(t){this.a=t,this.b=xs()}(this.h),this.f=null,this.b=[],this.a=this.c=null}function Zs(t){return new Fr("invalid-cordova-configuration",t)}function tu(t){var e=new Xs;Qs(e,t),t=[];var n=8*e.g;56>e.c?Qs(e,Ks,56-e.c):Qs(e,Ks,e.b-(e.c-56));for(var r=63;56<=r;r--)e.f[r]=255&n,n/=256;for(Gs(e),r=n=0;r<e.j;r++)for(var i=24;0<=i;i-=8)t[n++]=e.a[r]>>i&255;return function(t){return L(t,function(t){return 1<(t=t.toString(16)).length?t:"0"+t}).join("")}(t)}function eu(t,e){for(var n=0;n<t.b.length;n++)try{t.b[n](e)}catch(t){}}function nu(t){return t.f||(t.f=t.ea().then(function(){return new yt(function(e){t.va(function n(r){return e(r),t.Ja(n),!1}),function(t){function e(e){r=!0,o&&o.cancel(),ru(t).then(function(r){var i=n;if(r&&e&&e.url){var o=null;-1!=(i=yi(e.url)).indexOf("/__/auth/callback")&&(o=(o="object"==typeof(o=dr(Ge(o=Qe(i),"firebaseError")||null))?Ur(o):null)?new Bi(r.b,r.c,null,null,o):new Bi(r.b,r.c,i,r.g)),i=o||n}eu(t,i)})}var n=new Bi("unknown",null,null,null,new Fr("no-auth-event")),r=!1,o=Le(500).then(function(){return ru(t).then(function(){r||eu(t,n)})}),a=i.handleOpenURL;i.handleOpenURL=function(t){if(0==t.toLowerCase().indexOf(ar("BuildInfo.packageName",i).toLowerCase()+"://")&&e({url:t}),"function"==typeof a)try{a(t)}catch(t){console.error(t)}},$i||($i=new Vi),$i.subscribe(e)}(t)})})),t.f}function ru(t){var e=null;return function(t){return t.b.get(Bs,t.a).then(function(t){return Wi(t)})}(t.g).then(function(n){return e=n,Fs((n=t.g).b,Bs,n.a)}).then(function(){return e})}(t=Js.prototype).ea=function(){return this.ya?this.ya:this.ya=(zn(void 0)?Qn().then(function(){return new yt(function(t,e){var n=i.document,r=setTimeout(function(){e(Error("Cordova framework is not ready."))},1e3);n.addEventListener("deviceready",function(){clearTimeout(r),t()},!1)})}):Tt(Error("Cordova must run in an Android or iOS file scheme."))).then(function(){if("function"!=typeof ar("universalLinks.subscribe",i))throw Zs("cordova-universal-links-plugin is not installed");if(void 0===ar("BuildInfo.packageName",i))throw Zs("cordova-plugin-buildinfo is not installed");if("function"!=typeof ar("cordova.plugins.browsertab.openUrl",i))throw Zs("cordova-plugin-browsertab is not installed");if("function"!=typeof ar("cordova.InAppBrowser.open",i))throw Zs("cordova-plugin-inappbrowser is not installed")},function(){throw new Fr("cordova-not-ready")})},t.Da=function(t,e){return e(new Fr("operation-not-supported-in-this-environment")),Ct()},t.xb=function(){return Tt(new Fr("operation-not-supported-in-this-environment"))},t.Lb=function(){return!1},t.Gb=function(){return!0},t.Bb=function(){return!0},t.Ba=function(t,e,n){if(this.c)return Tt(new Fr("redirect-operation-pending"));var r=this,o=i.document,a=null,s=null,u=null,c=null;return this.c=Ct().then(function(){return ji(e),nu(r)}).then(function(){return function(t,e,n,r){var o=function(){for(var t=20,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}(),a=new Bi(e,r,null,o,new Fr("no-auth-event")),s=ar("BuildInfo.packageName",i);if("string"!=typeof s)throw new Fr("invalid-cordova-configuration");var u=ar("BuildInfo.displayName",i),c={};if(or().toLowerCase().match(/iphone|ipad|ipod/))c.ibi=s;else{if(!or().toLowerCase().match(/android/))return Tt(new Fr("operation-not-supported-in-this-environment"));c.apn=s}u&&(c.appDisplayName=u),o=tu(o),c.sessionId=o;var l=ls(t.u,t.j,t.l,e,n,null,r,t.o,c,t.s);return t.ea().then(function(){var e=t.h;return t.v.a.set(Bs,a.C(),e)}).then(function(){var e=ar("cordova.plugins.browsertab.isAvailable",i);if("function"!=typeof e)throw new Fr("invalid-cordova-configuration");var n=null;e(function(e){if(e){if("function"!=typeof(n=ar("cordova.plugins.browsertab.openUrl",i)))throw new Fr("invalid-cordova-configuration");n(l)}else{if("function"!=typeof(n=ar("cordova.InAppBrowser.open",i)))throw new Fr("invalid-cordova-configuration");e=!(!(e=or()).match(/(iPad|iPhone|iPod).*OS 7_\d/i)&&!e.match(/(iPad|iPhone|iPod).*OS 8_\d/i)),t.a=n(l,e?"_blank":"_system","location=yes")}})})}(r,t,e,n)}).then(function(){return new yt(function(t,e){s=function(){var e=ar("cordova.plugins.browsertab.close",i);return t(),"function"==typeof e&&e(),r.a&&"function"==typeof r.a.close&&(r.a.close(),r.a=null),!1},r.va(s),u=function(){a||(a=Le(2e3).then(function(){e(new Fr("redirect-cancelled-by-user"))}))},c=function(){mr()&&u()},o.addEventListener("resume",u,!1),or().toLowerCase().match(/android/)||o.addEventListener("visibilitychange",c,!1)}).m(function(t){return ru(r).then(function(){throw t})})}).ha(function(){u&&o.removeEventListener("resume",u,!1),c&&o.removeEventListener("visibilitychange",c,!1),a&&a.cancel(),s&&r.Ja(s),r.c=null})},t.va=function(t){this.b.push(t),nu(this).m(function(e){"auth/invalid-cordova-configuration"===e.code&&(e=new Bi("unknown",null,null,null,new Fr("no-auth-event")),t(e))})},t.Ja=function(t){j(this.b,function(e){return e==t})};var iu={name:"pendingRedirect",w:"session"};function ou(t){return Fs(t.b,iu,t.a)}function au(t,e,n){this.v=t,this.l=e,this.u=n,this.h=[],this.f=!1,this.j=g(this.o,this),this.c=new yu,this.s=new bu,this.g=new function(t){this.a=t,this.b=xs()}(this.l+":"+this.u),this.b={},this.b.unknown=this.c,this.b.signInViaRedirect=this.c,this.b.linkViaRedirect=this.c,this.b.reauthViaRedirect=this.c,this.b.signInViaPopup=this.s,this.b.linkViaPopup=this.s,this.b.reauthViaPopup=this.s,this.a=su(this.v,this.l,this.u,Qa)}function su(t,n,r,i){var o=e.SDK_VERSION||null;return zn()?new Js(t,n,r,o,i):new as(t,n,r,o,i)}function uu(t){t.f||(t.f=!0,t.a.va(t.j));var e=t.a;return t.a.ea().m(function(n){throw t.a==e&&t.reset(),n})}function cu(t){t.a.Gb()&&uu(t).m(function(e){var n=new Bi("unknown",null,null,null,new Fr("operation-not-supported-in-this-environment"));pu(e)&&t.o(n)}),t.a.Bb()||_u(t.c)}au.prototype.reset=function(){this.f=!1,this.a.Ja(this.j),this.a=su(this.v,this.l,this.u)},au.prototype.subscribe=function(t){if(F(this.h,t)||this.h.push(t),!this.f){var e=this;(function(t){return t.b.get(iu,t.a).then(function(t){return"pending"==t})})(this.g).then(function(t){t?ou(e.g).then(function(){uu(e).m(function(t){var n=new Bi("unknown",null,null,null,new Fr("operation-not-supported-in-this-environment"));pu(t)&&e.o(n)})}):cu(e)}).m(function(){cu(e)})}},au.prototype.unsubscribe=function(t){j(this.h,function(e){return e==t})},au.prototype.o=function(t){if(!t)throw new Fr("invalid-auth-event");for(var e=!1,n=0;n<this.h.length;n++){var r=this.h[n];if(r.qb(t.b,t.c)){(e=this.b[t.b])&&e.h(t,r),e=!0;break}}return _u(this.c),e};var lu=new gr(2e3,1e4),hu=new gr(3e4,6e4);function fu(t,e,n,r,i,o){return t.a.xb(e,n,r,function(){t.f||(t.f=!0,t.a.va(t.j))},function(){t.reset()},i,o)}function pu(t){return!(!t||"auth/cordova-not-ready"!=t.code)}au.prototype.da=function(){return this.c.da()},au.prototype.Ba=function(t,e,n){var r,i=this;return function(t){return t.b.set(iu,"pending",t.a)}(this.g).then(function(){return i.a.Ba(t,e,n).m(function(t){if(pu(t))throw new Fr("operation-not-supported-in-this-environment");return r=t,ou(i.g).then(function(){throw r})}).then(function(){return i.a.Lb()?new yt(function(){}):ou(i.g).then(function(){return i.da()}).then(function(){}).m(function(){})})})},au.prototype.Da=function(t,e,n,r){return this.a.Da(n,function(n){t.ga(e,null,n,r)},lu.get())};var du={};function vu(t,e,n){var r=e+":"+n;return du[r]||(du[r]=new au(t,e,n)),du[r]}function yu(){this.b=null,this.f=[],this.c=[],this.a=null,this.g=!1}function _u(t){t.g||(t.g=!0,mu(t,!1,null,null))}function gu(t,e){if(t.b=function(){return Ct(e)},t.f.length)for(var n=0;n<t.f.length;n++)t.f[n](e)}function mu(t,e,n,r){e?r?function(t,e){if(t.b=function(){return Tt(e)},t.c.length)for(var n=0;n<t.c.length;n++)t.c[n](e)}(t,r):gu(t,n):gu(t,{user:null}),t.f=[],t.c=[]}function bu(){}function wu(t,e){this.a=e,Sr(this,"verificationId",t)}function Eu(t,e,n,r){return new Mi(t).Sa(e,n).then(function(t){return new wu(t,r)})}function Cu(t,e,n){if(this.h=t,this.j=e,this.g=n,this.c=3e4,this.f=96e4,this.b=null,this.a=this.c,this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!")}function Tu(t){this.f=t,this.b=this.a=null,this.c=0}function Su(t,e){var n=e[Yo],r=e.refreshToken;e=Iu(e.expiresIn),t.b=n,t.c=e,t.a=r}function Iu(t){return b()+1e3*parseInt(t,10)}function Nu(t,e){return function(t,e){return new yt(function(n,r){"refresh_token"==e.grant_type&&e.refresh_token||"authorization_code"==e.grant_type&&e.code?ia(t,t.j+"?key="+encodeURIComponent(t.b),function(t){t?t.error?r(Ga(t)):t.access_token&&t.refresh_token?n(t):r(new Fr("internal-error")):r(new Fr("network-request-failed"))},"POST",sn(e).toString(),t.f,t.l.get()):r(new Fr("internal-error"))})}(t.f,e).then(function(e){return t.b=e.access_token,t.c=Iu(e.expires_in),t.a=e.refresh_token,{accessToken:t.b,expirationTime:t.c,refreshToken:t.a}}).m(function(e){throw"auth/user-token-expired"==e.code&&(t.a=null),e})}function Au(t,e){this.a=t||null,this.b=e||null,Ir(this,{lastSignInTime:br(e||null),creationTime:br(t||null)})}function Ou(t,e){for(var n in se.call(this,t),e)this[n]=e[n]}function ku(t,n,r){this.D=[],this.G=t.apiKey,this.s=t.appName,this.B=t.authDomain||null,t=e.SDK_VERSION?ir(e.SDK_VERSION):null,this.b=new zo(this.G,Xa(Qa),t),this.h=new Tu(this.b),Fu(this,n[Yo]),Su(this.h,n),Sr(this,"refreshToken",this.h.a),Bu(this,r||{}),ke.call(this),this.I=!1,this.B&&ur()&&(this.a=vu(this.B,this.G,this.s)),this.N=[],this.j=null,this.l=function(t){return new Cu(function(){return t.F(!0)},function(t){return!(!t||"auth/network-request-failed"!=t.code)},function(){var e=t.h.c-b()-3e5;return 0<e?e:0})}(this),this.V=g(this.Ga,this);var i=this;this.ia=null,this.sa=function(t){i.na(t.g)},this.X=null,this.O=[],this.ra=function(t){Pu(i,t.c)},this.W=null}function Ru(t,e){t.X&&we(t.X,"languageCodeChanged",t.sa),(t.X=e)&&ge(e,"languageCodeChanged",t.sa)}function Pu(t,n){t.O=n,ra(t.b,e.SDK_VERSION?ir(e.SDK_VERSION,t.O):null)}function Du(t,e){t.W&&we(t.W,"frameworkChanged",t.ra),(t.W=e)&&ge(e,"frameworkChanged",t.ra)}function xu(t){try{return e.app(t.s).auth()}catch(e){throw new Fr("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+t.s+"'!")}}function Lu(t){t.o||t.l.b||(t.l.start(),we(t,"tokenChanged",t.V),ge(t,"tokenChanged",t.V))}function Mu(t){we(t,"tokenChanged",t.V),t.l.stop()}function Fu(t,e){t.qa=e,Sr(t,"_lat",e)}function Uu(t){for(var e=[],n=0;n<t.N.length;n++)e.push(t.N[n](t));return function(t){return new yt(function(e){var n=t.length,r=[];if(n)for(var i=function(t,i,o){n--,r[t]=i?{Zb:!0,value:o}:{Zb:!1,reason:o},0==n&&e(r)},o=0;o<t.length;o++)St(t[o],m(i,o,!0),m(i,o,!1));else e(r)})}(e).then(function(){return t})}function ju(t){t.a&&!t.I&&(t.I=!0,t.a.subscribe(t))}function Bu(t,e){Ir(t,{uid:e.uid,displayName:e.displayName||null,photoURL:e.photoURL||null,email:e.email||null,emailVerified:e.emailVerified||!1,phoneNumber:e.phoneNumber||null,isAnonymous:e.isAnonymous||!1,metadata:new Au(e.createdAt,e.lastLoginAt),providerData:[]})}function Wu(){}function Vu(t){return Ct().then(function(){if(t.o)throw new Fr("app-deleted")})}function $u(t){return L(t.providerData,function(t){return t.providerId})}function qu(t,e){e&&(Hu(t,e.providerId),t.providerData.push(e))}function Hu(t,e){j(t.providerData,function(t){return t.providerId==e})}function Ku(t,e,n){("uid"!=e||n)&&t.hasOwnProperty(e)&&Sr(t,e,n)}function Gu(t,e){t!=e&&(Ir(t,{uid:e.uid,displayName:e.displayName,photoURL:e.photoURL,email:e.email,emailVerified:e.emailVerified,phoneNumber:e.phoneNumber,isAnonymous:e.isAnonymous,providerData:[]}),e.metadata?Sr(t,"metadata",function(t){return new Au(t.a,t.b)}(e.metadata)):Sr(t,"metadata",new Au),x(e.providerData,function(e){qu(t,e)}),t.h=e.h,Sr(t,"refreshToken",t.h.a))}function Qu(t){return t.F().then(function(e){var n=t.isAnonymous;return function(t,e){return Ha(t.b,Ia,{idToken:e}).then(g(t.uc,t))}(t,e).then(function(){return n||Ku(t,"isAnonymous",!1),e})})}function zu(t,e){e[Yo]&&t.qa!=e[Yo]&&(Su(t.h,e),t.dispatchEvent(new Ou("tokenChanged")),Fu(t,e[Yo]),Ku(t,"refreshToken",t.h.a))}function Xu(t,e){return Qu(t).then(function(){if(F($u(t),e))return Uu(t).then(function(){throw new Fr("provider-already-linked")})})}function Yu(t,e,n){return Nr({user:t,credential:Ui(e),additionalUserInfo:e=si(e),operationType:n})}function Ju(t,e){return zu(t,e),t.reload().then(function(){return t})}function Zu(t,n,r,i,o){if(!ur())return Tt(new Fr("operation-not-supported-in-this-environment"));if(t.j&&!o)return Tt(t.j);var a=ai(r.providerId),s=vr(t.uid+":::"),u=null;(!hr()||Xn())&&t.B&&r.isOAuthProvider&&(u=ls(t.B,t.G,t.s,n,r,null,s,e.SDK_VERSION||null));var c=Kn(u,a&&a.Aa,a&&a.za);return i=i().then(function(){if(ec(t),!o)return t.F().then(function(){})}).then(function(){return fu(t.a,c,n,r,s,!!u)}).then(function(){return new yt(function(e,r){t.ga(n,null,new Fr("cancelled-popup-request"),t.g||null),t.f=e,t.v=r,t.g=s,t.c=t.a.Da(t,n,c,s)})}).then(function(t){return c&&Hn(c),t?Nr(t):null}).m(function(t){throw c&&Hn(c),t}),nc(t,i,o)}function tc(t,e,n,r,i){if(!ur())return Tt(new Fr("operation-not-supported-in-this-environment"));if(t.j&&!i)return Tt(t.j);var o=null,a=vr(t.uid+":::");return r=r().then(function(){if(ec(t),!i)return t.F().then(function(){})}).then(function(){return t.$=a,Uu(t)}).then(function(e){return t.fa&&(e=(e=t.fa).b.set(ic,t.C(),e.a)),e}).then(function(){return t.a.Ba(e,n,a)}).m(function(e){if(o=e,t.fa)return oc(t.fa);throw o}).then(function(){if(o)throw o}),nc(t,r,i)}function ec(t){if(!t.a||!t.I){if(t.a&&!t.I)throw new Fr("internal-error");throw new Fr("auth-domain-config-required")}}function nc(t,e,n){var r=function(t,e,n){return t.j&&!n?(e.cancel(),Tt(t.j)):e.m(function(e){throw!e||"auth/user-disabled"!=e.code&&"auth/user-token-expired"!=e.code||(t.j||t.dispatchEvent(new Ou("userInvalidated")),t.j=e),e})}(t,e,n);return t.D.push(r),r.ha(function(){U(t.D,r)}),r}function rc(t){if(!t.apiKey)return null;var e={apiKey:t.apiKey,authDomain:t.authDomain,appName:t.appName},n={};if(!(t.stsTokenManager&&t.stsTokenManager.accessToken&&t.stsTokenManager.expirationTime))return null;n[Yo]=t.stsTokenManager.accessToken,n.refreshToken=t.stsTokenManager.refreshToken||null,n.expiresIn=(t.stsTokenManager.expirationTime-b())/1e3;var r=new ku(e,n,t);return t.providerData&&x(t.providerData,function(t){t&&qu(r,Nr(t))}),t.redirectEventId&&(r.$=t.redirectEventId),r}yu.prototype.reset=function(){this.b=null,this.a&&(this.a.cancel(),this.a=null)},yu.prototype.h=function(t,e){if(t){this.reset(),this.g=!0;var n=t.b,r=t.c,i=t.a&&"auth/web-storage-unsupported"==t.a.code,o=t.a&&"auth/operation-not-supported-in-this-environment"==t.a.code;"unknown"!=n||i||o?t.a?(mu(this,!0,null,t.a),Ct()):e.wa(n,r)?function(t,e,n){n=n.wa(e.b,e.c);var r=e.f,i=e.g,o=!!e.b.match(/Redirect$/);n(r,i).then(function(e){mu(t,o,e,null)}).m(function(e){mu(t,o,null,e)})}(this,t,e):Tt(new Fr("invalid-auth-event")):(mu(this,!1,null,null),Ct())}else Tt(new Fr("invalid-auth-event"))},yu.prototype.da=function(){var t=this;return new yt(function(e,n){t.b?t.b().then(e,n):(t.f.push(e),t.c.push(n),function(t){var e=new Fr("timeout");t.a&&t.a.cancel(),t.a=Le(hu.get()).then(function(){t.b||mu(t,!0,null,e)})}(t))})},bu.prototype.h=function(t,e){if(t){var n=t.b,r=t.c;t.a?(e.ga(t.b,null,t.a,t.c),Ct()):e.wa(n,r)?function(t,e){var n=t.c,r=t.b;e.wa(r,n)(t.f,t.g).then(function(t){e.ga(r,t,null,n)}).m(function(t){e.ga(r,null,t,n)})}(t,e):Tt(new Fr("invalid-auth-event"))}else Tt(new Fr("invalid-auth-event"))},wu.prototype.confirm=function(t){return t=Fi(this.verificationId,t),this.a(t)},Cu.prototype.start=function(){this.a=this.c,function t(e,n){e.stop();e.b=Le(function(t,e){return e?(t.a=t.c,t.g()):(e=t.a,t.a*=2,t.a>t.f&&(t.a=t.f),e)}(e,n)).then(function(){return t=i.document,e=null,mr()||!t?Ct():new yt(function(n){e=function(){mr()&&(t.removeEventListener("visibilitychange",e,!1),n())},t.addEventListener("visibilitychange",e,!1)}).m(function(n){throw t.removeEventListener("visibilitychange",e,!1),n});var t,e}).then(function(){return e.h()}).then(function(){t(e,!0)}).m(function(n){e.j(n)&&t(e,!1)})}(this,!0)},Cu.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null)},Tu.prototype.C=function(){return{apiKey:this.f.b,refreshToken:this.a,accessToken:this.b,expirationTime:this.c}},Tu.prototype.getToken=function(t){return t=!!t,this.b&&!this.a?Tt(new Fr("user-token-expired")):t||!this.b||b()>this.c-3e4?this.a?Nu(this,{grant_type:"refresh_token",refresh_token:this.a}):Ct(null):Ct({accessToken:this.b,expirationTime:this.c,refreshToken:this.a})},Au.prototype.C=function(){return{lastLoginAt:this.b,createdAt:this.a}},w(Ou,se),w(ku,ke),ku.prototype.na=function(t){this.ia=t,na(this.b,t)},ku.prototype.ca=function(){return this.ia},ku.prototype.Ka=function(){return W(this.O)},ku.prototype.Ga=function(){this.l.b&&(this.l.stop(),this.l.start())},Sr(ku.prototype,"providerId","firebase"),(t=ku.prototype).reload=function(){var t=this;return nc(this,Vu(this).then(function(){return Qu(t).then(function(){return Uu(t)}).then(Wu)}))},t.ac=function(t){return this.F(t).then(function(t){return new function(t){var e=ni(t);if(!(e&&e.exp&&e.auth_time&&e.iat))throw new Fr("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");Ir(this,{token:t,expirationTime:br(1e3*e.exp),authTime:br(1e3*e.auth_time),issuedAtTime:br(1e3*e.iat),signInProvider:e.firebase&&e.firebase.sign_in_provider?e.firebase.sign_in_provider:null,claims:e})}(t)})},t.F=function(t){var e=this;return nc(this,Vu(this).then(function(){return e.h.getToken(t)}).then(function(t){if(!t)throw new Fr("internal-error");return t.accessToken!=e.qa&&(Fu(e,t.accessToken),e.dispatchEvent(new Ou("tokenChanged"))),Ku(e,"refreshToken",t.refreshToken),t.accessToken}))},t.getToken=function(t){return Cr["firebase.User.prototype.getToken is deprecated. Please use firebase.User.prototype.getIdToken instead."]||(Cr["firebase.User.prototype.getToken is deprecated. Please use firebase.User.prototype.getIdToken instead."]=!0,"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn("firebase.User.prototype.getToken is deprecated. Please use firebase.User.prototype.getIdToken instead.")),this.F(t)},t.uc=function(t){if(!(t=t.users)||!t.length)throw new Fr("internal-error");Bu(this,{uid:(t=t[0]).localId,displayName:t.displayName,photoURL:t.photoUrl,email:t.email,emailVerified:!!t.emailVerified,phoneNumber:t.phoneNumber,lastLoginAt:t.lastLoginAt,createdAt:t.createdAt});for(var e=function(t){return(t=t.providerUserInfo)&&t.length?L(t,function(t){return new function(t,e,n,r,i,o){Ir(this,{uid:t,displayName:r||null,photoURL:i||null,email:n||null,phoneNumber:o||null,providerId:e})}(t.rawId,t.providerId,t.email,t.displayName,t.photoUrl,t.phoneNumber)}):[]}(t),n=0;n<e.length;n++)qu(this,e[n]);Ku(this,"isAnonymous",!(this.email&&t.passwordHash||this.providerData&&this.providerData.length))},t.bb=function(t){var e=this,n=null;return nc(this,t.f(this.b,this.uid).then(function(t){return zu(e,t),n=Yu(e,t,"reauthenticate"),e.j=null,e.reload()}).then(function(){return n}),!0)},t.vc=function(t){return this.bb(t).then(function(){})},t.$a=function(t){var e=this,n=null;return nc(this,Xu(this,t.providerId).then(function(){return e.F()}).then(function(n){return t.c(e.b,n)}).then(function(t){return n=Yu(e,t,"link"),Ju(e,t)}).then(function(){return n}))},t.mc=function(t){return this.$a(t).then(function(t){return t.user})},t.nc=function(t,e){var n=this;return nc(this,Xu(this,"phone").then(function(){return Eu(xu(n),t,e,g(n.$a,n))}))},t.wc=function(t,e){var n=this;return nc(this,Ct().then(function(){return Eu(xu(n),t,e,g(n.bb,n))}),!0)},t.mb=function(t){var e=this;return nc(this,this.F().then(function(n){return e.b.mb(n,t)}).then(function(t){return zu(e,t),e.reload()}))},t.Nc=function(t){var e=this;return nc(this,this.F().then(function(n){return t.c(e.b,n)}).then(function(t){return zu(e,t),e.reload()}))},t.nb=function(t){var e=this;return nc(this,this.F().then(function(n){return e.b.nb(n,t)}).then(function(t){return zu(e,t),e.reload()}))},t.ob=function(t){if(void 0===t.displayName&&void 0===t.photoURL)return Vu(this);var e=this;return nc(this,this.F().then(function(n){return e.b.ob(n,{displayName:t.displayName,photoUrl:t.photoURL})}).then(function(t){return zu(e,t),Ku(e,"displayName",t.displayName||null),Ku(e,"photoURL",t.photoUrl||null),x(e.providerData,function(t){"password"===t.providerId&&(Sr(t,"displayName",e.displayName),Sr(t,"photoURL",e.photoURL))}),Uu(e)}).then(Wu))},t.Mc=function(t){var e=this;return nc(this,Qu(this).then(function(n){return F($u(e),t)?function(t,e,n){return Ha(t,Ca,{idToken:e,deleteProvider:n})}(e.b,n,[t]).then(function(t){var n={};return x(t.providerUserInfo||[],function(t){n[t.providerId]=!0}),x($u(e),function(t){n[t]||Hu(e,t)}),n[Mi.PROVIDER_ID]||Sr(e,"phoneNumber",null),Uu(e)}):Uu(e).then(function(){throw new Fr("no-such-provider")})}))},t.delete=function(){var t=this;return nc(this,this.F().then(function(e){return Ha(t.b,Ea,{idToken:e})}).then(function(){t.dispatchEvent(new Ou("userDeleted"))})).then(function(){for(var e=0;e<t.D.length;e++)t.D[e].cancel("app-deleted");Ru(t,null),Du(t,null),t.D=[],t.o=!0,Mu(t),Sr(t,"refreshToken",null),t.a&&t.a.unsubscribe(t)})},t.qb=function(t,e){return!!("linkViaPopup"==t&&(this.g||null)==e&&this.f||"reauthViaPopup"==t&&(this.g||null)==e&&this.f||"linkViaRedirect"==t&&(this.$||null)==e||"reauthViaRedirect"==t&&(this.$||null)==e)},t.ga=function(t,e,n,r){"linkViaPopup"!=t&&"reauthViaPopup"!=t||r!=(this.g||null)||(n&&this.v?this.v(n):e&&!n&&this.f&&this.f(e),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v)},t.wa=function(t,e){return"linkViaPopup"==t&&e==(this.g||null)?g(this.vb,this):"reauthViaPopup"==t&&e==(this.g||null)?g(this.wb,this):"linkViaRedirect"==t&&(this.$||null)==e?g(this.vb,this):"reauthViaRedirect"==t&&(this.$||null)==e?g(this.wb,this):null},t.oc=function(t){var e=this;return Zu(this,"linkViaPopup",t,function(){return Xu(e,t.providerId).then(function(){return Uu(e)})},!1)},t.xc=function(t){return Zu(this,"reauthViaPopup",t,function(){return Ct()},!0)},t.pc=function(t){var e=this;return tc(this,"linkViaRedirect",t,function(){return Xu(e,t.providerId)},!1)},t.yc=function(t){return tc(this,"reauthViaRedirect",t,function(){return Ct()},!0)},t.vb=function(t,e){var n=this;this.c&&(this.c.cancel(),this.c=null);var r=null;return nc(this,this.F().then(function(r){return va(n.b,{requestUri:t,sessionId:e,idToken:r})}).then(function(t){return r=Yu(n,t,"link"),Ju(n,t)}).then(function(){return r}))},t.wb=function(t,e){var n=this;this.c&&(this.c.cancel(),this.c=null);var r=null;return nc(this,Ct().then(function(){return _i(ya(n.b,{requestUri:t,sessionId:e}),n.uid)}).then(function(t){return r=Yu(n,t,"reauthenticate"),zu(n,t),n.j=null,n.reload()}).then(function(){return r}),!0)},t.fb=function(t){var e=this,n=null;return nc(this,this.F().then(function(e){return n=e,void 0===t||ot(t)?{}:Xr(new Wr(t))}).then(function(t){return e.b.fb(n,t)}).then(function(t){if(e.email!=t)return e.reload()}).then(function(){}))},t.toJSON=function(){return this.C()},t.C=function(){var t={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,providerData:[],apiKey:this.G,appName:this.s,authDomain:this.B,stsTokenManager:this.h.C(),redirectEventId:this.$||null};return this.metadata&&lt(t,this.metadata.C()),x(this.providerData,function(e){t.providerData.push(function(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&(n[e]=t[e]);return n}(e))}),t};var ic={name:"redirectUser",w:"session"};function oc(t){return Fs(t.b,ic,t.a)}function ac(t){this.a=t,this.b=xs(),this.c=null,this.f=function(t){var e=cc("local"),n=cc("session"),r=cc("none");return function(t,e,n){var r=Ms(e,n),o=Ls(t,e.w);return t.get(e,n).then(function(a){var s=null;try{s=dr(i.localStorage.getItem(r))}catch(t){}if(s&&!a)return i.localStorage.removeItem(r),t.set(e,s,n);s&&a&&"localStorage"!=o.type&&i.localStorage.removeItem(r)})}(t.b,e,t.a).then(function(){return t.b.get(n,t.a)}).then(function(i){return i?n:t.b.get(r,t.a).then(function(n){return n?r:t.b.get(e,t.a).then(function(n){return n?e:t.b.get(uc,t.a).then(function(t){return t?cc(t):e})})})}).then(function(e){return t.c=e,sc(t,e.w)}).m(function(){t.c||(t.c=e)})}(this),this.b.addListener(cc("local"),this.a,g(this.g,this))}function sc(t,e){var n,r=[];for(n in Ps)Ps[n]!==e&&r.push(Fs(t.b,cc(Ps[n]),t.a));return r.push(Fs(t.b,uc,t.a)),function(t){return new yt(function(e,n){var r=t.length,i=[];if(r)for(var o=function(t,n){r--,i[t]=n,0==r&&e(i)},a=function(t){n(t)},s=0;s<t.length;s++)St(t[s],m(o,s),a);else e(i)})}(r)}ac.prototype.g=function(){var t=this,e=cc("local");pc(this,function(){return Ct().then(function(){return t.c&&"local"!=t.c.w?t.b.get(e,t.a):null}).then(function(n){if(n)return sc(t,"local").then(function(){t.c=e})})})};var uc={name:"persistence",w:"session"};function cc(t){return{name:"authUser",w:t}}function lc(t,e){return pc(t,function(){return t.b.set(t.c,e.C(),t.a)})}function hc(t){return pc(t,function(){return Fs(t.b,t.c,t.a)})}function fc(t,e){return pc(t,function(){return t.b.get(t.c,t.a).then(function(t){return t&&e&&(t.authDomain=e),rc(t||{})})})}function pc(t,e){return t.f=t.f.then(e,e),t.f}function dc(t){if(this.l=!1,Sr(this,"app",t),!wc(this).options||!wc(this).options.apiKey)throw new Fr("invalid-api-key");t=e.SDK_VERSION?ir(e.SDK_VERSION):null,this.b=new zo(wc(this).options&&wc(this).options.apiKey,Xa(Qa),t),this.N=[],this.o=[],this.I=[],this.Ob=e.INTERNAL.createSubscribe(g(this.ic,this)),this.O=void 0,this.Pb=e.INTERNAL.createSubscribe(g(this.jc,this)),mc(this,null),this.h=new ac(wc(this).options.apiKey+":"+wc(this).name),this.G=new function(t){this.a=t,this.b=xs()}(wc(this).options.apiKey+":"+wc(this).name),this.V=Sc(this,function(t){var e=wc(t).options.authDomain,n=function(t){var e=function(t,e){return t.b.get(ic,t.a).then(function(t){return t&&e&&(t.authDomain=e),rc(t||{})})}(t.G,wc(t).options.authDomain).then(function(e){return(t.B=e)&&(e.fa=t.G),oc(t.G)});return Sc(t,e)}(t).then(function(){return fc(t.h,e)}).then(function(e){return e?(e.fa=t.G,t.B&&(t.B.$||null)==(e.$||null)?e:e.reload().then(function(){return lc(t.h,e).then(function(){return e})}).m(function(n){return"auth/network-request-failed"==n.code?e:hc(t.h)})):null}).then(function(e){mc(t,e||null)});return Sc(t,n)}(this)),this.j=Sc(this,function(t){return t.V.then(function(){return t.da()}).m(function(){}).then(function(){if(!t.l)return t.ia()}).m(function(){}).then(function(){if(!t.l){t.X=!0;var e=t.h;e.b.addListener(cc("local"),e.a,t.ia)}})}(this)),this.X=!1,this.ia=g(this.Ic,this),this.Ga=g(this.ka,this),this.qa=g(this.Yb,this),this.ra=g(this.gc,this),this.sa=g(this.hc,this),function(t){var e=wc(t).options.authDomain,n=wc(t).options.apiKey;e&&ur()&&(t.Nb=t.V.then(function(){if(!t.l){if(t.a=vu(e,n,wc(t).name),t.a.subscribe(t),Ec(t)&&ju(Ec(t)),t.B){ju(t.B);var r=t.B;r.na(t.ca()),Ru(r,t),Pu(r=t.B,t.D),Du(r,t),t.B=null}return t.a}}))}(this),this.INTERNAL={},this.INTERNAL.delete=g(this.delete,this),this.INTERNAL.logFramework=g(this.qc,this),this.s=0,ke.call(this),function(t){Object.defineProperty(t,"lc",{get:function(){return this.ca()},set:function(t){this.na(t)},enumerable:!1}),t.W=null}(this),this.D=[]}function vc(t){se.call(this,"languageCodeChanged"),this.g=t}function yc(t){se.call(this,"frameworkChanged"),this.c=t}function _c(t){return t.Nb||Tt(new Fr("auth-domain-config-required"))}function gc(t,e){var n={};return n.apiKey=wc(t).options.apiKey,n.authDomain=wc(t).options.authDomain,n.appName=wc(t).name,t.V.then(function(){return function(t,e,n,r){var i=new ku(t,e);return n&&(i.fa=n),r&&Pu(i,r),i.reload().then(function(){return i})}(n,e,t.G,t.Ka())}).then(function(e){return Ec(t)&&e.uid==Ec(t).uid?(Gu(Ec(t),e),t.ka(e)):(mc(t,e),ju(e),t.ka(e))}).then(function(){Tc(t)})}function mc(t,e){Ec(t)&&(function(t,e){j(t.N,function(t){return t==e})}(Ec(t),t.Ga),we(Ec(t),"tokenChanged",t.qa),we(Ec(t),"userDeleted",t.ra),we(Ec(t),"userInvalidated",t.sa),Mu(Ec(t))),e&&(e.N.push(t.Ga),ge(e,"tokenChanged",t.qa),ge(e,"userDeleted",t.ra),ge(e,"userInvalidated",t.sa),0<t.s&&Lu(e)),Sr(t,"currentUser",e),e&&(e.na(t.ca()),Ru(e,t),Pu(e,t.D),Du(e,t))}function bc(t,e){var n=null,r=null;return Sc(t,e.then(function(e){return n=Ui(e),r=si(e),gc(t,e)}).then(function(){return Nr({user:Ec(t),credential:n,additionalUserInfo:r,operationType:"signIn"})}))}function wc(t){return t.app}function Ec(t){return t.currentUser}function Cc(t){return Ec(t)&&Ec(t)._lat||null}function Tc(t){if(t.X){for(var e=0;e<t.o.length;e++)t.o[e]&&t.o[e](Cc(t));if(t.O!==t.getUid()&&t.I.length)for(t.O=t.getUid(),e=0;e<t.I.length;e++)t.I[e]&&t.I[e](Cc(t))}}function Sc(t,e){return t.N.push(e),e.ha(function(){U(t.N,e)}),e}function Ic(t,e,n,r,o,a){if(Sr(this,"type","recaptcha"),this.b=this.c=null,this.o=!1,this.l=e,this.a=n||{theme:"light",type:"image"},this.g=[],this.a[Oc])throw new Fr("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");if(this.h="invisible"===this.a[kc],!i.document)throw new Fr("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");if(!Pn(e)||!this.h&&Pn(e).hasChildNodes())throw new Fr("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.u=new zo(t,a||null,o||null),this.s=r||function(){return null};var s=this;this.j=[];var u=this.a[Nc];this.a[Nc]=function(t){if(Rc(s,t),"function"==typeof u)u(t);else if("string"==typeof u){var e=ar(u,i);"function"==typeof e&&e(t)}};var c=this.a[Ac];this.a[Ac]=function(){if(Rc(s,null),"function"==typeof c)c();else if("string"==typeof c){var t=ar(c,i);"function"==typeof t&&t()}}}ac.prototype.ib=function(t){var e=null,n=this;return function(t){var e=new Fr("invalid-persistence-type"),n=new Fr("unsupported-persistence-type");t:{for(r in Ps)if(Ps[r]==t){var r=!0;break t}r=!1}if(!r||"string"!=typeof t)throw e;switch(Jn()){case"ReactNative":if("session"===t)throw n;break;case"Node":if("none"!==t)throw n;break;default:if(!sr()&&"none"!==t)throw n}}(t),pc(this,function(){return t!=n.c.w?n.b.get(n.c,n.a).then(function(r){return e=r,sc(n,t)}).then(function(){if(n.c=cc(t),e)return n.b.set(n.c,e,n.a)}):Ct()})},w(dc,ke),w(vc,se),w(yc,se),(t=dc.prototype).ib=function(t){return Sc(this,t=this.h.ib(t))},t.na=function(t){this.W===t||this.l||(this.W=t,na(this.b,this.W),this.dispatchEvent(new vc(this.ca())))},t.ca=function(){return this.W},t.Oc=function(){var t=i.navigator;this.na(t&&(t.languages&&t.languages[0]||t.language||t.userLanguage)||null)},t.qc=function(t){this.D.push(t),ra(this.b,e.SDK_VERSION?ir(e.SDK_VERSION,this.D):null),this.dispatchEvent(new yc(this.D))},t.Ka=function(){return W(this.D)},t.toJSON=function(){return{apiKey:wc(this).options.apiKey,authDomain:wc(this).options.authDomain,appName:wc(this).name,currentUser:Ec(this)&&Ec(this).C()}},t.qb=function(t,e){switch(t){case"unknown":case"signInViaRedirect":return!0;case"signInViaPopup":return this.g==e&&!!this.f;default:return!1}},t.ga=function(t,e,n,r){"signInViaPopup"==t&&this.g==r&&(n&&this.v?this.v(n):e&&!n&&this.f&&this.f(e),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v)},t.wa=function(t,e){return"signInViaRedirect"==t||"signInViaPopup"==t&&this.g==e&&this.f?g(this.Xb,this):null},t.Xb=function(t,e){var n=this;t={requestUri:t,sessionId:e},this.c&&(this.c.cancel(),this.c=null);var r=null,i=null,o=da(n.b,t).then(function(t){return r=Ui(t),i=si(t),t});return Sc(this,t=n.V.then(function(){return o}).then(function(t){return gc(n,t)}).then(function(){return Nr({user:Ec(n),credential:r,additionalUserInfo:i,operationType:"signIn"})}))},t.Gc=function(t){if(!ur())return Tt(new Fr("operation-not-supported-in-this-environment"));var n=this,r=ai(t.providerId),i=vr(),o=null;(!hr()||Xn())&&wc(this).options.authDomain&&t.isOAuthProvider&&(o=ls(wc(this).options.authDomain,wc(this).options.apiKey,wc(this).name,"signInViaPopup",t,null,i,e.SDK_VERSION||null));var a=Kn(o,r&&r.Aa,r&&r.za);return Sc(this,r=_c(this).then(function(e){return fu(e,a,"signInViaPopup",t,i,!!o)}).then(function(){return new yt(function(t,e){n.ga("signInViaPopup",null,new Fr("cancelled-popup-request"),n.g),n.f=t,n.v=e,n.g=i,n.c=n.a.Da(n,"signInViaPopup",a,i)})}).then(function(t){return a&&Hn(a),t?Nr(t):null}).m(function(t){throw a&&Hn(a),t}))},t.Hc=function(t){if(!ur())return Tt(new Fr("operation-not-supported-in-this-environment"));var e=this;return Sc(this,_c(this).then(function(){return pc(t=e.h,function(){return t.b.set(uc,t.c.w,t.a)});var t}).then(function(){return e.a.Ba("signInViaRedirect",t)}))},t.da=function(){if(!ur())return Tt(new Fr("operation-not-supported-in-this-environment"));var t=this;return Sc(this,_c(this).then(function(){return t.a.da()}).then(function(t){return t?Nr(t):null}))},t.kb=function(){var t=this;return Sc(this,this.j.then(function(){return Ec(t)?(mc(t,null),hc(t.h).then(function(){Tc(t)})):Ct()}))},t.Ic=function(){var t=this;return fc(this.h,wc(this).options.authDomain).then(function(e){if(!t.l){var n;if(n=Ec(t)&&e){n=Ec(t).uid;var r=e.uid;n=void 0!==n&&null!==n&&""!==n&&void 0!==r&&null!==r&&""!==r&&n==r}if(n)return Gu(Ec(t),e),Ec(t).F();(Ec(t)||e)&&(mc(t,e),e&&(ju(e),e.fa=t.G),t.a&&t.a.subscribe(t),Tc(t))}})},t.ka=function(t){return lc(this.h,t)},t.Yb=function(){Tc(this),this.ka(Ec(this))},t.gc=function(){this.kb()},t.hc=function(){this.kb()},t.ic=function(t){var e=this;this.addAuthTokenListener(function(){t.next(Ec(e))})},t.jc=function(t){var e=this;!function(t,e){t.I.push(e),Sc(t,t.j.then(function(){!t.l&&F(t.I,e)&&t.O!==t.getUid()&&(t.O=t.getUid(),e(Cc(t)))}))}(this,function(){t.next(Ec(e))})},t.sc=function(t,n,r){var i=this;return this.X&&e.Promise.resolve().then(function(){f(t)?t(Ec(i)):f(t.next)&&t.next(Ec(i))}),this.Ob(t,n,r)},t.rc=function(t,n,r){var i=this;return this.X&&e.Promise.resolve().then(function(){i.O=i.getUid(),f(t)?t(Ec(i)):f(t.next)&&t.next(Ec(i))}),this.Pb(t,n,r)},t.$b=function(t){var e=this;return Sc(this,this.j.then(function(){return Ec(e)?Ec(e).F(t).then(function(t){return{accessToken:t}}):null}))},t.Cc=function(t){return this.Hb(t).then(function(t){return t.user})},t.Hb=function(t){var e=this;return this.j.then(function(){return bc(e,Ha(e.b,Ba,{token:t}))}).then(function(t){var n=t.user;return Ku(n,"isAnonymous",!1),e.ka(n),t})},t.Ib=function(t,e){var n=this;return this.j.then(function(){return bc(n,Ha(n.b,Wa,{email:t,password:e}))})},t.Dc=function(t,e){return this.Ib(t,e).then(function(t){return t.user})},t.Sb=function(t,e){return this.sb(t,e).then(function(t){return t.user})},t.sb=function(t,e){var n=this;return this.j.then(function(){return bc(n,Ha(n.b,ba,{email:t,password:e}))})},t.Bc=function(t){return this.Oa(t).then(function(t){return t.user})},t.Oa=function(t){var e=this;return this.j.then(function(){return bc(e,t.xa(e.b))})},t.jb=function(){return this.Jb().then(function(t){return t.user})},t.Jb=function(){var t=this;return this.j.then(function(){var e=Ec(t);return e&&e.isAnonymous?Nr({user:e,credential:null,additionalUserInfo:Nr({providerId:null,isNewUser:!1}),operationType:"signIn"}):bc(t,t.b.jb()).then(function(e){var n=e.user;return Ku(n,"isAnonymous",!0),t.ka(n),e})})},t.getUid=function(){return Ec(this)&&Ec(this).uid||null},t.Qb=function(t){this.addAuthTokenListener(t),this.s++,0<this.s&&Ec(this)&&Lu(Ec(this))},t.zc=function(t){var e=this;x(this.o,function(n){n==t&&e.s--}),0>this.s&&(this.s=0),0==this.s&&Ec(this)&&Mu(Ec(this)),this.removeAuthTokenListener(t)},t.addAuthTokenListener=function(t){var e=this;this.o.push(t),Sc(this,this.j.then(function(){e.l||F(e.o,t)&&t(Cc(e))}))},t.removeAuthTokenListener=function(t){j(this.o,function(e){return e==t})},t.delete=function(){this.l=!0;for(var t=0;t<this.N.length;t++)this.N[t].cancel("app-deleted");return this.N=[],this.h&&(t=this.h).b.removeListener(cc("local"),t.a,this.ia),this.a&&this.a.unsubscribe(this),e.Promise.resolve()},t.Vb=function(t){return Sc(this,function(t,e){return Ha(t,wa,{identifier:e,continueUri:cr()?Vn():"http://localhost"}).then(function(t){return t.allProviders||[]})}(this.b,t))},t.Wb=function(t){return Sc(this,function(t,e){return Ha(t,wa,{identifier:e,continueUri:cr()?Vn():"http://localhost"}).then(function(t){return t.signinMethods||[]})}(this.b,t))},t.kc=function(t){return!!Di(t)},t.hb=function(t,e){var n=this;return Sc(this,Ct().then(function(){var t=new Wr(e);if(!t.c)throw new Fr("argument-error",$r+" must be true when sending sign in link to email");return Xr(t)}).then(function(e){return n.b.hb(t,e)}).then(function(){}))},t.Pc=function(t){return this.Ia(t).then(function(t){return t.data.email})},t.Wa=function(t,e){return Sc(this,this.b.Wa(t,e).then(function(){}))},t.Ia=function(t){return Sc(this,this.b.Ia(t).then(function(t){return new function(t){var e={},n=t[kr],r=t[Rr];if(!(t=t[Pr])||t!=Or&&!n)throw Error("Invalid provider user info!");e[xr]=r||null,e[Dr]=n||null,Sr(this,Mr,t),Sr(this,Lr,Ar(e))}(t)}))},t.Ua=function(t){return Sc(this,this.b.Ua(t).then(function(){}))},t.gb=function(t,e){var n=this;return Sc(this,Ct().then(function(){return void 0===e||ot(e)?{}:Xr(new Wr(e))}).then(function(e){return n.b.gb(t,e)}).then(function(){}))},t.Fc=function(t,e){return Sc(this,Eu(this,t,e,g(this.Oa,this)))},t.Ec=function(t,e){var n=this;return Sc(this,Ct().then(function(){var r=Pi(t,e||Vn());return n.Oa(r)}))};var Nc="callback",Ac="expired-callback",Oc="sitekey",kc="size";function Rc(t,e){for(var n=0;n<t.j.length;n++)try{t.j[n](e)}catch(t){}}function Pc(t,e){return t.g.push(e),e.ha(function(){U(t.g,e)}),e}function Dc(t){if(t.o)throw new Fr("internal-error","RecaptchaVerifier instance has been destroyed.")}(t=Ic.prototype).ya=function(){var t=this;return this.c?this.c:this.c=Pc(this,Ct().then(function(){if(cr()&&!Yn())return Qn();throw new Fr("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.")}).then(function(){return function(t,e){return new yt(function(n,r){var o=setTimeout(function(){r(new Fr("network-request-failed"))},Lc.get());if(!i.grecaptcha||e!==t.c&&!t.b){i[t.a]=function(){if(i.grecaptcha){t.c=e;var a=i.grecaptcha.render;i.grecaptcha.render=function(e,n){return e=a(e,n),t.b++,e},clearTimeout(o),n()}else clearTimeout(o),r(new Fr("internal-error"));delete i[t.a]};var a=mn(xc,{onload:t.a,hl:e||""});Ct(Vo(a)).m(function(){clearTimeout(o),r(new Fr("internal-error","Unable to load external reCAPTCHA dependencies!"))})}else clearTimeout(o),n()})}(Fc(),t.s())}).then(function(){return Ha(t.u,Ra,{})}).then(function(e){t.a[Oc]=e.recaptchaSiteKey}).m(function(e){throw t.c=null,e}))},t.render=function(){Dc(this);var t=this;return Pc(this,this.ya().then(function(){if(null===t.b){var e=t.l;if(!t.h){var n=Pn(e);e=Ln("DIV"),n.appendChild(e)}t.b=grecaptcha.render(e,t.a)}return t.b}))},t.verify=function(){Dc(this);var t=this;return Pc(this,this.render().then(function(e){return new yt(function(n){var r=grecaptcha.getResponse(e);if(r)n(r);else{var i=function(e){e&&(function(t,e){j(t.j,function(t){return t==e})}(t,i),n(e))};t.j.push(i),t.h&&grecaptcha.execute(t.b)}})}))},t.reset=function(){Dc(this),null!==this.b&&grecaptcha.reset(this.b)},t.clear=function(){Dc(this),this.o=!0,Fc().b--;for(var t=0;t<this.g.length;t++)this.g[t].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.h){t=Pn(this.l);for(var e;e=t.firstChild;)t.removeChild(e)}};var xc=yn("https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}");var Lc=new gr(3e4,6e4);var Mc=null;function Fc(){return Mc||(Mc=new function(){this.b=i.grecaptcha?1/0:0,this.c=null,this.a="__rcb"+Math.floor(1e6*Math.random()).toString()}),Mc}function Uc(t,n,r){try{this.f=r||e.app()}catch(t){throw new Fr("argument-error","No firebase.app.App instance is currently initialized.")}if(!this.f.options||!this.f.options.apiKey)throw new Fr("invalid-api-key");r=this.f.options.apiKey;var i=this,o=null;try{o=this.f.auth().Ka()}catch(t){}o=e.SDK_VERSION?ir(e.SDK_VERSION,o):null,Ic.call(this,r,t,n,function(){try{var t=i.f.auth().ca()}catch(e){t=null}return t},o,Xa(Qa))}function jc(t,e,n,r){t:{n=Array.prototype.slice.call(n);for(var i=0,o=!1,a=0;a<e.length;a++)if(e[a].optional)o=!0;else{if(o)throw new Fr("internal-error","Argument validator encountered a required argument after an optional argument.");i++}if(o=e.length,n.length<i||o<n.length)r="Expected "+(i==o?1==i?"1 argument":i+" arguments":i+"-"+o+" arguments")+" but got "+n.length+".";else{for(i=0;i<n.length;i++)if(o=e[i].optional&&void 0===n[i],!e[i].M(n[i])&&!o){if(e=e[i],0>i||i>=Bc.length)throw new Fr("internal-error","Argument validator received an unsupported number of arguments.");n=Bc[i],r=(r?"":n+" argument ")+(e.name?'"'+e.name+'" ':"")+"must be "+e.K+".";break t}r=null}}if(r)throw new Fr("argument-error",t+" failed: "+r)}w(Uc,Ic);var Bc="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function Wc(t,e){return{name:t||"",K:"a valid string",optional:!!e,M:o}}function Vc(){return{name:"opt_forceRefresh",K:"a boolean",optional:!0,M:a}}function $c(t,e){return{name:t||"",K:"a valid object",optional:!!e,M:p}}function qc(t,e){return{name:t||"",K:"a function",optional:!!e,M:f}}function Hc(t,e){return{name:t||"",K:"null",optional:!!e,M:c}}function Kc(t){return{name:t?t+"Credential":"credential",K:t?"a valid "+t+" credential":"a valid credential",optional:!1,M:function(e){if(!e)return!1;var n=!t||e.providerId===t;return!(!e.xa||!n)}}}function Gc(){return{name:"applicationVerifier",K:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,M:function(t){return!!(t&&o(t.type)&&f(t.verify))}}}function Qc(t,e,n,r){return{name:n||"",K:t.K+" or "+e.K,optional:!!r,M:function(n){return t.M(n)||e.M(n)}}}function zc(t,e){for(var n in e){var r=e[n].name;t[r]=Yc(r,t[n],e[n].i)}}function Xc(t,e,n,r){t[e]=Yc(e,n,r)}function Yc(t,e,n){function r(){var t=Array.prototype.slice.call(arguments);return jc(o,n,t),e.apply(this,t)}if(!n)return e;var i,o=function(t){return(t=t.split("."))[t.length-1]}(t);for(i in e)r[i]=e[i];for(i in e.prototype)r.prototype[i]=e.prototype[i];return r}zc(dc.prototype,{Ua:{name:"applyActionCode",i:[Wc("code")]},Ia:{name:"checkActionCode",i:[Wc("code")]},Wa:{name:"confirmPasswordReset",i:[Wc("code"),Wc("newPassword")]},Sb:{name:"createUserWithEmailAndPassword",i:[Wc("email"),Wc("password")]},sb:{name:"createUserAndRetrieveDataWithEmailAndPassword",i:[Wc("email"),Wc("password")]},Vb:{name:"fetchProvidersForEmail",i:[Wc("email")]},Wb:{name:"fetchSignInMethodsForEmail",i:[Wc("email")]},da:{name:"getRedirectResult",i:[]},kc:{name:"isSignInWithEmailLink",i:[Wc("emailLink")]},rc:{name:"onAuthStateChanged",i:[Qc($c(),qc(),"nextOrObserver"),qc("opt_error",!0),qc("opt_completed",!0)]},sc:{name:"onIdTokenChanged",i:[Qc($c(),qc(),"nextOrObserver"),qc("opt_error",!0),qc("opt_completed",!0)]},gb:{name:"sendPasswordResetEmail",i:[Wc("email"),Qc($c("opt_actionCodeSettings",!0),Hc(null,!0),"opt_actionCodeSettings",!0)]},hb:{name:"sendSignInLinkToEmail",i:[Wc("email"),$c("actionCodeSettings")]},ib:{name:"setPersistence",i:[Wc("persistence")]},Oa:{name:"signInAndRetrieveDataWithCredential",i:[Kc()]},jb:{name:"signInAnonymously",i:[]},Jb:{name:"signInAnonymouslyAndRetrieveData",i:[]},Bc:{name:"signInWithCredential",i:[Kc()]},Cc:{name:"signInWithCustomToken",i:[Wc("token")]},Hb:{name:"signInAndRetrieveDataWithCustomToken",i:[Wc("token")]},Dc:{name:"signInWithEmailAndPassword",i:[Wc("email"),Wc("password")]},Ec:{name:"signInWithEmailLink",i:[Wc("email"),Wc("emailLink",!0)]},Ib:{name:"signInAndRetrieveDataWithEmailAndPassword",i:[Wc("email"),Wc("password")]},Fc:{name:"signInWithPhoneNumber",i:[Wc("phoneNumber"),Gc()]},Gc:{name:"signInWithPopup",i:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Hc:{name:"signInWithRedirect",i:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},kb:{name:"signOut",i:[]},toJSON:{name:"toJSON",i:[Wc(null,!0)]},Oc:{name:"useDeviceLanguage",i:[]},Pc:{name:"verifyPasswordResetCode",i:[Wc("code")]}}),function(t,e){for(var n in e){var r=e[n].name;if(r!==n){var i=e[n].Rb;Object.defineProperty(t,r,{get:function(){return this[n]},set:function(t){jc(r,[i],[t],!0),this[n]=t},enumerable:!0})}}}(dc.prototype,{lc:{name:"languageCode",Rb:Qc(Wc(),Hc(),"languageCode")}}),dc.Persistence=Ps,dc.Persistence.LOCAL="local",dc.Persistence.SESSION="session",dc.Persistence.NONE="none",zc(ku.prototype,{delete:{name:"delete",i:[]},ac:{name:"getIdTokenResult",i:[Vc()]},F:{name:"getIdToken",i:[Vc()]},getToken:{name:"getToken",i:[Vc()]},$a:{name:"linkAndRetrieveDataWithCredential",i:[Kc()]},mc:{name:"linkWithCredential",i:[Kc()]},nc:{name:"linkWithPhoneNumber",i:[Wc("phoneNumber"),Gc()]},oc:{name:"linkWithPopup",i:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},pc:{name:"linkWithRedirect",i:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},bb:{name:"reauthenticateAndRetrieveDataWithCredential",i:[Kc()]},vc:{name:"reauthenticateWithCredential",i:[Kc()]},wc:{name:"reauthenticateWithPhoneNumber",i:[Wc("phoneNumber"),Gc()]},xc:{name:"reauthenticateWithPopup",i:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},yc:{name:"reauthenticateWithRedirect",i:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},reload:{name:"reload",i:[]},fb:{name:"sendEmailVerification",i:[Qc($c("opt_actionCodeSettings",!0),Hc(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",i:[Wc(null,!0)]},Mc:{name:"unlink",i:[Wc("provider")]},mb:{name:"updateEmail",i:[Wc("email")]},nb:{name:"updatePassword",i:[Wc("password")]},Nc:{name:"updatePhoneNumber",i:[Kc("phone")]},ob:{name:"updateProfile",i:[$c("profile")]}}),zc(yt.prototype,{ha:{name:"finally"},m:{name:"catch"},then:{name:"then"}}),zc(wu.prototype,{confirm:{name:"confirm",i:[Wc("verificationCode")]}}),Xc(Ri,"credential",function(t,e){return new ki(t,e)},[Wc("email"),Wc("password")]),zc(Ei.prototype,{ta:{name:"addScope",i:[Wc("scope")]},Ca:{name:"setCustomParameters",i:[$c("customOAuthParameters")]}}),Xc(Ei,"credential",Ci,[Qc(Wc(),$c(),"token")]),Xc(Ri,"credentialWithLink",Pi,[Wc("email"),Wc("emailLink")]),zc(Ti.prototype,{ta:{name:"addScope",i:[Wc("scope")]},Ca:{name:"setCustomParameters",i:[$c("customOAuthParameters")]}}),Xc(Ti,"credential",Si,[Qc(Wc(),$c(),"token")]),zc(Ii.prototype,{ta:{name:"addScope",i:[Wc("scope")]},Ca:{name:"setCustomParameters",i:[$c("customOAuthParameters")]}}),Xc(Ii,"credential",Ni,[Qc(Wc(),Qc($c(),Hc()),"idToken"),Qc(Wc(),Hc(),"accessToken",!0)]),zc(Ai.prototype,{Ca:{name:"setCustomParameters",i:[$c("customOAuthParameters")]}}),Xc(Ai,"credential",Oi,[Qc(Wc(),$c(),"token"),Wc("secret",!0)]),zc(wi.prototype,{ta:{name:"addScope",i:[Wc("scope")]},credential:{name:"credential",i:[Qc(Wc(),Hc(),"idToken",!0),Qc(Wc(),Hc(),"accessToken",!0)]},Ca:{name:"setCustomParameters",i:[$c("customOAuthParameters")]}}),Xc(Mi,"credential",Fi,[Wc("verificationId"),Wc("verificationCode")]),zc(Mi.prototype,{Sa:{name:"verifyPhoneNumber",i:[Wc("phoneNumber"),Gc()]}}),zc(Fr.prototype,{toJSON:{name:"toJSON",i:[Wc(null,!0)]}}),zc(Hi.prototype,{toJSON:{name:"toJSON",i:[Wc(null,!0)]}}),zc(qi.prototype,{toJSON:{name:"toJSON",i:[Wc(null,!0)]}}),zc(Uc.prototype,{clear:{name:"clear",i:[]},render:{name:"render",i:[]},verify:{name:"verify",i:[]}}),function(){if(void 0===e||!e.INTERNAL||!e.INTERNAL.registerService)throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");var t={Auth:dc,Error:Fr};Xc(t,"EmailAuthProvider",Ri,[]),Xc(t,"FacebookAuthProvider",Ei,[]),Xc(t,"GithubAuthProvider",Ti,[]),Xc(t,"GoogleAuthProvider",Ii,[]),Xc(t,"TwitterAuthProvider",Ai,[]),Xc(t,"OAuthProvider",wi,[Wc("providerId")]),Xc(t,"PhoneAuthProvider",Mi,[{name:"auth",K:"an instance of Firebase Auth",optional:!0,M:function(t){return!!(t&&t instanceof dc)}}]),Xc(t,"RecaptchaVerifier",Uc,[Qc(Wc(),{name:"",K:"an HTML element",optional:!1,M:function(t){return!!(t&&t instanceof Element)}},"recaptchaContainer"),$c("recaptchaParameters",!0),{name:"app",K:"an instance of Firebase App",optional:!0,M:function(t){return!!(t&&t instanceof e.app.App)}}]),e.INTERNAL.registerService("auth",function(t,e){return e({INTERNAL:{getUid:g((t=new dc(t)).getUid,t),getToken:g(t.$b,t),addAuthTokenListener:g(t.Qb,t),removeAuthTokenListener:g(t.zc,t)}}),t},t,function(t,e){if("create"===t)try{e.auth()}catch(t){}}),e.INTERNAL.extendNamespace({User:ku})}()}).call(void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})}).call(this,n(5))},function(t,e,n){n(17)},function(t,e){!function(t){"use strict";if(!t.fetch){var e={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};if(e.arrayBuffer)var n=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],r=function(t){return t&&DataView.prototype.isPrototypeOf(t)},i=ArrayBuffer.isView||function(t){return t&&n.indexOf(Object.prototype.toString.call(t))>-1};l.prototype.append=function(t,e){t=s(t),e=u(e);var n=this.map[t];this.map[t]=n?n+","+e:e},l.prototype.delete=function(t){delete this.map[s(t)]},l.prototype.get=function(t){return t=s(t),this.has(t)?this.map[t]:null},l.prototype.has=function(t){return this.map.hasOwnProperty(s(t))},l.prototype.set=function(t,e){this.map[s(t)]=u(e)},l.prototype.forEach=function(t,e){for(var n in this.map)this.map.hasOwnProperty(n)&&t.call(e,this.map[n],n,this)},l.prototype.keys=function(){var t=[];return this.forEach(function(e,n){t.push(n)}),c(t)},l.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),c(t)},l.prototype.entries=function(){var t=[];return this.forEach(function(e,n){t.push([n,e])}),c(t)},e.iterable&&(l.prototype[Symbol.iterator]=l.prototype.entries);var o=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];y.prototype.clone=function(){return new y(this,{body:this._bodyInit})},v.call(y.prototype),v.call(g.prototype),g.prototype.clone=function(){return new g(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new l(this.headers),url:this.url})},g.error=function(){var t=new g(null,{status:0,statusText:""});return t.type="error",t};var a=[301,302,303,307,308];g.redirect=function(t,e){if(-1===a.indexOf(e))throw new RangeError("Invalid status code");return new g(null,{status:e,headers:{location:t}})},t.Headers=l,t.Request=y,t.Response=g,t.fetch=function(t,n){return new Promise(function(r,i){var o=new y(t,n),a=new XMLHttpRequest;a.onload=function(){var t,e,n={status:a.status,statusText:a.statusText,headers:(t=a.getAllResponseHeaders()||"",e=new l,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(t){var n=t.split(":"),r=n.shift().trim();if(r){var i=n.join(":").trim();e.append(r,i)}}),e)};n.url="responseURL"in a?a.responseURL:n.headers.get("X-Request-URL");var i="response"in a?a.response:a.responseText;r(new g(i,n))},a.onerror=function(){i(new TypeError("Network request failed"))},a.ontimeout=function(){i(new TypeError("Network request failed"))},a.open(o.method,o.url,!0),"include"===o.credentials?a.withCredentials=!0:"omit"===o.credentials&&(a.withCredentials=!1),"responseType"in a&&e.blob&&(a.responseType="blob"),o.headers.forEach(function(t,e){a.setRequestHeader(e,t)}),a.send(void 0===o._bodyInit?null:o._bodyInit)})},t.fetch.polyfill=!0}function s(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function u(t){return"string"!=typeof t&&(t=String(t)),t}function c(t){var n={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return e.iterable&&(n[Symbol.iterator]=function(){return n}),n}function l(t){this.map={},t instanceof l?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function h(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function f(t){return new Promise(function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function p(t){var e=new FileReader,n=f(e);return e.readAsArrayBuffer(t),n}function d(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function v(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,t)if("string"==typeof t)this._bodyText=t;else if(e.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(e.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(e.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(e.arrayBuffer&&e.blob&&r(t))this._bodyArrayBuffer=d(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!e.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t)&&!i(t))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=d(t)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):e.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},e.blob&&(this.blob=function(){var t=h(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?h(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(p)}),this.text=function(){var t,e,n,r=h(this);if(r)return r;if(this._bodyBlob)return t=this._bodyBlob,e=new FileReader,n=f(e),e.readAsText(t),n;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),n=new Array(e.length),r=0;r<e.length;r++)n[r]=String.fromCharCode(e[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},e.formData&&(this.formData=function(){return this.text().then(_)}),this.json=function(){return this.text().then(JSON.parse)},this}function y(t,e){var n,r,i=(e=e||{}).body;if(t instanceof y){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new l(t.headers)),this.method=t.method,this.mode=t.mode,i||null==t._bodyInit||(i=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new l(e.headers)),this.method=(n=e.method||this.method||"GET",r=n.toUpperCase(),o.indexOf(r)>-1?r:n),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&i)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(i)}function _(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),i=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(i))}}),e}function g(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new l(e.headers),this.url=e.url||"",this._initBody(t)}}("undefined"!=typeof self?self:this)},function(t,e,n){"use strict";n.r(e),function(t,e){n(19);var r=setTimeout;function i(){}function o(t){if(!(this instanceof o))throw new TypeError("Promises must be constructed via new");if("function"!=typeof t)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],l(t,this)}function a(t,e){for(;3===t._state;)t=t._value;0!==t._state?(t._handled=!0,o._immediateFn(function(){var n=1===t._state?e.onFulfilled:e.onRejected;if(null!==n){var r;try{r=n(t._value)}catch(t){return void u(e.promise,t)}s(e.promise,r)}else(1===t._state?s:u)(e.promise,t._value)})):t._deferreds.push(e)}function s(t,e){try{if(e===t)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var n=e.then;if(e instanceof o)return t._state=3,t._value=e,void c(t);if("function"==typeof n)return void l((r=n,i=e,function(){r.apply(i,arguments)}),t)}t._state=1,t._value=e,c(t)}catch(e){u(t,e)}var r,i}function u(t,e){t._state=2,t._value=e,c(t)}function c(t){2===t._state&&0===t._deferreds.length&&o._immediateFn(function(){t._handled||o._unhandledRejectionFn(t._value)});for(var e=0,n=t._deferreds.length;e<n;e++)a(t,t._deferreds[e]);t._deferreds=null}function l(t,e){var n=!1;try{t(function(t){n||(n=!0,s(e,t))},function(t){n||(n=!0,u(e,t))})}catch(t){if(n)return;n=!0,u(e,t)}}o.prototype.catch=function(t){return this.then(null,t)},o.prototype.then=function(t,e){var n=new this.constructor(i);return a(this,new function(t,e,n){this.onFulfilled="function"==typeof t?t:null,this.onRejected="function"==typeof e?e:null,this.promise=n}(t,e,n)),n},o.prototype.finally=function(t){var e=this.constructor;return this.then(function(n){return e.resolve(t()).then(function(){return n})},function(n){return e.resolve(t()).then(function(){return e.reject(n)})})},o.all=function(t){return new o(function(e,n){if(!t||void 0===t.length)throw new TypeError("Promise.all accepts an array");var r=Array.prototype.slice.call(t);if(0===r.length)return e([]);var i=r.length;function o(t,a){try{if(a&&("object"==typeof a||"function"==typeof a)){var s=a.then;if("function"==typeof s)return void s.call(a,function(e){o(t,e)},n)}r[t]=a,0==--i&&e(r)}catch(t){n(t)}}for(var a=0;a<r.length;a++)o(a,r[a])})},o.resolve=function(t){return t&&"object"==typeof t&&t.constructor===o?t:new o(function(e){e(t)})},o.reject=function(t){return new o(function(e,n){n(t)})},o.race=function(t){return new o(function(e,n){for(var r=0,i=t.length;r<i;r++)t[r].then(e,n)})},o._immediateFn="function"==typeof t&&function(e){t(e)}||function(t){r(t,0)},o._unhandledRejectionFn=function(t){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",t)};var h=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==e)return e;throw new Error("unable to locate global object")}();function f(t,e){return t(e={exports:{}},e.exports),e.exports}h.Promise||(h.Promise=o);var p=f(function(t){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)}),d=f(function(t){var e=t.exports={version:"2.5.5"};"number"==typeof __e&&(__e=e)}),v=(d.version,function(t){return"object"==typeof t?null!==t:"function"==typeof t}),y=function(t){if(!v(t))throw TypeError(t+" is not an object!");return t},_=function(t){try{return!!t()}catch(t){return!0}},g=!_(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}),m=p.document,b=v(m)&&v(m.createElement),w=!g&&!_(function(){return 7!=Object.defineProperty((t="div",b?m.createElement(t):{}),"a",{get:function(){return 7}}).a;var t}),E=Object.defineProperty,C={f:g?Object.defineProperty:function(t,e,n){if(y(t),e=function(t,e){if(!v(t))return t;var n,r;if(e&&"function"==typeof(n=t.toString)&&!v(r=n.call(t)))return r;if("function"==typeof(n=t.valueOf)&&!v(r=n.call(t)))return r;if(!e&&"function"==typeof(n=t.toString)&&!v(r=n.call(t)))return r;throw TypeError("Can't convert object to primitive value")}(e,!0),y(n),w)try{return E(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},T=g?function(t,e,n){return C.f(t,e,function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}(1,n))}:function(t,e,n){return t[e]=n,t},S={}.hasOwnProperty,I=function(t,e){return S.call(t,e)},N=0,A=Math.random(),O=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++N+A).toString(36))},k=f(function(t){var e=O("src"),n=Function.toString,r=(""+n).split("toString");d.inspectSource=function(t){return n.call(t)},(t.exports=function(t,n,i,o){var a="function"==typeof i;a&&(I(i,"name")||T(i,"name",n)),t[n]!==i&&(a&&(I(i,e)||T(i,e,t[n]?""+t[n]:r.join(String(n)))),t===p?t[n]=i:o?t[n]?t[n]=i:T(t,n,i):(delete t[n],T(t,n,i)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[e]||n.call(this)})}),R=function(t,e,n){if(function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!")}(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}},P=function(t,e,n){var r,i,o,a,s=t&P.F,u=t&P.G,c=t&P.S,l=t&P.P,h=t&P.B,f=u?p:c?p[e]||(p[e]={}):(p[e]||{}).prototype,v=u?d:d[e]||(d[e]={}),y=v.prototype||(v.prototype={});for(r in u&&(n=e),n)o=((i=!s&&f&&void 0!==f[r])?f:n)[r],a=h&&i?R(o,p):l&&"function"==typeof o?R(Function.call,o):o,f&&k(f,r,o,t&P.U),v[r]!=o&&T(v,r,a),l&&y[r]!=o&&(y[r]=o)};p.core=d,P.F=1,P.G=2,P.S=4,P.P=8,P.B=16,P.W=32,P.U=64,P.R=128;var D=P,x={}.toString,L=function(t){return x.call(t).slice(8,-1)},M=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==L(t)?t.split(""):Object(t)},F=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t},U=Math.ceil,j=Math.floor,B=Math.min,W=function(t){return t>0?B(function(t){return isNaN(t=+t)?0:(t>0?j:U)(t)}(t),9007199254740991):0},V=Array.isArray||function(t){return"Array"==L(t)},$=p["__core-js_shared__"]||(p["__core-js_shared__"]={}),q=function(t){return $[t]||($[t]={})},H=f(function(t){var e=q("wks"),n=p.Symbol,r="function"==typeof n;(t.exports=function(t){return e[t]||(e[t]=r&&n[t]||(r?n:O)("Symbol."+t))}).store=e}),K=H("species"),G=function(t,e){return new(function(t){var e;return V(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!V(e.prototype)||(e=void 0),v(e)&&null===(e=e[K])&&(e=void 0)),void 0===e?Array:e}(t))(e)},Q=function(t,e){var n=1==t,r=2==t,i=3==t,o=4==t,a=6==t,s=5==t||a,u=e||G;return function(e,c,l){for(var h,f,p=Object(F(e)),d=M(p),v=R(c,l,3),y=W(d.length),_=0,g=n?u(e,y):r?u(e,0):void 0;y>_;_++)if((s||_ in d)&&(f=v(h=d[_],_,p),t))if(n)g[_]=f;else if(f)switch(t){case 3:return!0;case 5:return h;case 6:return _;case 2:g.push(h)}else if(o)return!1;return a?-1:i||o?o:g}},z=H("unscopables"),X=Array.prototype;void 0==X[z]&&T(X,z,{});var Y=function(t){X[z][t]=!0},J=Q(5),Z=!0;"find"in[]&&Array(1).find(function(){Z=!1}),D(D.P+D.F*Z,"Array",{find:function(t){return J(this,t,arguments.length>1?arguments[1]:void 0)}}),Y("find");d.Array.find;var tt=Q(6),et=!0;"findIndex"in[]&&Array(1).findIndex(function(){et=!1}),D(D.P+D.F*et,"Array",{findIndex:function(t){return tt(this,t,arguments.length>1?arguments[1]:void 0)}}),Y("findIndex");d.Array.findIndex;var nt=H("match"),rt=function(t,e,n){if(v(r=e)&&(void 0!==(i=r[nt])?i:"RegExp"==L(r)))throw TypeError("String#"+n+" doesn't accept regex!");var r,i;return String(F(t))},it=H("match"),ot="".startsWith;D(D.P+D.F*function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[it]=!1,!"/./"[t](e)}catch(t){}}return!0}("startsWith"),"String",{startsWith:function(t){var e=rt(this,t,"startsWith"),n=W(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return ot?ot.call(e,r,n):e.slice(n,n+r.length)===r}});d.String.startsWith}.call(this,n(8).setImmediate,n(5))},function(t,e,n){n(20),t.exports=n(2).default},function(t,e,n){var r=n(21);n(18),n(16),n(13),n(11),t.exports=r},function(t,e,n){(t.exports=n(4)(!1)).push([t.i,"",""])},function(t,e,n){var r=n(23);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(3).default)("1f762da4",r,!1,{})},function(t,e,n){(t.exports=n(4)(!1)).push([t.i,"",""])},function(t,e,n){var r=n(25);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(3).default)("963a36fc",r,!1,{})},function(t,e,n){(t.exports=n(4)(!1)).push([t.i,"",""])},function(t,e,n){var r=n(27);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(3).default)("2be7ea34",r,!1,{})},function(t,e,n){(t.exports=n(4)(!1)).push([t.i,"\n.add-role-modal-body {\n  text-align: left;\n}\n.add-role-modal-body > .col > .row-2 {\n    margin-top: 4px;\n    margin-bottom: 4px;\n}\n.role-options > div {\n  font-size: 26px;\n  line-height: normal;\n}\n.role-options > label {\n  border-radius: 1;\n}\n.select-role {\n  font-weight: 600;\n  font-size: 24px;\n}\n",""])},function(t,e,n){var r=n(29);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(3).default)("b53a0ea6",r,!1,{})},function(t,e,n){(t.exports=n(4)(!1)).push([t.i,"",""])},function(t,e,n){var r=n(31);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(3).default)("e3f4b708",r,!1,{})},function(t,e,n){(t.exports=n(4)(!1)).push([t.i,"\n.floater {\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  margin: 0 auto;\n}\n.floater:before {\n    content: '';\n    display: inline-block;\n    vertical-align: middle;\n    height: 100%;\n}\n.role-content {\n  display: inline-block;\n  vertical-align: middle;\n  width: 70%;\n  height: 75%;\n  background: gray;\n}\n.role-content > ul {\n    background-color: white;\n}\n.role-content > ul > li > a {\n      height: 50px;\n      font-size: 25px;\n      line-height: normal;\n}\n.nav.nav-tabs.nav-justified > a {\n  height: 100px;\n}\n",""])},function(t,e,n){var r=n(33);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(3).default)("0ac57b86",r,!1,{})},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i,o,a,s,u=1,c={},l=!1,h=t.document,f=Object.getPrototypeOf&&Object.getPrototypeOf(t);f=f&&f.setTimeout?f:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){d(t)})}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((o=new MessageChannel).port1.onmessage=function(t){d(t.data)},r=function(t){o.port2.postMessage(t)}):h&&"onreadystatechange"in h.createElement("script")?(i=h.documentElement,r=function(t){var e=h.createElement("script");e.onreadystatechange=function(){d(t),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):r=function(t){setTimeout(d,0,t)}:(a="setImmediate$"+Math.random()+"$",s=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(a)&&d(+e.data.slice(a.length))},t.addEventListener?t.addEventListener("message",s,!1):t.attachEvent("onmessage",s),r=function(e){t.postMessage(a+e,"*")}),f.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var i={callback:t,args:e};return c[u]=i,r(u),u++},f.clearImmediate=p}function p(t){delete c[t]}function d(t){if(l)setTimeout(d,0,t);else{var e=c[t];if(e){l=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{p(t),l=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(5),n(7))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,